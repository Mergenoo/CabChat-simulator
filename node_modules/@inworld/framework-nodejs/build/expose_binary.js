"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusOrVectorStringFunctions = exports.StatusOrKnowledgeRetrieverInterfaceFunctions = exports.KnowledgeRetrieverFactoryFunctions = exports.KnowledgeRetrieverInterfaceFunctions = exports.RetrievalConfigFunctions = exports.KnowledgeCollectionFactoryFunctions = exports.VectorKnowledgeCollectionFunctions = exports.KnowledgeCollectionFunctions = exports.SafetyConfigFunctions = exports.VectorTopicThresholdFunctions = exports.VectorKnowledgeRecordFunctions = exports.KnowledgeRecordFunctions = exports.RemoteTTSConfigFunctions = exports.LocalTTSConfigFunctions = exports.TTSInterfaceStatusFunctions = exports.TTSFactoryFunctions = exports.SpeechChunkInputStreamFunctions = exports.SpeechChunkStatusFunctions = exports.PhonemeTimestampVectorFunctions = exports.PhonemeTimestampFunctions = exports.SpeechChunkFunctions = exports.VoiceFunctions = exports.SpeechSynthesisConfigFunctions = exports.InworldSpeechSynthesisConfigFunctions = exports.SpeechSynthesisInferenceConfigFunctions = exports.SpeechSynthesisPostprocessingConfigFunctions = exports.SpeechSynthesisPreprocessingConfigFunctions = exports.TTSInterfaceFunctions = exports.BatchEmbeddingsStatusFunctions = exports.EmbeddingsStatusFunctions = exports.VectorVectorFloatFunctions = exports.VectorFloatFunctions = exports.VectorStringFunctions = exports.OptionalTextEmbedderInterfaceFunctions = exports.TextEmbedderInterfaceFunctions = exports.RemoteTextEmbedderConfigFunctions = exports.LocalTextEmbedderConfigFunctions = exports.TextEmbedderFactoryFunctions = exports.StatusFunctions = exports.InworldStringFunctions = exports.InputStreamFunctions = exports.MapStringStringFunctions = exports.VectorMapStringStringFunctions = exports.LLMJinjaInterfaceFunctions = exports.LLMInterfaceFunctions = exports.TextConfigFunctions = exports.DeviceFunctions = exports.LocalLLMConfigFunctions = exports.RemoteLLMConfigFunctions = exports.LLMFactoryFunctions = void 0;
exports.EmbeddingMatcherConfigFunctions = exports.OptionalEmbeddingMatcherConfigFunctions = exports.IntentMatchFunctions = exports.VectorIntentMatchFunctions = exports.StatusOrVectorIntentMatchFunctions = exports.StatusOrIntentMatcherInterfaceFunctions = exports.IntentMatcherFactoryFunctions = exports.IntentMatcherInterfaceFunctions = exports.IntentMatcherCreationConfigFunctions = exports.IntentMatcherConfigFunctions = exports.CompiledIntentFunctions = exports.VectorCompiledIntentFunctions = exports.StatusOrVectorCompiledIntentFunctions = exports.IntentFunctions = exports.VectorIntentFunctions = exports.StatusOrIntentCompilerInterfaceFunctions = exports.IntentCompilerFactoryFunctions = exports.IntentCompilerInterfaceFunctions = exports.StatusOrSentenceStreamFunctions = exports.SentenceStreamFunctions = exports.StatusOrTextInBracketsRemoverFunctions = exports.TextInBracketsRemoverFunctions = exports.StatusOrSubstringRemoverFunctions = exports.SubstringRemoverFunctions = exports.StatusOrEmojiRemoverFunctions = exports.EmojiRemoverFunctions = exports.VADInterfaceFunctions = exports.StatusOrVADInterfaceFunctions = exports.VADFactoryFunctions = exports.LocalVADConfigFunctions = exports.VoiceActivityDetectionConfigFunctions = exports.STTInterfaceFunctions = exports.AudioChunkFunctions = exports.LocalSTTConfigFunctions = exports.RemoteSTTConfigFunctions = exports.SpeechRecognitionConfigFunctions = exports.STTFactoryFunctions = exports.LongTermMemoryConfigFunctions = exports.FlashMemoryConfigFunctions = exports.RollingSummaryConfigFunctions = exports.LongTermMemoryFunctions = exports.FlashMemoryFunctions = exports.RollingSummaryFunctions = exports.MemorySnapshotFunctions = exports.StatusOrMemorySnapshotFunctions = exports.StatusOrMemoryInterfaceFunctions = exports.MemoryInterfaceFunctions = exports.MemoryFactoryFunctions = exports.VectorEventFunctions = exports.EventFunctions = void 0;
exports.FileContentFunctions = exports.FileFunctions = exports.KnowledgeInterfaceFunctions = exports.KnowledgeCompileConfigFunctions = exports.ParsingConfigFunctions = exports.KnowledgeGetConfigFunctions = exports.RemoteKnowledgeConfigFunctions = exports.LocalKnowledgeConfigFunctions = exports.KnowledgeFactoryFunctions = exports.CustomNodeThreadedProcessExecutorFunctions = exports.CustomNodeWrapperFunctions = exports.StreamStringFunctions = exports.VectorDictionaryRuleFunctions = exports.DictionaryRuleFunctions = exports.VectorEntityFunctions = exports.EntityFunctions = exports.StatusOrVectorEntityMatchFunctions = exports.VectorEntityMatchFunctions = exports.EntityMatchFunctions = exports.StatusOrNERInterfaceFunctions = exports.NERFactoryFunctions = exports.NERCreationConfigFunctions = exports.NERInterfaceFunctions = exports.TelemetryFunctions = exports.SafetyCheckerInterfaceFunctions = exports.StatusOrSafetyCheckerInterfaceFunctions = exports.StatusOrCheckSafetyResponseFunctions = exports.CheckSafetyResponseFunctions = exports.VectorDetectedTopicFunctions = exports.DetectedTopicFunctions = exports.TopicThresholdFunctions = exports.SafetyCheckerCreationConfigFunctions = exports.SafetyCheckerFactoryFunctions = exports.NodeHelperFunctions = exports.TTSOutputFunctions = exports.StatusOrBaseDataFunctions = exports.VectorBaseDataFunctions = exports.BaseDataFunctions = exports.ChatMessagesFunctions = exports.AudioDataFunctions = exports.TextDataFunctions = exports.GraphExecutorFunctions = exports.VectorNodeFunctions = exports.EdgeConditionExecutorFunctions = exports.EdgeWrapperFunctions = exports.GraphFunctions = exports.StatusOrIntFunctions = exports.OptionalFloatFunctions = exports.LlmMatcherConfigFunctions = exports.OptionalLlmMatcherConfigFunctions = void 0;
exports.KnowledgeNodeHelperFunctions = exports.ExecutionConfigFunctions = exports.VectorCharFunctions = exports.KnowledgeVectorStatusFunctions = exports.KnowledgeStatusFunctions = void 0;
const util = require("util");
const path = require("path");
const koffi = require("koffi");
const platform_detection_1 = require("./common/platform_detection");
const libPath = process.env.INWORLD_FRAMEWORK_BINARY_PATH ||
    (0, platform_detection_1.getBinaryPath)(path.join(__dirname, '..', 'bin'));
const inworld = koffi.load(libPath);
// LLM Factory related functions
exports.LLMFactoryFunctions = {
    new: inworld.func('inworld_LLMFactory_new', 'void *', []),
    delete: inworld.func('inworld_LLMFactory_delete', 'void', ['void *']),
};
// Remote Config related functions
exports.RemoteLLMConfigFunctions = {
    new: inworld.func('inworld_RemoteLLMConfig_new', 'void *', []),
    delete: inworld.func('inworld_RemoteLLMConfig_delete', 'void', ['void *']),
    setProvider: inworld.func('inworld_RemoteLLMConfig_provider_set', 'void', [
        'void *',
        'str',
    ]),
    setModelName: inworld.func('inworld_RemoteLLMConfig_model_name_set', 'void', [
        'void *',
        'str',
    ]),
    setAPIKey: inworld.func('inworld_RemoteLLMConfig_api_key_set', 'void', [
        'void *',
        'str',
    ]),
};
// Local Config related functions
exports.LocalLLMConfigFunctions = {
    new: inworld.func('inworld_LocalLLMConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalLLMConfig_delete', 'void', ['void *']),
    setModelPath: inworld.func('inworld_LocalLLMConfig_model_path_set', 'void', [
        'void *',
        'str',
    ]),
    setDevice: inworld.func('inworld_LocalLLMConfig_device_set', 'void', [
        'void *',
        'void *',
    ]),
};
// Device related functions
exports.DeviceFunctions = {
    getDeviceRegistryInstance: inworld.func('inworld_DeviceRegistry_GetInstance', 'void *', []),
    getAvailableDevices: inworld.func('inworld_DeviceRegistry_GetAvailableDevices', 'void *', ['void *']),
    getDevicesSize: inworld.func('inworld_vector_Device_size', 'int', ['void *']),
    getDevice: inworld.func('inworld_vector_Device_get', 'void *', [
        'void *',
        'int',
    ]),
    getDeviceType: inworld.func('inworld_Device_type', 'int', ['void *']),
};
// Text Generation Config related functions
exports.TextConfigFunctions = {
    new: inworld.func('inworld_TextGenerationConfig_new', 'void *', []),
    delete: inworld.func('inworld_TextGenerationConfig_delete', 'void', [
        'void *',
    ]),
    setMaxTokens: inworld.func('inworld_TextGenerationConfig_max_new_tokens_set', 'void', ['void *', 'int']),
    setRepetitionPenalty: inworld.func('inworld_TextGenerationConfig_repetition_penalty_set', 'void', ['void *', 'float']),
    setTopP: inworld.func('inworld_TextGenerationConfig_top_p_set', 'void', [
        'void *',
        'float',
    ]),
    setMaxPrompt: inworld.func('inworld_TextGenerationConfig_max_prompt_length_set', 'void', ['void *', 'int']),
    setTemperature: inworld.func('inworld_TextGenerationConfig_temperature_set', 'void', ['void *', 'float']),
    setFrequencyPenalty: inworld.func('inworld_TextGenerationConfig_frequency_penalty_set', 'void', ['void *', 'float']),
    setPresencePenalty: inworld.func('inworld_TextGenerationConfig_presence_penalty_set', 'void', ['void *', 'float']),
    setStopSequences: inworld.func('inworld_TextGenerationConfig_stop_sequences_set', 'void', ['void *', 'void *']),
};
// LLM Interface related functions
exports.LLMInterfaceFunctions = {
    createRemote: util.promisify(inworld.func('inworld_LLMFactory_CreateLLM_rcinworld_RemoteLLMConfig', 'void*', ['void *', 'void *']).async),
    createLocal: util.promisify(inworld.func('inworld_LLMFactory_CreateLLM_rcinworld_LocalLLMConfig', 'void*', ['void *', 'void *']).async),
    delete: inworld.func('inworld_StatusOr_LLMInterface_delete', 'void', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_LLMInterface_ok', 'bool', ['void *']),
    get: inworld.func('inworld_StatusOr_LLMInterface_value', 'void *', [
        'void *',
    ]),
    generateTextFromPrompt: util.promisify(inworld.func('inworld_LLMInterface_GenerateText_rcstd_string_rcinworld_TextGenerationConfig', 'void *', ['void *', 'str', 'void *']).async),
    generateTextFromMessages: util.promisify(inworld.func('inworld_LLMInterface_GenerateText_rcstd_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__rcinworld_TextGenerationConfig', 'void *', ['void *', 'void *', 'void *']).async),
};
// LLM Jinja Interface related functions
exports.LLMJinjaInterfaceFunctions = {
    renderJinja: util.promisify(inworld.func('inworld_RenderJinja', 'void *', ['str', 'str']).async),
};
exports.VectorMapStringStringFunctions = {
    newVector: inworld.func('inworld_vector_map_string_string_new', 'void *', []),
    deleteVector: inworld.func('inworld_vector_map_string_string_delete', 'void', ['void *']),
    size: inworld.func('inworld_vector_map_string_string_size', 'size_t', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_map_string_string_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_map_string_string_get', 'void *', [
        'void *',
        'size_t',
    ]),
};
exports.MapStringStringFunctions = {
    new: inworld.func('inworld_map_string_string_new', 'void *', []),
    delete: inworld.func('inworld_map_string_string_delete', 'void', ['void *']),
    set: inworld.func('inworld_map_string_string_set', 'void', [
        'void *',
        'str',
        'str',
    ]),
};
// Input Stream related functions
exports.InputStreamFunctions = {
    isOK: inworld.func('inworld_StatusOr_InputStream_string_ok', 'bool', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_InputStream_string_delete', 'void', [
        'void *',
    ]),
    get: inworld.func('inworld_StatusOr_InputStream_string_value', 'void *', [
        'void *',
    ]),
    hasNext: inworld.func('inworld_InputStream_string_HasNext', 'bool', [
        'void *',
    ]),
    read: util.promisify(inworld.func('inworld_InputStream_string_Read', 'void *', ['void *']).async),
    deleteStream: inworld.func('inworld_InputStream_string_delete', 'void', [
        'void *',
    ]),
};
// Inworld String related functions
exports.InworldStringFunctions = {
    get: inworld.func('inworld_StatusOr_string_value', 'str', ['void *']),
    isOK: inworld.func('inworld_StatusOr_string_ok', 'bool', ['void *']),
};
// Status related functions
exports.StatusFunctions = {
    toString: inworld.func('inworld_Status_ToString', 'str', ['void *']),
    isOK: inworld.func('inworld_Status_ok', 'bool', ['void *']),
    createStatus: inworld.func('inworld_Status_createStatus', 'void *', [
        'void *',
        'str',
    ]),
};
// Text Embedder Factory related functions
exports.TextEmbedderFactoryFunctions = {
    new: inworld.func('inworld_TextEmbedderFactory_new', 'void *', []),
    delete: inworld.func('inworld_TextEmbedderFactory_delete', 'void', [
        'void *',
    ]),
};
// Local Text Embedder Config related functions
exports.LocalTextEmbedderConfigFunctions = {
    new: inworld.func('inworld_LocalTextEmbedderConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalTextEmbedderConfig_delete', 'void', [
        'void *',
    ]),
    setModelPath: inworld.func('inworld_LocalTextEmbedderConfig_model_path_set', 'void', ['void *', 'str']),
    setDevice: inworld.func('inworld_LocalTextEmbedderConfig_device_set', 'void', ['void *', 'void *']),
};
// Remote Text Embedder Config related functions
exports.RemoteTextEmbedderConfigFunctions = {
    new: inworld.func('inworld_RemoteTextEmbedderConfig_new', 'void *', []),
    delete: inworld.func('inworld_RemoteTextEmbedderConfig_delete', 'void', [
        'void *',
    ]),
    setAPIKey: inworld.func('inworld_RemoteTextEmbedderConfig_api_key_set', 'void', ['void *', 'str']),
    setModelName: inworld.func('inworld_RemoteTextEmbedderConfig_model_name_set', 'void', ['void *', 'str']),
    setProvider: inworld.func('inworld_RemoteTextEmbedderConfig_provider_set', 'void', ['void *', 'str']),
};
// Text Embedder Interface related functions
exports.TextEmbedderInterfaceFunctions = {
    createWithLocalConfig: util.promisify(inworld.func('inworld_TextEmbedderFactory_CreateTextEmbedder_rcinworld_LocalTextEmbedderConfig', 'void*', ['void *', 'void *']).async),
    createWithRemoteConfig: util.promisify(inworld.func('inworld_TextEmbedderFactory_CreateTextEmbedder_rcinworld_RemoteTextEmbedderConfig', 'void*', ['void *', 'void *']).async),
    deleteStatusOrInterface: inworld.func('inworld_StatusOr_TextEmbedderInterface_delete', 'void', ['void *']),
    delete: inworld.func('inworld_TextEmbedderInterface_delete', 'void', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_TextEmbedderInterface_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_TextEmbedderInterface_status', 'void *', ['void *']),
    get: inworld.func('inworld_StatusOr_TextEmbedderInterface_value', 'void *', [
        'void *',
    ]),
    embed: util.promisify(inworld.func('inworld_TextEmbedderInterface_Embed', 'void *', [
        'void *',
        'str',
    ]).async),
    embedBatch: util.promisify(inworld.func('inworld_TextEmbedderInterface_EmbedBatch', 'void *', [
        'void *',
        'void *',
    ]).async),
};
// Add OptionalTextEmbedderInterfaceFunctions for handling optional text embedders
exports.OptionalTextEmbedderInterfaceFunctions = {
    new: inworld.func('inworld_optional_TextEmbedderInterface_new', 'void *', []),
    delete: inworld.func('inworld_optional_TextEmbedderInterface_delete', 'void', ['void *']),
    copy: inworld.func('inworld_optional_TextEmbedderInterface_copy', 'void *', [
        'void *',
    ]),
    hasValue: inworld.func('inworld_optional_TextEmbedderInterface_has_value', 'bool', ['void *']),
    getValue: inworld.func('inworld_optional_TextEmbedderInterface_value', 'void *', ['void *']),
    reset: inworld.func('inworld_optional_TextEmbedderInterface_reset', 'void', [
        'void *',
    ]),
};
// Vector String related functions
exports.VectorStringFunctions = {
    new: inworld.func('inworld_vector_string_new', 'void *', []),
    delete: inworld.func('inworld_vector_string_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_string_push_back', 'void', [
        'void *',
        'str',
    ]),
    size: inworld.func('inworld_vector_string_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_string_get', 'str', ['void *', 'int']),
};
// Vector Float related functions
exports.VectorFloatFunctions = {
    new: inworld.func('inworld_vector_float_new', 'void *', []),
    delete: inworld.func('inworld_vector_float_delete', 'void', ['void *']),
    size: inworld.func('inworld_vector_float_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_float_get', 'float', ['void *', 'int']),
    pushBack: inworld.func('inworld_vector_float_push_back', 'void', [
        'void *',
        'float',
    ]),
};
// Vector Vector Float related functions
exports.VectorVectorFloatFunctions = {
    new: inworld.func('inworld_vector_vector_float_new', 'void *', []),
    delete: inworld.func('inworld_vector_vector_float_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_vector_float_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_vector_float_get', 'void *', [
        'void *',
        'int',
    ]),
    clear: inworld.func('inworld_vector_float_clear', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_vector_float_push_back', 'void', [
        'void *',
        'void *',
    ]),
};
// Embeddings Status functions
exports.EmbeddingsStatusFunctions = {
    isOK: inworld.func('inworld_StatusOr_vector_float_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_vector_float_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_vector_float_delete', 'void', [
        'void *',
    ]),
};
// Batch Embeddings Status functions
exports.BatchEmbeddingsStatusFunctions = {
    isOK: inworld.func('inworld_StatusOr_vector_vector_float_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_vector_vector_float_value', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_vector_vector_float_delete', 'void', [
        'void *',
    ]),
};
// TTSInterface Functions
exports.TTSInterfaceFunctions = {
    delete: inworld.func('inworld_TTSInterface_delete', 'void', ['void *']),
    synthesizeSpeech: util.promisify(inworld.func('inworld_TTSInterface_SynthesizeSpeech_rcinworld_Voice_rcstd_string', 'void *', ['void *', 'void *', 'str']).async),
};
// SpeechSynthesisPreprocessingConfig Functions
exports.SpeechSynthesisPreprocessingConfigFunctions = {
    new: inworld.func('inworld_SpeechSynthesisPreprocessingConfig_new', 'void *', []),
    delete: inworld.func('inworld_SpeechSynthesisPreprocessingConfig_delete', 'void', ['void *']),
    setNormalizeText: inworld.func('inworld_SpeechSynthesisPreprocessingConfig_normalize_text_set', 'void', ['void *', 'bool']),
};
// SpeechSynthesisPostprocessingConfig Functions
exports.SpeechSynthesisPostprocessingConfigFunctions = {
    new: inworld.func('inworld_SpeechSynthesisPostprocessingConfig_new', 'void *', []),
    delete: inworld.func('inworld_SpeechSynthesisPostprocessingConfig_delete', 'void', ['void *']),
    setSampleRate: inworld.func('inworld_SpeechSynthesisPostprocessingConfig_sample_rate_set', 'void', ['void *', 'int']),
    setTrimSilence: inworld.func('inworld_SpeechSynthesisPostprocessingConfig_trim_silence_set', 'void', ['void *', 'bool']),
};
// SpeechSynthesisInferenceConfig Functions
exports.SpeechSynthesisInferenceConfigFunctions = {
    new: inworld.func('inworld_SpeechSynthesisInferenceConfig_new', 'void *', []),
    delete: inworld.func('inworld_SpeechSynthesisInferenceConfig_delete', 'void', ['void *']),
    setAlpha: inworld.func('inworld_SpeechSynthesisInferenceConfig_alpha_set', 'void', ['void *', 'float']),
    setBeta: inworld.func('inworld_SpeechSynthesisInferenceConfig_beta_set', 'void', ['void *', 'float']),
    setDiffusionSteps: inworld.func('inworld_SpeechSynthesisInferenceConfig_diffusion_steps_set', 'void', ['void *', 'int']),
    setSpeechTempo: inworld.func('inworld_SpeechSynthesisInferenceConfig_speech_tempo_set', 'void', ['void *', 'float']),
};
// InworldSpeechSynthesisConfig Functions
exports.InworldSpeechSynthesisConfigFunctions = {
    new: inworld.func('inworld_InworldSpeechSynthesisConfig_new', 'void *', []),
    delete: inworld.func('inworld_InworldSpeechSynthesisConfig_delete', 'void', [
        'void *',
    ]),
    setModelId: inworld.func('inworld_InworldSpeechSynthesisConfig_model_id_set', 'void', ['void *', 'str']),
    setPreprocessing: inworld.func('inworld_InworldSpeechSynthesisConfig_preprocessing_set', 'void', ['void *', 'void *']),
    setPostprocessing: inworld.func('inworld_InworldSpeechSynthesisConfig_postprocessing_set', 'void', ['void *', 'void *']),
    setInference: inworld.func('inworld_InworldSpeechSynthesisConfig_inference_set', 'void', ['void *', 'void *']),
};
// SpeechSynthesisConfig Functions
exports.SpeechSynthesisConfigFunctions = {
    new: inworld.func('inworld_SpeechSynthesisConfig_new', 'void *', []),
    delete: inworld.func('inworld_SpeechSynthesisConfig_delete', 'void', [
        'void *',
    ]),
    getInworldConfig: inworld.func('inworld_SpeechSynthesisConfig_inworld_config', 'void *', // Returns InworldSpeechSynthesisConfig*
    ['void *']),
};
// Voice Functions
exports.VoiceFunctions = {
    new: inworld.func('inworld_Voice_new', 'void *', []),
    delete: inworld.func('inworld_Voice_delete', 'void', ['void *']),
    setSpeakerId: inworld.func('inworld_Voice_speaker_id_set', 'void', [
        'void *',
        'void *',
    ]),
};
// SpeechChunk Functions
exports.SpeechChunkFunctions = {
    new: inworld.func('inworld_SpeechChunk_new', 'void *', []),
    delete: inworld.func('inworld_SpeechChunk_delete', 'void', ['void *']),
    getWaveform: inworld.func('inworld_SpeechChunk_waveform_get', 'void *', [
        'void *',
    ]),
    getSampleRate: inworld.func('inworld_SpeechChunk_sample_rate_get', 'int', [
        'void *',
    ]),
    getPhonemeTimestamps: inworld.func('inworld_SpeechChunk_phoneme_timestamps_get', 'void *', ['void *']),
};
// PhonemeTimestamp Functions
exports.PhonemeTimestampFunctions = {
    new: inworld.func('inworld_PhonemeTimestamp_new', 'void *', []),
    delete: inworld.func('inworld_PhonemeTimestamp_delete', 'void', ['void *']),
    getPhoneme: inworld.func('inworld_PhonemeTimestamp_phoneme_get', 'str', [
        'void *',
    ]),
    getStartTimeSec: inworld.func('inworld_PhonemeTimestamp_start_time_sec_get', 'float', ['void *']),
};
// PhonemeTimestampVector Functions
exports.PhonemeTimestampVectorFunctions = {
    new: inworld.func('inworld_vector_SynthesizedSpeech_PhonemeTimestamp_new', 'void *', []),
    delete: inworld.func('inworld_vector_SynthesizedSpeech_PhonemeTimestamp_delete', 'void', ['void *']),
    size: inworld.func('inworld_vector_SynthesizedSpeech_PhonemeTimestamp_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_SynthesizedSpeech_PhonemeTimestamp_get', 'void *', ['void *', 'int']),
};
// StatusOr_SpeechChunk Functions
exports.SpeechChunkStatusFunctions = {
    new: inworld.func('inworld_StatusOr_SpeechChunk_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SpeechChunk_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SpeechChunk_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_SpeechChunk_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_SpeechChunk_delete', 'void', [
        'void *',
    ]),
};
// InputStream_SpeechChunk Functions
exports.SpeechChunkInputStreamFunctions = {
    isOK: inworld.func('inworld_StatusOr_InputStream_SpeechChunk_ok', 'bool', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_InputStream_SpeechChunk_delete', 'void', ['void *']),
    getStream: inworld.func('inworld_StatusOr_InputStream_SpeechChunk_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_InputStream_SpeechChunk_status', 'void *', ['void *']),
    // Stream functions
    deleteStream: inworld.func('inworld_InputStream_SpeechChunk_delete', 'void', [
        'void *',
    ]),
    hasNext: inworld.func('inworld_InputStream_SpeechChunk_HasNext', 'bool', [
        'void *',
    ]),
    read: util.promisify(inworld.func('inworld_InputStream_SpeechChunk_Read', 'void *', ['void *'])
        .async),
};
// TTSFactory Functions
exports.TTSFactoryFunctions = {
    new: inworld.func('inworld_TTSFactory_new', 'void *', []),
    delete: inworld.func('inworld_TTSFactory_delete', 'void', ['void *']),
    createLocalTTS: util.promisify(inworld.func('inworld_TTSFactory_CreateTTS_rcinworld_LocalTTSConfig', 'void *', ['void *', 'void *']).async),
    createRemoteTTS: util.promisify(inworld.func('inworld_TTSFactory_CreateTTS_rcinworld_RemoteTTSConfig', 'void *', ['void *', 'void *']).async),
};
// StatusOr_TTSInterface Functions
exports.TTSInterfaceStatusFunctions = {
    new: inworld.func('inworld_StatusOr_TTSInterface_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_TTSInterface_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_TTSInterface_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_TTSInterface_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_TTSInterface_delete', 'void', [
        'void *',
    ]),
};
// LocalTTSConfig Functions
exports.LocalTTSConfigFunctions = {
    new: inworld.func('inworld_LocalTTSConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalTTSConfig_delete', 'void', ['void *']),
    setModelPath: inworld.func('inworld_LocalTTSConfig_model_path_set', 'void', [
        'void *',
        'str',
    ]),
    setPromptsPath: inworld.func('inworld_LocalTTSConfig_prompts_path_set', 'void', ['void *', 'str']),
    setDevice: inworld.func('inworld_LocalTTSConfig_device_set', 'void', [
        'void *',
        'void *',
    ]),
    setSynthesisConfig: inworld.func('inworld_LocalTTSConfig_synthesis_config_set', 'void', ['void *', 'void *']),
};
// RemoteTTSConfig Functions
exports.RemoteTTSConfigFunctions = {
    new: inworld.func('inworld_RemoteTTSConfig_new', 'void *', []),
    delete: inworld.func('inworld_RemoteTTSConfig_delete', 'void', ['void *']),
    setSynthesisConfig: inworld.func('inworld_RemoteTTSConfig_synthesis_config_set', 'void', ['void *', 'void *']),
    setApiKey: inworld.func('inworld_RemoteTTSConfig_api_key_set', 'void', [
        'void *',
        'str',
    ]),
};
// Knowledge Record related functions
exports.KnowledgeRecordFunctions = {
    new: inworld.func('inworld_KnowledgeRecord_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeRecord_delete', 'void', ['void *']),
    setText: inworld.func('inworld_KnowledgeRecord_text_set', 'void', [
        'void *',
        'str',
    ]),
    setEmbedding: inworld.func('inworld_KnowledgeRecord_embedding_set', 'void', [
        'void *',
        'void *',
    ]),
    setMetadata: inworld.func('inworld_KnowledgeRecord_metadata_set', 'void', [
        'void *',
        'void *',
    ]),
};
// Vector Knowledge Record related functions
exports.VectorKnowledgeRecordFunctions = {
    new: inworld.func('inworld_vector_KnowledgeRecord_new', 'void *', []),
    delete: inworld.func('inworld_vector_KnowledgeRecord_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_KnowledgeRecord_size', 'size_t', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_KnowledgeRecord_push_back', 'void', [
        'void *',
        'void *',
    ]),
};
// Vector Topic Threshold related functions
exports.VectorTopicThresholdFunctions = {
    new: inworld.func('inworld_vector_TopicThreshold_new', 'void *', []),
    delete: inworld.func('inworld_vector_TopicThreshold_delete', 'void', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_TopicThreshold_push_back', 'void', [
        'void *', // vector pointer
        'void *', // TopicThreshold pointer
    ]),
};
// Safety Config related functions
exports.SafetyConfigFunctions = {
    new: inworld.func('inworld_SafetyConfig_new', 'void *', []),
    delete: inworld.func('inworld_SafetyConfig_delete', 'void', ['void *']),
    setForbiddenTopics: inworld.func('inworld_SafetyConfig_forbidden_topics_set', 'void', ['void *', 'void *']),
};
// Knowledge Collection related functions
exports.KnowledgeCollectionFunctions = {
    new: inworld.func('inworld_KnowledgeCollection_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeCollection_delete', 'void', [
        'void *',
    ]),
    setKnowledgeRecords: inworld.func('inworld_KnowledgeCollection_knowledge_records_set', 'void', ['void *', 'void *']),
};
// Vector Knowledge Collection related functions
exports.VectorKnowledgeCollectionFunctions = {
    new: inworld.func('inworld_vector_KnowledgeCollection_new', 'void *', []),
    delete: inworld.func('inworld_vector_KnowledgeCollection_delete', 'void', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_KnowledgeCollection_push_back', 'void', ['void *', 'void *']),
};
// Knowledge Collection Factory related functions
exports.KnowledgeCollectionFactoryFunctions = {
    new: inworld.func('inworld_KnowledgeCollectionFactory_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeCollectionFactory_delete', 'void', [
        'void *',
    ]),
    createKnowledgeCollection: inworld.func('inworld_KnowledgeCollectionFactory_CreateKnowledgeCollection', 'void *', ['void *', 'void *', 'void *']),
};
// Retrieval Config related functions
exports.RetrievalConfigFunctions = {
    new: inworld.func('inworld_RetrievalConfig_new', 'void *', []),
    delete: inworld.func('inworld_RetrievalConfig_delete', 'void', ['void *']),
    setThreshold: inworld.func('inworld_RetrievalConfig_threshold_set', 'void', [
        'void *',
        'float',
    ]),
    setTopK: inworld.func('inworld_RetrievalConfig_top_k_set', 'void', [
        'void *',
        'int',
    ]),
};
// Knowledge Retriever Interface related functions
exports.KnowledgeRetrieverInterfaceFunctions = {
    delete: inworld.func('inworld_KnowledgeRetrieverInterface_delete', 'void', [
        'void *',
    ]),
    retrieveKnowledge: util.promisify(inworld.func('inworld_KnowledgeRetrieverInterface_RetrieveKnowledge', 'void *', ['void *', 'void *', 'void *', 'void *']).async),
};
// Knowledge Retriever Factory related functions
exports.KnowledgeRetrieverFactoryFunctions = {
    new: inworld.func('inworld_KnowledgeRetrieverFactory_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeRetrieverFactory_delete', 'void', [
        'void *',
    ]),
    createKnowledgeRetriever: util.promisify(inworld.func('inworld_KnowledgeRetrieverFactory_CreateKnowledgeRetriever', 'void *', ['void *', 'void *']).async),
};
// StatusOr KnowledgeRetrieverInterface related functions
exports.StatusOrKnowledgeRetrieverInterfaceFunctions = {
    isOK: inworld.func('inworld_StatusOr_KnowledgeRetrieverInterface_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_KnowledgeRetrieverInterface_value', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_KnowledgeRetrieverInterface_delete', 'void', ['void *']),
};
// StatusOr Vector String related functions (for retrieved knowledge results)
exports.StatusOrVectorStringFunctions = {
    getValue: inworld.func('inworld_StatusOr_vector_string_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_vector_string_delete', 'void', [
        'void *',
    ]),
};
// Event related functions
exports.EventFunctions = {
    new: inworld.func('inworld_Event_new', 'void *', []),
    delete: inworld.func('inworld_Event_delete', 'void', ['void *']),
    getSpeech: inworld.func('inworld_Event_speech', 'void *', ['void *']),
    getAction: inworld.func('inworld_Event_action', 'void *', ['void *']),
    setAgentName: inworld.func('inworld_AgentSpeech_agent_name_set', 'void', [
        'void *',
        'str',
    ]),
    setUtterance: inworld.func('inworld_AgentSpeech_utterance_set', 'void', [
        'void *',
        'str',
    ]),
    setName: inworld.func('inworld_AgentAction_name_set', 'void', [
        'void *',
        'str',
    ]),
    setParameters: inworld.func('inworld_AgentAction_set_parameter', 'void', [
        'void *',
        'str',
        'str',
    ]),
};
// Event vector related functions (for conversation history)
exports.VectorEventFunctions = {
    new: inworld.func('inworld_vector_Event_new', 'void *', []),
    delete: inworld.func('inworld_vector_Event_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_Event_push_back', 'void', [
        'void *',
        'void *',
    ]),
    size: inworld.func('inworld_vector_Event_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_Event_get', 'str', ['void *', 'int']),
};
// Memory Factory related functions
exports.MemoryFactoryFunctions = {
    new: inworld.func('inworld_MemoryFactory_new', 'void *', []),
    delete: inworld.func('inworld_MemoryFactory_delete', 'void', ['void *']),
    createMemory: util.promisify(inworld.func('inworld_MemoryFactory_CreateMemory', 'void *', [
        'void *',
        'void *',
        'void *',
        'void *',
        'void *',
        'void *',
        'void *',
        'bool',
    ]).async),
};
// Memory Interface related functions
exports.MemoryInterfaceFunctions = {
    delete: inworld.func('inworld_MemoryInterface_delete', 'void', ['void *']),
    getMemory: util.promisify(inworld.func('inworld_MemoryInterface_GetMemory', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
    updateMemory: util.promisify(inworld.func('inworld_MemoryInterface_UpdateMemory', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
};
// StatusOr MemoryInterface related functions
exports.StatusOrMemoryInterfaceFunctions = {
    isOK: inworld.func('inworld_StatusOr_MemoryInterface_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_MemoryInterface_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_MemoryInterface_delete', 'void', [
        'void *',
    ]),
};
// StatusOr MemorySnapshot related functions
exports.StatusOrMemorySnapshotFunctions = {
    isOK: inworld.func('inworld_StatusOr_MemorySnapshot_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_MemorySnapshot_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_MemorySnapshot_delete', 'void', [
        'void *',
    ]),
};
// Memory Snapshot related functions
exports.MemorySnapshotFunctions = {
    new: inworld.func('inworld_MemorySnapshot_new', 'void *', []),
    delete: inworld.func('inworld_MemorySnapshot_delete', 'void', ['void *']),
    setRollingSummary: inworld.func('inworld_MemorySnapshot_rolling_summary_set', 'void', ['void *', 'void *']),
    setFlashMemory: inworld.func('inworld_MemorySnapshot_flash_memory_set', 'void', ['void *', 'void *']),
    setLongTermMemory: inworld.func('inworld_MemorySnapshot_long_term_memory_set', 'void', ['void *', 'void *']),
};
// Rolling Summary related functions
exports.RollingSummaryFunctions = {
    new: inworld.func('inworld_RollingSummary_new', 'void *', []),
    delete: inworld.func('inworld_RollingSummary_delete', 'void', ['void *']),
    setSummarizedText: inworld.func('inworld_RollingSummary_summarized_text_set', 'void', ['void *', 'str']),
    setTurnsSinceLastUpdate: inworld.func('inworld_RollingSummary_turns_since_last_update_set', 'void', ['void *', 'int']),
};
// Flash Memory related functions
exports.FlashMemoryFunctions = {
    new: inworld.func('inworld_FlashMemory_new', 'void *', []),
    delete: inworld.func('inworld_FlashMemory_delete', 'void', ['void *']),
    setKnowledgeCollection: inworld.func('inworld_FlashMemory_knowledge_collection_set', 'void', ['void *', 'void *']),
};
// Long Term Memory related functions
exports.LongTermMemoryFunctions = {
    new: inworld.func('inworld_LongTermMemory_new', 'void *', []),
    delete: inworld.func('inworld_LongTermMemory_delete', 'void', ['void *']),
    setKnowledgeCollection: inworld.func('inworld_LongTermMemory_knowledge_collection_set', 'void', ['void *', 'void *']),
};
// Rolling Summary Config related functions
exports.RollingSummaryConfigFunctions = {
    new: inworld.func('inworld_RollingSummaryConfig_new', 'void *', []),
    delete: inworld.func('inworld_RollingSummaryConfig_delete', 'void', [
        'void *',
    ]),
    setNumberOfTurnsBeforeSummary: inworld.func('inworld_RollingSummaryConfig_number_of_turns_before_summary_set', 'void', ['void *', 'int']),
    setStartWindowSize: inworld.func('inworld_RollingSummaryConfig_start_window_size_set', 'void', ['void *', 'int']),
    setMaxSummarySentences: inworld.func('inworld_RollingSummaryConfig_max_summary_sentences_set', 'void', ['void *', 'int']),
    setTextGenerationConfig: inworld.func('inworld_RollingSummaryConfig_text_generation_config_set', 'void', ['void *', 'void *']),
};
// Flash Memory Config related functions
exports.FlashMemoryConfigFunctions = {
    new: inworld.func('inworld_FlashMemoryConfig_new', 'void *', []),
    delete: inworld.func('inworld_FlashMemoryConfig_delete', 'void', ['void *']),
    setDialogueCutoffSize: inworld.func('inworld_FlashMemoryConfig_dialogue_cutoff_size_set', 'void', ['void *', 'int']),
    setNHistoryTurns: inworld.func('inworld_FlashMemoryConfig_n_history_turns_set', 'void', ['void *', 'int']),
    setMemoriesSimilarityThreshold: inworld.func('inworld_FlashMemoryConfig_memories_similarity_threshold_set', 'void', ['void *', 'float']),
    setMaxFlashMemory: inworld.func('inworld_FlashMemoryConfig_max_flash_memory_set', 'void', ['void *', 'int']),
    setMaxTopicsPerMemory: inworld.func('inworld_FlashMemoryConfig_max_topics_per_memory_set', 'void', ['void *', 'int']),
    setTextGenerationConfig: inworld.func('inworld_FlashMemoryConfig_text_generation_config_set', 'void', ['void *', 'void *']),
};
// Long Term Memory Config related functions
exports.LongTermMemoryConfigFunctions = {
    new: inworld.func('inworld_LongTermMemoryConfig_new', 'void *', []),
    delete: inworld.func('inworld_LongTermMemoryConfig_delete', 'void', [
        'void *',
    ]),
    setMaxTopicSummaryLenToAppend: inworld.func('inworld_LongTermMemoryConfig_max_topic_summary_len_to_append_set', 'void', ['void *', 'int']),
    setMaxNumberOfFlashMemory: inworld.func('inworld_LongTermMemoryConfig_max_number_of_flash_memory_set', 'void', ['void *', 'int']),
    setMaxNumberOfTopics: inworld.func('inworld_LongTermMemoryConfig_max_number_of_topics_set', 'void', ['void *', 'int']),
    setTextGenerationConfig: inworld.func('inworld_LongTermMemoryConfig_text_generation_config_set', 'void', ['void *', 'void *']),
};
// STT Factory related functions
exports.STTFactoryFunctions = {
    new: inworld.func('inworld_STTFactory_new', 'void *', []),
    delete: inworld.func('inworld_STTFactory_delete', 'void', ['void *']),
};
// SpeechRecognitionConfig related functions
exports.SpeechRecognitionConfigFunctions = {
    new: inworld.func('inworld_SpeechRecognitionConfig_new', 'void *', []),
    delete: inworld.func('inworld_SpeechRecognitionConfig_delete', 'void', [
        'void *',
    ]),
};
// Remote STT Config related functions
exports.RemoteSTTConfigFunctions = {
    new: inworld.func('inworld_RemoteSTTConfig_new', 'void *', []),
    delete: inworld.func('inworld_RemoteSTTConfig_delete', 'void', ['void *']),
    setApiKey: inworld.func('inworld_RemoteSTTConfig_api_key_set', 'void', [
        'void *',
        'str',
    ]),
};
// Local STT Config related functions
exports.LocalSTTConfigFunctions = {
    new: inworld.func('inworld_LocalSTTConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalSTTConfig_delete', 'void', ['void *']),
    setModelPath: inworld.func('inworld_LocalSTTConfig_model_path_set', 'void', [
        'void *',
        'str',
    ]),
    setDevice: inworld.func('inworld_LocalSTTConfig_device_set', 'void', [
        'void *',
        'void *',
    ]),
};
// AudioChunk related functions
exports.AudioChunkFunctions = {
    new: inworld.func('inworld_AudioChunk_new', 'void *', []),
    delete: inworld.func('inworld_AudioChunk_delete', 'void', ['void *']),
    setSampleRate: inworld.func('inworld_AudioChunk_sample_rate_set', 'void', [
        'void *',
        'int',
    ]),
    setData: inworld.func('inworld_AudioChunk_data_set', 'void', [
        'void *',
        'void *',
    ]),
};
// STT Interface related functions
exports.STTInterfaceFunctions = {
    createRemote: util.promisify(inworld.func('inworld_STTFactory_CreateSTT_rcinworld_RemoteSTTConfig', 'void*', ['void *', 'void *']).async),
    createLocal: util.promisify(inworld.func('inworld_STTFactory_CreateSTT_rcinworld_LocalSTTConfig', 'void*', ['void *', 'void *']).async),
    delete: inworld.func('inworld_StatusOr_STTInterface_delete', 'void', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_STTInterface_ok', 'bool', ['void *']),
    get: inworld.func('inworld_StatusOr_STTInterface_value', 'void *', [
        'void *',
    ]),
    recognizeSpeech: util.promisify(inworld.func('inworld_STTInterface_RecognizeSpeech', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
};
// Voice Activity Detection Config related functions
exports.VoiceActivityDetectionConfigFunctions = {
    new: inworld.func('inworld_VoiceActivityDetectionConfig_new', 'void *', []),
    delete: inworld.func('inworld_VoiceActivityDetectionConfig_delete', 'void', [
        'void *',
    ]),
    setSpeechThreshold: inworld.func('inworld_VoiceActivityDetectionConfig_speech_threshold_set', 'void', ['void *', 'float']),
    getSpeechThreshold: inworld.func('inworld_VoiceActivityDetectionConfig_speech_threshold_get', 'float', ['void *']),
};
// Local VAD Config related functions
exports.LocalVADConfigFunctions = {
    new: inworld.func('inworld_LocalVADConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalVADConfig_delete', 'void', ['void *']),
    setModelPath: inworld.func('inworld_LocalVADConfig_model_path_set', 'void', [
        'void *',
        'str',
    ]),
    setDevice: inworld.func('inworld_LocalVADConfig_device_set', 'void', [
        'void *',
        'void *',
    ]),
    setDefaultConfig: inworld.func('inworld_LocalVADConfig_default_config_set', 'void', ['void *', 'void *']),
};
// VAD Factory related functions
exports.VADFactoryFunctions = {
    new: inworld.func('inworld_VADFactory_new', 'void *', []),
    delete: inworld.func('inworld_VADFactory_delete', 'void', ['void *']),
    createVAD: util.promisify(inworld.func('inworld_VADFactory_CreateVAD', 'void *', ['void *', 'void *'])
        .async),
};
// StatusOr_VADInterface related functions
exports.StatusOrVADInterfaceFunctions = {
    new: inworld.func('inworld_StatusOr_VADInterface_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_VADInterface_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_VADInterface_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_VADInterface_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_VADInterface_delete', 'void', [
        'void *',
    ]),
};
// VAD Interface related functions
exports.VADInterfaceFunctions = {
    delete: inworld.func('inworld_VADInterface_delete', 'void', ['void *']),
    detectVoiceActivity: util.promisify(inworld.func('inworld_VADInterface_DetectVoiceActivity', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
};
// EmojiRemover related functions
exports.EmojiRemoverFunctions = {
    create: util.promisify(inworld.func('inworld_EmojiRemover_Create', 'void *', ['void *']).async),
    delete: inworld.func('inworld_EmojiRemover_delete', 'void', ['void *']),
};
// StatusOr EmojiRemover related functions
exports.StatusOrEmojiRemoverFunctions = {
    new: inworld.func('inworld_StatusOr_EmojiRemover_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_EmojiRemover_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_EmojiRemover_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_EmojiRemover_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_EmojiRemover_delete', 'void', [
        'void *',
    ]),
};
// SubstringRemover related functions
exports.SubstringRemoverFunctions = {
    create: util.promisify(inworld.func('inworld_SubstringRemover_Create', 'void *', [
        'void *',
        'void *',
    ]).async),
    delete: inworld.func('inworld_SubstringRemover_delete', 'void', ['void *']),
};
// StatusOr SubstringRemover related functions
exports.StatusOrSubstringRemoverFunctions = {
    new: inworld.func('inworld_StatusOr_SubstringRemover_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SubstringRemover_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SubstringRemover_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_SubstringRemover_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SubstringRemover_delete', 'void', [
        'void *',
    ]),
};
// TextInBracketsRemover related functions
exports.TextInBracketsRemoverFunctions = {
    create: util.promisify(inworld.func('inworld_TextInBracketsRemover_Create', 'void *', ['void *'])
        .async),
    delete: inworld.func('inworld_TextInBracketsRemover_delete', 'void', [
        'void *',
    ]),
};
// StatusOr TextInBracketsRemover related functions
exports.StatusOrTextInBracketsRemoverFunctions = {
    new: inworld.func('inworld_StatusOr_TextInBracketsRemover_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_TextInBracketsRemover_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_TextInBracketsRemover_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_TextInBracketsRemover_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_TextInBracketsRemover_delete', 'void', ['void *']),
};
// SentenceStream related functions
exports.SentenceStreamFunctions = {
    create: util.promisify(inworld.func('inworld_SentenceStream_Create', 'void *', ['void *']).async),
    delete: inworld.func('inworld_SentenceStream_delete', 'void', ['void *']),
};
// StatusOr SentenceStream related functions
exports.StatusOrSentenceStreamFunctions = {
    new: inworld.func('inworld_StatusOr_SentenceStream_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SentenceStream_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SentenceStream_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_SentenceStream_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_SentenceStream_delete', 'void', [
        'void *',
    ]),
};
// IntentCompiler Interface related functions
exports.IntentCompilerInterfaceFunctions = {
    delete: inworld.func('inworld_IntentCompilerInterface_delete', 'void', [
        'void *',
    ]),
    compileIntents: util.promisify(inworld.func('inworld_IntentCompilerInterface_CompileIntents', 'void *', [
        'void *',
        'void *',
    ]).async),
};
// IntentCompiler Factory related functions
exports.IntentCompilerFactoryFunctions = {
    new: inworld.func('inworld_IntentCompilerFactory_new', 'void *', []),
    delete: inworld.func('inworld_IntentCompilerFactory_delete', 'void', [
        'void *',
    ]),
    createWithTextEmbedder: util.promisify(inworld.func('inworld_IntentCompilerFactory_CreateIntentCompiler_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg_', 'void *', ['void *', 'void *']).async),
    create: util.promisify(inworld.func('inworld_IntentCompilerFactory_CreateIntentCompiler', 'void *', ['void *']).async),
};
// StatusOr IntentCompiler Interface related functions
exports.StatusOrIntentCompilerInterfaceFunctions = {
    new: inworld.func('inworld_StatusOr_IntentCompilerInterface_new', 'void *', []),
    delete: inworld.func('inworld_StatusOr_IntentCompilerInterface_delete', 'void', ['void *']),
    isOK: inworld.func('inworld_StatusOr_IntentCompilerInterface_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_IntentCompilerInterface_status', 'void *', ['void *']),
    getValue: inworld.func('inworld_StatusOr_IntentCompilerInterface_value', 'void *', ['void *']),
};
// Vector Intent related functions
exports.VectorIntentFunctions = {
    new: inworld.func('inworld_vector_Intent_new', 'void *', []),
    delete: inworld.func('inworld_vector_Intent_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_Intent_push_back', 'void', [
        'void *',
        'void *',
    ]),
};
// Intent related functions
exports.IntentFunctions = {
    new: inworld.func('inworld_Intent_new', 'void *', []),
    delete: inworld.func('inworld_Intent_delete', 'void', ['void *']),
    setName: inworld.func('inworld_Intent_name_set', 'void', ['void *', 'str']),
    getName: inworld.func('inworld_Intent_name_get', 'str', ['void *']),
    setPhrases: inworld.func('inworld_Intent_phrases_set', 'void', [
        'void *',
        'void *',
    ]),
    getPhrases: inworld.func('inworld_Intent_phrases_get', 'void *', ['void *']),
};
exports.StatusOrVectorCompiledIntentFunctions = {
    new: inworld.func('inworld_StatusOr_vector_CompiledIntent_new', 'void *', []),
    delete: inworld.func('inworld_StatusOr_vector_CompiledIntent_delete', 'void', ['void *']),
    isOK: inworld.func('inworld_StatusOr_vector_CompiledIntent_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_vector_CompiledIntent_status', 'void *', ['void *']),
    getValue: inworld.func('inworld_StatusOr_vector_CompiledIntent_value', 'void *', ['void *']),
};
// Vector CompiledIntent related functions
exports.VectorCompiledIntentFunctions = {
    new: inworld.func('inworld_vector_CompiledIntent_new', 'void *', []),
    delete: inworld.func('inworld_vector_CompiledIntent_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_CompiledIntent_size', 'size_t', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_CompiledIntent_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_CompiledIntent_get', 'void *', [
        'void *',
        'int',
    ]),
};
// CompiledIntent related functions
exports.CompiledIntentFunctions = {
    new: inworld.func('inworld_CompiledIntent_new', 'void *', []),
    delete: inworld.func('inworld_CompiledIntent_delete', 'void', ['void *']),
    setName: inworld.func('inworld_CompiledIntent_name_set', 'void', [
        'void *',
        'str',
    ]),
    getName: inworld.func('inworld_CompiledIntent_name_get', 'str', ['void *']),
    setNormalizedPhrases: inworld.func('inworld_CompiledIntent_normalized_phrases_set', 'void', ['void *', 'void *']),
    getNormalizedPhrases: inworld.func('inworld_CompiledIntent_normalized_phrases_get', 'void *', ['void *']),
    setPhraseEmbeddings: inworld.func('inworld_CompiledIntent_phrase_embeddings_set', 'void', ['void *', 'void *']),
    getPhraseEmbeddings: inworld.func('inworld_CompiledIntent_phrase_embeddings_get', 'void *', ['void *']),
};
// IntentMatcher Config related functions
exports.IntentMatcherConfigFunctions = {
    new: inworld.func('inworld_IntentMatcherConfig_new', 'void *', []),
    delete: inworld.func('inworld_IntentMatcherConfig_delete', 'void', [
        'void *',
    ]),
    setEmbedding: inworld.func('inworld_IntentMatcherConfig_embedding_set', 'void', ['void *', 'void *']),
    getEmbedding: inworld.func('inworld_IntentMatcherConfig_embedding_get', 'void *', ['void *']),
    setLlm: inworld.func('inworld_IntentMatcherConfig_llm_set', 'void', [
        'void *',
        'void *',
    ]),
    getLlm: inworld.func('inworld_IntentMatcherConfig_llm_get', 'void *', [
        'void *',
    ]),
    setTopNIntents: inworld.func('inworld_IntentMatcherConfig_top_n_intents_set', 'void', ['void *', 'int']),
    getTopNIntents: inworld.func('inworld_IntentMatcherConfig_top_n_intents_get', 'int', ['void *']),
};
// IntentMatcher Creation Config related functions
exports.IntentMatcherCreationConfigFunctions = {
    new: inworld.func('inworld_IntentMatcherCreationConfig_new', 'void *', []),
    delete: inworld.func('inworld_IntentMatcherCreationConfig_delete', 'void', [
        'void *',
    ]),
    setMatcherConfig: inworld.func('inworld_IntentMatcherCreationConfig_matcher_config_set', 'void', ['void *', 'void *']),
    getMatcherConfig: inworld.func('inworld_IntentMatcherCreationConfig_matcher_config_get', 'void *', ['void *']),
    setCompiledIntents: inworld.func('inworld_IntentMatcherCreationConfig_compiled_intents_set', 'void', ['void *', 'void *']),
    getCompiledIntents: inworld.func('inworld_IntentMatcherCreationConfig_compiled_intents_get', 'void *', ['void *']),
};
// IntentMatcher Interface related functions
exports.IntentMatcherInterfaceFunctions = {
    delete: inworld.func('inworld_IntentMatcherInterface_delete', 'void', [
        'void *',
    ]),
    matchIntents: util.promisify(inworld.func('inworld_IntentMatcherInterface_MatchIntents', 'void *', [
        'void *',
        'str',
    ]).async),
};
// IntentMatcher Factory related functions
exports.IntentMatcherFactoryFunctions = {
    new: inworld.func('inworld_IntentMatcherFactory_new', 'void *', []),
    delete: inworld.func('inworld_IntentMatcherFactory_delete', 'void', [
        'void *',
    ]),
    createWithTextEmbedderAndLLM: util.promisify(inworld.func('inworld_IntentMatcherFactory_CreateIntentMatcher_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__std_shared_ptr_Sl_inworld_LLMInterface_SS_const_Sg__rcinworld_IntentMatcherCreationConfig', 'void *', ['void *', 'void *', 'void *', 'void *']).async),
    createWithTextEmbedder: util.promisify(inworld.func('inworld_IntentMatcherFactory_CreateIntentMatcher_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__rcinworld_IntentMatcherCreationConfig', 'void *', ['void *', 'void *', 'void *']).async),
    createWithLLM: util.promisify(inworld.func('inworld_IntentMatcherFactory_CreateIntentMatcher_std_shared_ptr_Sl_inworld_LLMInterface_SS_const_Sg__rcinworld_IntentMatcherCreationConfig', 'void *', ['void *', 'void *', 'void *']).async),
};
// StatusOr IntentMatcher Interface related functions
exports.StatusOrIntentMatcherInterfaceFunctions = {
    new: inworld.func('inworld_StatusOr_IntentMatcherInterface_new', 'void *', []),
    delete: inworld.func('inworld_StatusOr_IntentMatcherInterface_delete', 'void', ['void *']),
    isOK: inworld.func('inworld_StatusOr_IntentMatcherInterface_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_IntentMatcherInterface_status', 'void *', ['void *']),
    getValue: inworld.func('inworld_StatusOr_IntentMatcherInterface_value', 'void *', ['void *']),
};
// StatusOr Vector IntentMatch related functions
exports.StatusOrVectorIntentMatchFunctions = {
    new: inworld.func('inworld_StatusOr_vector_IntentMatch_new', 'void *', []),
    delete: inworld.func('inworld_StatusOr_vector_IntentMatch_delete', 'void', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_vector_IntentMatch_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_vector_IntentMatch_status', 'void *', ['void *']),
    getValue: inworld.func('inworld_StatusOr_vector_IntentMatch_value', 'void *', ['void *']),
};
// Vector IntentMatch related functions
exports.VectorIntentMatchFunctions = {
    new: inworld.func('inworld_vector_IntentMatch_new', 'void *', []),
    delete: inworld.func('inworld_vector_IntentMatch_delete', 'void', ['void *']),
    size: inworld.func('inworld_vector_IntentMatch_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_vector_IntentMatch_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_IntentMatch_get', 'void *', [
        'void *',
        'int',
    ]),
};
// IntentMatch related functions
exports.IntentMatchFunctions = {
    new: inworld.func('inworld_IntentMatch_new', 'void *', []),
    delete: inworld.func('inworld_IntentMatch_delete', 'void', ['void *']),
    setIntentName: inworld.func('inworld_IntentMatch_intent_name_set', 'void', [
        'void *',
        'str',
    ]),
    getIntentName: inworld.func('inworld_IntentMatch_intent_name_get', 'str', [
        'void *',
    ]),
    setScore: inworld.func('inworld_IntentMatch_score_set', 'void', [
        'void *',
        'float',
    ]),
    getScore: inworld.func('inworld_IntentMatch_score_get', 'float', ['void *']),
};
// Optional EmbeddingMatcherConfig related functions
exports.OptionalEmbeddingMatcherConfigFunctions = {
    newWithValue: inworld.func('inworld_optional_EmbeddingMatcherConfig_new_rcinworld_EmbeddingMatcherConfig', 'void *', ['void *']),
    delete: inworld.func('inworld_optional_EmbeddingMatcherConfig_delete', 'void', ['void *']),
    hasValue: inworld.func('inworld_optional_EmbeddingMatcherConfig_has_value', 'bool', ['void *']),
    valueConst: inworld.func('inworld_optional_EmbeddingMatcherConfig_valueConst', 'void *', ['void *']),
};
// EmbeddingMatcherConfig related functions
exports.EmbeddingMatcherConfigFunctions = {
    new: inworld.func('inworld_EmbeddingMatcherConfig_new', 'void *', []),
    delete: inworld.func('inworld_EmbeddingMatcherConfig_delete', 'void', [
        'void *',
    ]),
    setSimilarityThreshold: inworld.func('inworld_EmbeddingMatcherConfig_similarity_threshold_set', 'void', ['void *', 'float']),
    getSimilarityThreshold: inworld.func('inworld_EmbeddingMatcherConfig_similarity_threshold_get', 'float', ['void *']),
};
// Optional LlmMatcherConfig related functions
exports.OptionalLlmMatcherConfigFunctions = {
    newWithValue: inworld.func('inworld_optional_LlmMatcherConfig_new_rcinworld_LlmMatcherConfig', 'void *', ['void *']),
    delete: inworld.func('inworld_optional_LlmMatcherConfig_delete', 'void', [
        'void *',
    ]),
    valueConst: inworld.func('inworld_optional_LlmMatcherConfig_valueConst', 'void *', ['void *']),
};
// LlmMatcherConfig related functions
exports.LlmMatcherConfigFunctions = {
    new: inworld.func('inworld_LlmMatcherConfig_new', 'void *', []),
    delete: inworld.func('inworld_LlmMatcherConfig_delete', 'void', ['void *']),
    setGenerationConfig: inworld.func('inworld_LlmMatcherConfig_generation_config_set', 'void', ['void *', 'void *']),
    getGenerationConfig: inworld.func('inworld_LlmMatcherConfig_generation_config_get', 'void *', ['void *']),
    setPromptTemplate: inworld.func('inworld_LlmMatcherConfig_prompt_template_set', 'void', ['void *', 'str']),
    getPromptTemplate: inworld.func('inworld_LlmMatcherConfig_prompt_template_get', 'str', ['void *']),
    setEmbeddingSimilarityThreshold: inworld.func('inworld_LlmMatcherConfig_embedding_similarity_threshold_set', 'void', ['void *', 'void *']),
    getEmbeddingSimilarityThreshold: inworld.func('inworld_LlmMatcherConfig_embedding_similarity_threshold_get', 'void *', ['void *']),
    setMaxEmbeddingMatchesForLlm: inworld.func('inworld_LlmMatcherConfig_max_embedding_matches_for_llm_set', 'void', ['void *', 'void *']),
    getMaxEmbeddingMatchesForLlm: inworld.func('inworld_LlmMatcherConfig_max_embedding_matches_for_llm_get', 'void *', ['void *']),
};
// Optional Float related functions
exports.OptionalFloatFunctions = {
    newWithValue: inworld.func('inworld_optional_float_new_rcf', 'void *', [
        'float',
    ]),
    delete: inworld.func('inworld_optional_float_delete', 'void', ['void *']),
    hasValue: inworld.func('inworld_optional_float_has_value', 'bool', [
        'void *',
    ]),
    valueConst: inworld.func('inworld_optional_float_valueConst', 'float', [
        'void *',
    ]),
};
// StatusOr int related functions
exports.StatusOrIntFunctions = {
    new: inworld.func('inworld_StatusOr_int_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_int_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_int_value', 'int', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_int_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_int_delete', 'void', ['void *']),
};
// Graph related functions
exports.GraphFunctions = {
    new: inworld.func('inworld_Graph_new', 'void *', ['str']),
    delete: inworld.func('inworld_Graph_delete', 'void', ['void *']),
    addNode: inworld.func('inworld_Graph_AddNode', 'void', ['void *', 'void *']),
    createEdge: inworld.func('inworld_Graph_CreateEdge', 'void *', [
        'void *',
        'void *',
        'void *',
    ]),
    setAsStart: inworld.func('inworld_Graph_SetAsStart', 'void', [
        'void *',
        'void *',
    ]),
    setAsEnd: inworld.func('inworld_Graph_SetAsEnd', 'void', [
        'void *',
        'void *',
    ]),
    compileAndReturnRaw: inworld.func('inworld_Graph_CompileAndReturnRaw', 'void *', ['void *']),
    visualize: util.promisify(inworld.func('inworld_CompiledGraphInterface_Visualize', 'void*', [
        'void *',
        'str',
    ]).async),
};
// EdgeWrapper related functions
exports.EdgeWrapperFunctions = {
    setCondition: inworld.func('inworld_EdgeWrapper_SetCondition_rcinworld_graphs_swig_helpers_EdgeConditionThreadedExecutor', 'void', ['void *', 'void *']),
    setToOptional: inworld.func('inworld_EdgeWrapper_SetToOptional', 'void', [
        'void *',
    ]),
    build: inworld.func('inworld_EdgeWrapper_Build', 'void', ['void *']),
    delete: inworld.func('inworld_EdgeWrapper_delete', 'void', ['void *']),
};
// EdgeConditionExecutor related functions
exports.EdgeConditionExecutorFunctions = {
    new: inworld.func('inworld_EdgeConditionThreadedExecutor_new_pv', 'void *', [
        'void *',
    ]),
    getInput: inworld.func('inworld_EdgeConditionThreadedExecutor_GetInput', 'void *', ['int']),
    setOutput: inworld.func('inworld_EdgeConditionThreadedExecutor_SetOutput', 'void', ['int', 'bool']),
    delete: inworld.func('inworld_EdgeConditionThreadedExecutor_delete', 'void', [
        'void *',
    ]),
};
// VectorNode-related functions
exports.VectorNodeFunctions = {
    new: inworld.func('inworld_vector_Node_new', 'void *', []),
    delete: inworld.func('inworld_vector_Node_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_Node_push_back', 'void', [
        'void *',
        'void *',
    ]),
    size: inworld.func('inworld_vector_Node_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_Node_get', 'void *', ['void *', 'int']),
};
// Executor-related functions
exports.GraphExecutorFunctions = {
    factoryHelperCreate: inworld.func('inworld_GraphExecutorFactoryHelper_Create_pinworld_graphs_CompiledGraphInterface', 'void *', ['void *']),
    factoryHelperDestroy: inworld.func('inworld_GraphExecutorFactoryHelper_Destroy', 'void', ['void *']),
    start: inworld.func('inworld_ExecutorInterface_Start', 'void', ['void *']),
    stop: inworld.func('inworld_ExecutorInterface_Stop', 'void', ['void *']),
    execute: util.promisify(inworld.func('inworld_ExecutorInterface_ExecuteSimplified', 'int', [
        'void *',
        'void *',
        'str',
    ]).async),
    hasMoreResults: util.promisify(inworld.func('inworld_ExecutorInterface_HasMoreResults', 'bool', [
        'void *',
        'int',
    ]).async),
    next: util.promisify(inworld.func('inworld_ExecutorInterface_GetNextResult', 'void *', [
        'void *',
        'int',
    ]).async),
    closeExecution: inworld.func('inworld_ExecutorInterface_CloseExecution', 'void', ['void *', 'int']),
    cleanupAllExecutions: inworld.func('inworld_ExecutorInterface_CleanupAllExecutions', 'void', ['void *']),
};
// TextData-related functions
exports.TextDataFunctions = {
    new: inworld.func('inworld_Text_new_std_string', 'void *', ['str']),
    toString: inworld.func('inworld_Text_ToString', 'str', ['void *']),
    delete: inworld.func('inworld_Text_delete', 'void', ['void *']),
};
exports.AudioDataFunctions = {
    new: inworld.func('inworld_Audio_new', 'void *', ['void *', 'int']),
    waveForm: inworld.func('inworld_Audio_waveform', 'void *', ['void *']),
    sampleRate: inworld.func('inworld_Audio_sample_rate', 'int', ['void *']),
};
exports.ChatMessagesFunctions = {
    new: inworld.func('inworld_ChatMessages_new', 'void *', ['void *']),
    getMessages: inworld.func('inworld_ChatMessages_messages', 'void *', [
        'void *',
    ]),
    toString: inworld.func('inworld_ChatMessages_ToString', 'str', ['void *']),
    delete: inworld.func('inworld_ChatMessages_delete', 'void', ['void *']),
};
// BaseData-related functions
exports.BaseDataFunctions = {
    delete: inworld.func('inworld_BaseData_delete', 'void', ['void *']),
    toString: inworld.func('inworld_BaseData_ToString', 'str', ['void *']),
    errorToString: inworld.func('inworld_Error_ToString', 'str', ['void *']),
    asText: inworld.func('inworld_BaseDataAs_Text', 'void *', ['void *']),
};
// VectorBaseData-related functions
exports.VectorBaseDataFunctions = {
    new: inworld.func('inworld_vector_SharedPtr_BaseData_new', 'void *', []),
    delete: inworld.func('inworld_vector_SharedPtr_BaseData_delete', 'void', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_SharedPtr_BaseData_push_back', 'void', ['void *', 'void *']),
    size: inworld.func('inworld_vector_SharedPtr_BaseData_size', 'size_t', [
        'void *',
    ]),
    get: inworld.func('inworld_vector_SharedPtr_BaseData_safe_get', 'void *', [
        'void *',
        'int',
    ]),
};
// StatusOrBaseData-related functions
exports.StatusOrBaseDataFunctions = {
    newFromStatus: inworld.func('inworld_StatusOr_SharedPtr_BaseData_new_rcabsl_Status', 'void *', ['void *']),
    newFromBaseData: inworld.func('inworld_StatusOr_SharedPtr_BaseData_new_rcstd_shared_ptr_Sl_inworld_graphs_BaseData_Sg_', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_BaseData_delete', 'void', [
        'void *',
    ]),
};
// TTSOutput-related functions
exports.TTSOutputFunctions = {
    toStream: inworld.func('inworld_BaseDataAs_DataStream_TTSOutput', 'void *', [
        'void *',
    ]),
    getStream: inworld.func('inworld_DataStream_TTSOutput_stream', 'void *', [
        'void *',
    ]),
    streamHasNext: inworld.func('inworld_InputStream_TTSOutput_HasNext', 'bool', [
        'void *',
    ]),
    streamRead: inworld.func('inworld_InputStream_TTSOutput_Read', 'void *', [
        'void *',
    ]),
    streamDelete: inworld.func('inworld_InputStream_TTSOutput_delete', 'void', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_TTSOutput_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_TTSOutput_status', 'void *', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_TTSOutput_ok', 'bool', ['void *']),
    getText: inworld.func('inworld_TTSOutput_text_get', 'str', ['void *']),
    getAudio: inworld.func('inworld_TTSOutput_audio', 'void *', ['void *']),
    audioDelete: inworld.func('inworld_Audio_delete', 'void', ['void *']),
};
// NodeHelper-related functions
exports.NodeHelperFunctions = {
    createLLMNode: inworld.func('inworld_LLMChatNodeHelper_CreateLLMChatNode_rcstd_string_std_shared_ptr_Sl_inworld_LLMInterface_SS_const_Sg__rcinworld_graphs_LLMChatNodeExecutionConfig_b', 'void *', ['str', 'void *', 'void *', 'bool']),
    deleteLLMNode: inworld.func('inworld_LLMChatNodeHelper_delete', 'void', [
        'void *',
    ]),
    createSTTNode: inworld.func('inworld_STTNodeHelper_CreateSTTNode_rcstd_string_std_shared_ptr_Sl_inworld_STTInterface_SS_const_Sg__rcinworld_graphs_STTNodeExecutionConfig', 'void *', ['str', 'void *', 'void *']),
    deleteSTTNode: inworld.func('inworld_STTNode_delete', 'void', ['void *']),
    createTTSNode: inworld.func('inworld_TTSNodeHelper_CreateTTSNode_rcstd_string_std_shared_ptr_Sl_inworld_TTSInterface_SS_const_Sg__rcinworld_graphs_TTSNodeExecutionConfig', 'void *', ['str', 'void *', 'void *']),
    deleteTTSNode: inworld.func('inworld_TTSNode_delete', 'void', ['void *']),
    createTextChunkingNode: inworld.func('inworld_TextChunkingNodeHelper_CreateTextChunkingNode', 'void *', ['str']),
    deleteTextChunkingNode: inworld.func('inworld_TextChunkingNode_delete', 'void', ['void *']),
    createIntentNode: inworld.func('inworld_IntentNodeHelper_CreateIntentNode', 'void *', ['str', 'void *', 'void *']),
    deleteIntentNode: inworld.func('inworld_IntentNode_delete', 'void', [
        'void *',
    ]),
    createTextAggregatorNode: inworld.func('inworld_TextAggregatorNodeHelper_CreateTextAggregatorNode', 'void *', ['str']),
    deleteTextAggregatorNode: inworld.func('inworld_TextAggregatorNode_delete', 'void', ['void *']),
    createKnowledgeNode: inworld.func('inworld_KnowledgeNodeHelper_CreateKnowledgeNode', 'void *', ['void *', 'void *', 'void *']),
    deleteKnowledgeNode: inworld.func('inworld_KnowledgeNodeHelper_delete', 'void', ['void *']),
};
// Safety Checker Factory related functions
exports.SafetyCheckerFactoryFunctions = {
    new: inworld.func('inworld_SafetyCheckerFactory_new', 'void *', []),
    delete: inworld.func('inworld_SafetyCheckerFactory_delete', 'void', [
        'void *',
    ]),
    createSafetyChecker: util.promisify(inworld.func('inworld_SafetyCheckerFactory_CreateSafetyChecker', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
};
// Safety Checker Creation Config related functions
exports.SafetyCheckerCreationConfigFunctions = {
    new: inworld.func('inworld_SafetyCheckerCreationConfig_new', 'void *', []),
    delete: inworld.func('inworld_SafetyCheckerCreationConfig_delete', 'void', [
        'void *',
    ]),
    setModelWeightsPath: inworld.func('inworld_SafetyCheckerCreationConfig_model_weights_path_set', 'void', ['void *', 'str']),
};
// Topic Threshold related functions
exports.TopicThresholdFunctions = {
    new: inworld.func('inworld_TopicThreshold_new', 'void *', []),
    delete: inworld.func('inworld_TopicThreshold_delete', 'void', ['void *']),
    setTopicName: inworld.func('inworld_TopicThreshold_topic_name_set', 'void', [
        'void *',
        'int',
    ]),
    setConfidence: inworld.func('inworld_TopicThreshold_threshold_set', 'void', [
        'void *',
        'float',
    ]),
};
// Detected Topic related functions
exports.DetectedTopicFunctions = {
    new: inworld.func('inworld_DetectedTopic_new', 'void *', []),
    delete: inworld.func('inworld_DetectedTopic_delete', 'void', ['void *']),
    getTopicName: inworld.func('inworld_DetectedTopic_topic_name_get', 'int', [
        'void *',
    ]),
    getConfidence: inworld.func('inworld_DetectedTopic_confidence_get', 'float', [
        'void *',
    ]),
};
// Vector DetectedTopic functions
exports.VectorDetectedTopicFunctions = {
    new: inworld.func('inworld_vector_DetectedTopic_new', 'void *', []),
    delete: inworld.func('inworld_vector_DetectedTopic_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_DetectedTopic_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_DetectedTopic_get', 'void *', [
        'void *',
        'int',
    ]),
    pushBack: inworld.func('inworld_vector_DetectedTopic_push_back', 'void', [
        'void *',
        'void *',
    ]),
};
exports.CheckSafetyResponseFunctions = {
    new: inworld.func('inworld_CheckSafetyResponse_new', 'void *', []),
    delete: inworld.func('inworld_CheckSafetyResponse_delete', 'void', [
        'void *',
    ]),
    setIsSafe: inworld.func('inworld_CheckSafetyResponse_is_safe_set', 'void', [
        'void *',
        'bool',
    ]),
    getIsSafe: inworld.func('inworld_CheckSafetyResponse_is_safe_get', 'bool', [
        'void *',
    ]),
    setDetectedTopics: inworld.func('inworld_CheckSafetyResponse_detected_topics_set', 'void', ['void *', 'void *']),
    getDetectedTopics: inworld.func('inworld_CheckSafetyResponse_detected_topics_get', 'void *', ['void *']),
};
exports.StatusOrCheckSafetyResponseFunctions = {
    isOK: inworld.func('inworld_StatusOr_CheckSafetyResponse_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_CheckSafetyResponse_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_CheckSafetyResponse_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_CheckSafetyResponse_delete', 'void', [
        'void *',
    ]),
};
exports.StatusOrSafetyCheckerInterfaceFunctions = {
    isOK: inworld.func('inworld_StatusOr_SafetyCheckerInterface_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SafetyCheckerInterface_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SafetyCheckerInterface_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SafetyCheckerInterface_delete', 'void', ['void *']),
};
exports.SafetyCheckerInterfaceFunctions = {
    delete: inworld.func('inworld_SafetyCheckerInterface_delete', 'void', [
        'void *',
    ]),
    checkSafety: util.promisify(inworld.func('inworld_SafetyCheckerInterface_CheckSafety_rcstd_string', 'void *', ['void *', 'str']).async),
    checkSafetyWithConfig: util.promisify(inworld.func('inworld_SafetyCheckerInterface_CheckSafety_rcstd_string_rcinworld_SafetyConfig', 'void *', ['void *', 'str', 'void *']).async),
};
exports.TelemetryFunctions = {
    init: inworld.func('inworld_ConfigureTelemetry_rcinworld_TelemetryConfig', 'void', ['void *']),
    shutdown: inworld.func('inworld_ShutdownTelemetry', 'void', []),
    // TelemetryConfig related functions
    configNew: inworld.func('inworld_TelemetryConfig_new', 'void *', []),
    configDelete: inworld.func('inworld_TelemetryConfig_delete', 'void', [
        'void *',
    ]),
    configSetEndpoint: inworld.func('inworld_TelemetryConfig_endpoint_set', 'void', ['void *', 'str']),
    configSetApiKey: inworld.func('inworld_TelemetryConfig_api_key_set', 'void', [
        'void *',
        'str',
    ]),
    configSetServiceName: inworld.func('inworld_TelemetryConfig_service_name_set', 'void', ['void *', 'str']),
    configSetAppVersion: inworld.func('inworld_TelemetryConfig_service_version_set', 'void', ['void *', 'str']),
    configSetLogger: inworld.func('inworld_TelemetryConfig_logger_set', 'void', [
        'void *',
        'void *',
    ]),
    configSetTracer: inworld.func('inworld_TelemetryConfig_tracer_set', 'void', [
        'void *',
        'void *',
    ]),
    configSetExporterType: inworld.func('inworld_TelemetryConfig_exporter_type_set', 'void', ['void *', 'int']),
    // LoggerConfig related functions
    configLoggerNew: inworld.func('inworld_LoggerConfig_new', 'void *', []),
    configLoggerDelete: inworld.func('inworld_LoggerConfig_delete', 'void', [
        'void *',
    ]),
    configLoggerSetLevel: inworld.func('inworld_LoggerConfig_log_level_set', 'void', ['void *', 'int']),
    configLoggerSetSinkAbslLogs: inworld.func('inworld_LoggerConfig_sink_absl_logs_set', 'void', ['void *', 'bool']),
    // TracerConfig related functions
    configTracerNew: inworld.func('inworld_TracerConfig_new', 'void *', []),
    configTracerDelete: inworld.func('inworld_TracerConfig_delete', 'void', [
        'void *',
    ]),
    configTracerSetSamplingRate: inworld.func('inworld_TracerConfig_sampling_rate_set', 'void', ['void *', 'float']),
};
// NER Interface related functions
exports.NERInterfaceFunctions = {
    delete: inworld.func('inworld_NERInterface_delete', 'void', ['void *']),
    extractEntities: util.promisify(inworld.func('inworld_NERInterface_ExtractEntities', 'void *', [
        'void *',
        'str',
    ]).async),
};
// NER Creation Config related functions
exports.NERCreationConfigFunctions = {
    new: inworld.func('inworld_NERCreationConfig_new', 'void *', []),
    delete: inworld.func('inworld_NERCreationConfig_delete', 'void', ['void *']),
    setEntities: inworld.func('inworld_NERCreationConfig_entities_set', 'void', [
        'void *',
        'void *',
    ]),
    getEntities: inworld.func('inworld_NERCreationConfig_entities_get', 'void *', ['void *']),
};
// NER Factory related functions
exports.NERFactoryFunctions = {
    delete: inworld.func('inworld_NERFactory_delete', 'void', ['void *']),
    createNER: util.promisify(inworld.func('inworld_NERFactory_CreateNER', 'void *', ['void *']).async),
};
// StatusOr NER Interface related functions
exports.StatusOrNERInterfaceFunctions = {
    new: inworld.func('inworld_StatusOr_NERInterface_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_NERInterface_ok', 'bool', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_NERInterface_status', 'void *', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_NERInterface_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_NERInterface_delete', 'void', [
        'void *',
    ]),
};
// EntityMatch related functions
exports.EntityMatchFunctions = {
    new: inworld.func('inworld_EntityMatch_new', 'void *', []),
    delete: inworld.func('inworld_EntityMatch_delete', 'void', ['void *']),
    setEntityName: inworld.func('inworld_EntityMatch_entity_name_set', 'void', [
        'void *',
        'str',
    ]),
    getEntityName: inworld.func('inworld_EntityMatch_entity_name_get', 'str', [
        'void *',
    ]),
    setRuleName: inworld.func('inworld_EntityMatch_rule_name_set', 'void', [
        'void *',
        'str',
    ]),
    getRuleName: inworld.func('inworld_EntityMatch_rule_name_get', 'str', [
        'void *',
    ]),
    setText: inworld.func('inworld_EntityMatch_text_set', 'void', [
        'void *',
        'str',
    ]),
    getText: inworld.func('inworld_EntityMatch_text_get', 'str', ['void *']),
};
// Vector EntityMatch related functions
exports.VectorEntityMatchFunctions = {
    new: inworld.func('inworld_vector_EntityMatch_new', 'void *', []),
    size: inworld.func('inworld_vector_EntityMatch_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_vector_EntityMatch_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_EntityMatch_get', 'void *', [
        'void *',
        'int',
    ]),
    delete: inworld.func('inworld_vector_EntityMatch_delete', 'void', ['void *']),
};
// StatusOr Vector EntityMatch related functions
exports.StatusOrVectorEntityMatchFunctions = {
    new: inworld.func('inworld_StatusOr_vector_EntityMatch_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_vector_EntityMatch_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_vector_EntityMatch_status', 'void *', ['void *']),
    getValue: inworld.func('inworld_StatusOr_vector_EntityMatch_value', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_vector_EntityMatch_delete', 'void', [
        'void *',
    ]),
};
// Entity related functions
exports.EntityFunctions = {
    new: inworld.func('inworld_Entity_new', 'void *', []),
    delete: inworld.func('inworld_Entity_delete', 'void', ['void *']),
    setName: inworld.func('inworld_Entity_name_set', 'void', ['void *', 'str']),
    getName: inworld.func('inworld_Entity_name_get', 'str', ['void *']),
    setRules: inworld.func('inworld_Entity_rules_set', 'void', [
        'void *',
        'void *',
    ]),
    getRules: inworld.func('inworld_Entity_rules_get', 'void *', ['void *']),
};
// Vector Entity related functions
exports.VectorEntityFunctions = {
    new: inworld.func('inworld_vector_Entity_new', 'void *', []),
    size: inworld.func('inworld_vector_Entity_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_vector_Entity_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_Entity_get', 'void *', ['void *', 'int']),
    delete: inworld.func('inworld_vector_Entity_delete', 'void', ['void *']),
};
// DictionaryRule related functions
exports.DictionaryRuleFunctions = {
    new: inworld.func('inworld_DictionaryRule_new', 'void *', []),
    delete: inworld.func('inworld_DictionaryRule_delete', 'void', ['void *']),
    setName: inworld.func('inworld_DictionaryRule_name_set', 'void', [
        'void *',
        'str',
    ]),
    getName: inworld.func('inworld_DictionaryRule_name_get', 'str', ['void *']),
    setDisplayName: inworld.func('inworld_DictionaryRule_display_name_set', 'void', ['void *', 'str']),
    getDisplayName: inworld.func('inworld_DictionaryRule_display_name_get', 'str', ['void *']),
    setSynonyms: inworld.func('inworld_DictionaryRule_synonyms_set', 'void', [
        'void *',
        'void *',
    ]),
    getSynonyms: inworld.func('inworld_DictionaryRule_synonyms_get', 'void *', [
        'void *',
    ]),
};
// Vector DictionaryRule related functions
exports.VectorDictionaryRuleFunctions = {
    new: inworld.func('inworld_vector_DictionaryRule_new', 'void *', []),
    size: inworld.func('inworld_vector_DictionaryRule_size', 'size_t', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_DictionaryRule_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_DictionaryRule_get', 'void *', [
        'void *',
        'int',
    ]),
    delete: inworld.func('inworld_vector_DictionaryRule_delete', 'void', [
        'void *',
    ]),
};
// DataStream related functions
exports.StreamStringFunctions = {
    toStream: inworld.func('inworld_BaseDataAs_DataStream_string', 'void *', [
        'void *',
    ]),
    getStream: inworld.func('inworld_DataStream_string_stream', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_DataStream_string_delete', 'void', ['void *']),
    deleteStream: inworld.func('inworld_InputStream_string_delete', 'void', [
        'void *',
    ]),
};
// CustomNodeWrapper-related functions
exports.CustomNodeWrapperFunctions = {
    new: inworld.func('inworld_CustomNodeWrapper_new_rcstd_string_rcinworld_graphs_swig_helpers_CustomNodeThreadedProcessExecutor', 'void *', ['str', 'void *']),
    delete: inworld.func('inworld_CustomNodeWrapper_delete', 'void', ['void *']),
};
exports.CustomNodeThreadedProcessExecutorFunctions = {
    new: inworld.func('inworld_CustomNodeThreadedProcessExecutor_new', 'void *', [
        'void *',
        'void *',
    ]),
    delete: inworld.func('inworld_CustomNodeThreadedProcessExecutor_delete', 'void', ['void *']),
    setOutput: inworld.func('inworld_CustomNodeThreadedProcessExecutor_SetOutput', 'void', ['int', 'void *']),
    getInputs: inworld.func('inworld_CustomNodeThreadedProcessExecutor_GetInputs', 'void *', ['int']),
};
// Knowledge Factory related functions
exports.KnowledgeFactoryFunctions = {
    new: inworld.func('inworld_KnowledgeFactory_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeFactory_delete', 'void', ['void *']),
    createKnowledgeWithLocalConfig: util.promisify(inworld.func('inworld_KnowledgeFactory_CreateKnowledge_std_optional_Sl_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__Sg__rcinworld_LocalKnowledgeConfig', 'void*', ['void *', 'void *', 'void *']).async),
    createKnowledgeWithRemoteConfig: util.promisify(inworld.func('inworld_KnowledgeFactory_CreateKnowledge_std_optional_Sl_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__Sg__rcinworld_RemoteKnowledgeConfig', 'void*', ['void *', 'void *', 'void *']).async),
};
// LocalKnowledgeConfig related functions
exports.LocalKnowledgeConfigFunctions = {
    new: inworld.func('inworld_LocalKnowledgeConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalKnowledgeConfig_delete', 'void', [
        'void *',
    ]),
    setKnowledgeGetConfig: inworld.func('inworld_LocalKnowledgeConfig_knowledge_get_config_set', 'void', ['void *', 'void *']),
    setKnowledgeCompileConfig: inworld.func('inworld_LocalKnowledgeConfig_knowledge_compile_config_set', 'void', ['void *', 'void *']),
};
// RemoteKnowledgeConfig related functions
exports.RemoteKnowledgeConfigFunctions = {
    new: inworld.func('inworld_RemoteKnowledgeConfig_new', 'void *', []),
    delete: inworld.func('inworld_RemoteKnowledgeConfig_delete', 'void', [
        'void *',
    ]),
    setKnowledgeCompileConfig: inworld.func('inworld_RemoteKnowledgeConfig_knowledge_compile_config_set', 'void', ['void *', 'void *']),
    setApiKey: inworld.func('inworld_RemoteKnowledgeConfig_api_key_set', 'void', [
        'void *',
        'str',
    ]),
};
// KnowledgeGetConfig related functions
exports.KnowledgeGetConfigFunctions = {
    new: inworld.func('inworld_KnowledgeGetConfig_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeGetConfig_delete', 'void', ['void *']),
    setRetrievalConfig: inworld.func('inworld_KnowledgeGetConfig_retrieval_config_set', 'void', ['void *', 'void *']),
};
// ParsingConfig related functions
exports.ParsingConfigFunctions = {
    new: inworld.func('inworld_ParsingConfig_new', 'void *', []),
    delete: inworld.func('inworld_ParsingConfig_delete', 'void', ['void *']),
    setMaxCharsPerChunk: inworld.func('inworld_ParsingConfig_max_chars_per_chunk_set', 'void', ['void *', 'int']),
    setMaxChunksPerDocument: inworld.func('inworld_ParsingConfig_max_chunks_per_document_set', 'void', ['void *', 'int']),
};
// KnowledgeCompileConfig related functions
exports.KnowledgeCompileConfigFunctions = {
    new: inworld.func('inworld_KnowledgeCompileConfig_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeCompileConfig_delete', 'void', [
        'void *',
    ]),
    setParsingConfig: inworld.func('inworld_KnowledgeCompileConfig_parsing_config_set', 'void', ['void *', 'void *']),
};
// Knowledge Interface related functions
exports.KnowledgeInterfaceFunctions = {
    delete: inworld.func('inworld_KnowledgeInterface_delete', 'void', ['void *']),
    getKnowledge: util.promisify(inworld.func('inworld_KnowledgeInterface_GetKnowledge', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
    compileKnowledgeFromRecords: util.promisify(inworld.func('inworld_KnowledgeInterface_CompileKnowledge_rcstd_string_rcstd_vector_Sl_std_string_Sg_', 'void *', ['void *', 'str', 'void *']).async),
    compileKnowledgeFromFile: util.promisify(inworld.func('inworld_KnowledgeInterface_CompileKnowledge_rcstd_string_cstd_vector_Sl_char_Sg__ceType', 'void *', ['void *', 'str', 'void *', 'int']).async),
    removeKnowledge: util.promisify(inworld.func('inworld_KnowledgeInterface_RemoveKnowledge', 'void *', [
        'void *',
        'str',
    ]).async),
};
// File related functions
exports.FileFunctions = {
    new: inworld.func('inworld_File_new', 'void *', []),
    delete: inworld.func('inworld_File_delete', 'void', ['void *']),
    setContent: inworld.func('inworld_File_content_set', 'void', [
        'void *',
        'void *',
    ]),
    setType: inworld.func('inworld_File_type_set', 'void', ['void *', 'int']),
};
// File Content related functions
exports.FileContentFunctions = {
    new: inworld.func('inworld_Content_new', 'void *', []),
    delete: inworld.func('inworld_Content_delete', 'void', ['void *']),
    setBytes: inworld.func('inworld_Content_bytes_set', 'void', [
        'void *',
        'void *',
    ]),
};
// Knowledge Status functions
exports.KnowledgeStatusFunctions = {
    isOK: inworld.func('inworld_StatusOr_KnowledgeInterface_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_KnowledgeInterface_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_KnowledgeInterface_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_KnowledgeInterface_delete', 'void', [
        'void *',
    ]),
};
// Knowledge String Vector Status functions
exports.KnowledgeVectorStatusFunctions = {
    isOK: inworld.func('inworld_StatusOr_vector_string_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_vector_string_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_vector_string_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_vector_string_delete', 'void', [
        'void *',
    ]),
};
// Vector Char related functions
exports.VectorCharFunctions = {
    new: inworld.func('inworld_vector_char_new', 'void *', []),
    delete: inworld.func('inworld_vector_char_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_char_push_back', 'void', [
        'void *',
        'char',
    ]),
    size: inworld.func('inworld_vector_char_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_char_get', 'char', ['void *', 'int']),
    memcpyTo: inworld.func('inworld_memcpy_to_vector_char', 'void *', [
        'char *',
        'size_t',
    ]),
};
exports.ExecutionConfigFunctions = {
    newIntentNodeExecutionConfig: inworld.func('inworld_IntentNodeExecutionConfig_new', 'void *', []),
    deleteIntentNodeExecutionConfig: inworld.func('inworld_IntentNodeExecutionConfig_delete', 'void', ['void *']),
    setMatcherConfigForIntentNodeExecutionConfig: inworld.func('inworld_IntentNodeExecutionConfig_matcher_config_set', 'void', ['void *', 'void *']),
    setReportToClientForIntentNodeExecutionConfig: inworld.func('inworld_IntentNodeExecutionConfig_report_to_client_set', 'void', ['void *', 'bool']),
    newSTTNodeExecutionConfig: inworld.func('inworld_STTNodeExecutionConfig_new', 'void *', []),
    deleteSTTNodeExecutionConfig: inworld.func('inworld_STTNodeExecutionConfig_delete', 'void', ['void *']),
    setSpeechRecognitionConfigForSTTNodeExecutionConfig: inworld.func('inworld_STTNodeExecutionConfig_speech_recognition_config_set', 'void', ['void *', 'void *']),
    setReportToClientForSTTNodeExecutionConfig: inworld.func('inworld_STTNodeExecutionConfig_report_to_client_set', 'void', ['void *', 'bool']),
    newTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_new', 'void *', []),
    setVoiceForTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_voice_set', 'void', ['void *', 'void *']),
    setSpeechSynthesisConfigForTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_synthesis_config_set', 'void', ['void *', 'void *']),
    setReportToClientForTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_report_to_client_set', 'void', ['void *', 'bool']),
    deleteTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_delete', 'void', ['void *']),
    newLLMNodeExecutionConfig: inworld.func('inworld_LLMChatNodeExecutionConfig_new', 'void *', []),
    setTextGenerationConfigForLLMNodeExecutionConfig: inworld.func('inworld_LLMChatNodeExecutionConfig_text_generation_config_set', 'void', ['void *', 'void *']),
    setReportToClientForLLMNodeExecutionConfig: inworld.func('inworld_LLMChatNodeExecutionConfig_report_to_client_set', 'void', ['void *', 'bool']),
    deleteLLMNodeExecutionConfig: inworld.func('inworld_LLMChatNodeExecutionConfig_delete', 'void', ['void *']),
};
exports.KnowledgeNodeHelperFunctions = {
    toKnowledgeRecords: inworld.func('inworld_BaseDataAs_KnowledgeRecords', 'void *', ['void *']),
    getRecords: inworld.func('inworld_KnowledgeRecords_records', 'void *', [
        'void *',
    ]),
    toString: inworld.func('inworld_KnowledgeRecords_ToString', 'str', [
        'void *',
    ]),
};
