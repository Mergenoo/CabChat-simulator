"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorFloat = void 0;
const expose_binary_1 = require("../../expose_binary");
/**
 * Wrapper class for handling vectors of floating-point numbers.
 * Provides an interface to the native vector implementation.
 * @internal
 */
class VectorFloat {
    /**
     * Creates a new VectorFloat instance.
     *
     * @param items - Optional array of floating-point values to initialize the vector
     */
    constructor(items) {
        this.external = expose_binary_1.VectorFloatFunctions.new();
        items === null || items === void 0 ? void 0 : items.forEach((item) => {
            expose_binary_1.VectorFloatFunctions.pushBack(this.external, item);
        });
    }
    /**
     * Returns the external reference to the native vector implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this vector.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.VectorFloatFunctions.delete(this.external);
            this.external = null;
        }
    }
    /**
     * Converts an external vector reference to a JavaScript array.
     *
     * @param external - External reference to the native vector
     * @returns JavaScript array of numbers
     */
    static toArray(external) {
        const array = [];
        for (let i = 0; i < expose_binary_1.VectorFloatFunctions.size(external); i++) {
            array.push(expose_binary_1.VectorFloatFunctions.get(external, i));
        }
        return array;
    }
}
exports.VectorFloat = VectorFloat;
