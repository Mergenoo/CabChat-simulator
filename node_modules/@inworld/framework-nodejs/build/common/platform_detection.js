"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBinaryPath = exports.isSupportedPlatform = exports.getPlatform = exports.SUPPORTED_PLATFORMS = void 0;
const os = require("os");
const path = require("path");
const error_1 = require("./error");
exports.SUPPORTED_PLATFORMS = {
    linux_x64: path.join('linux_x64', 'libinworld.so'),
    win32_x64: path.join('win32_x64', 'inworld.dll'),
    darwin_arm64: path.join('darwin_arm64', 'libinworld.dylib'),
};
/**
 * Gets the platform and architecture of the current system.
 *
 * @returns Object containing the platform and architecture
 * @internal
 */
const getPlatform = () => {
    return { platform: os.platform(), arch: os.arch() };
};
exports.getPlatform = getPlatform;
/**
 * Checks if the current platform is supported.
 *
 * @returns True if the platform is supported, false otherwise
 * @internal
 */
const isSupportedPlatform = ({ platform, arch, }) => {
    return (exports.SUPPORTED_PLATFORMS[`${platform}_${arch}`] !== undefined);
};
exports.isSupportedPlatform = isSupportedPlatform;
/**
 * Gets the path to the binary for the current platform.
 *
 * @returns The path to the binary
 * @internal
 */
const getBinaryPath = (baseDir) => {
    const { platform, arch } = (0, exports.getPlatform)();
    if (!(0, exports.isSupportedPlatform)({ platform, arch })) {
        throw new error_1.InworldError(`Unsupported platform: ${platform} ${arch}`);
    }
    return path.join(baseDir, exports.SUPPORTED_PLATFORMS[`${platform}_${arch}`]);
};
exports.getBinaryPath = getBinaryPath;
