/**
 * Main entry point for the Inworld Framework Node.js SDK
 *
 * This file exports all the public interfaces, types and utilities of the Inworld
 * Framework SDK, organized into namespaced modules for easier consumption.
 * It serves as the primary interface for developers to interact with the SDK.
 */
import { InworldError } from './common/error';
import { TextStreamIterationResult, TextStreamIterator, TTSOutputStreamIterationResult, TTSOutputStreamIterator } from './common/stream';
import { AudioChunkInterface, CustomInputDataType, CustomOutputDataType, ExternalReference, RetrievalConfigInterface } from './common/types';
import { Device, DeviceRegistry, DeviceType } from './core/device';
import { AgentActionInterface, AgentSpeechInterface, History, HistoryItemInterface } from './core/history';
import { EmojiRemover } from './core/text_processing/emoji_remover';
import { SentenceStream } from './core/text_processing/sentence_stream';
import { SubstringRemover } from './core/text_processing/substring_remover';
import { TextInBracketsRemover } from './core/text_processing/text_in_brackets_remover';
import { CustomNode, CustomNodeWrapper, Graph, GraphOutputStream, IntentNodeFactoryInterface, LLMNodeFactoryInterface, NodeFactory, NodeFactoryInterface, NodeInterface, STTNodeFactoryInterface, TextAggregatorNodeFactoryInterface, TextChunkingNodeFactoryInterface, TTSNodeFactoryInterface } from './graph';
import { AudioResponse, GraphOutputStreamResponse, TextResponse } from './graph/nodes/types';
import { LocalTextEmbedderConfigInterface, RemoteTextEmbedderConfigInterface, TextEmbedder, TextEmbedderConfigInterface, TextEmbedderFactory } from './primitives/embedder';
import { EmbeddingMatcherConfig, LLMMatcherConfig } from './primitives/intent';
import { Intent, IntentCompilerFactory, IntentInterface, IntentMatcherFactory, IntentMatcherFactoryInterface, LLMMatcherConfigInterface } from './primitives/intent';
import { CreateKnowledgeCollectionInterface, FileType, Knowledge, KnowledgeCollectionFactory, KnowledgeCreationConfig, KnowledgeFactory, KnowledgeGetConfig, KnowledgeGetInput, LocalKnowledgeConfigInterface, ParsingConfig, RemoteKnowledgeConfigInterface } from './primitives/knowledge';
import { LLM, LLMConfigInterface, LLMFactory, LLMMessageInterface, LocalLLMConfigInterface, RemoteLLMConfigInterface, renderJinja } from './primitives/llm';
import { FlashMemoryConfigInterface, FlashMemoryInterface, LongTermMemoryConfigInterface, LongTermMemoryInterface, Memory, MemoryFactory, MemorySnapshot, MemorySnapshotInterface, RollingSummaryConfigInterface, RollingSummaryInterface } from './primitives/memory';
import { DictionaryRuleInterface, EntityInterface, EntityMatch, NER, NERFactory } from './primitives/ner';
import { CheckSafetyInputInterface, SafetyCheckerCreationConfig, SafetyCheckerFactory, SafetyConfigInterface, ThresholdTopicInterface, TopicName } from './primitives/safety';
import { STT, STTFactory } from './primitives/stt';
import { LocalTTSConfigInterface, PhonemeTimestamp, RemoteTTSConfigInterface, SpeechSynthesisConfig, SpeechSynthesisConfigInterface, TTS, TTSConfigInterface, TTSFactory, TTSIterationResult, TTSIterator } from './primitives/tts';
import { LocalVADConfigInterface, VAD, VADFactory } from './primitives/vad';
import { ExporterType as TelemetryExporterType, LoggerConfigInterface, LogLevel as TelemetryLogLevel, TelemetryConfigInterface, TracerConfigInterface } from './telemetry';
export declare const device: {
    readonly DeviceRegistry: typeof DeviceRegistry;
    readonly Device: typeof Device;
    readonly DeviceType: typeof DeviceType;
};
export type { KnowledgeCreationConfig };
export declare const textProcessing: {
    readonly EmojiRemover: typeof EmojiRemover;
    readonly SubstringRemover: typeof SubstringRemover;
    readonly SentenceStream: typeof SentenceStream;
    readonly TextInBracketsRemover: typeof TextInBracketsRemover;
};
export declare const primitives: {
    readonly llm: {
        readonly LLMFactory: typeof LLMFactory;
        readonly LLM: typeof LLM;
        readonly renderJinja: typeof renderJinja;
    };
    readonly embedder: {
        readonly TextEmbedderFactory: typeof TextEmbedderFactory;
        readonly TextEmbedder: typeof TextEmbedder;
    };
    readonly tts: {
        readonly TTSFactory: typeof TTSFactory;
        readonly TTS: typeof TTS;
        readonly SpeechSynthesisConfig: typeof SpeechSynthesisConfig;
    };
    readonly knowledge: {
        readonly KnowledgeCollectionFactory: typeof KnowledgeCollectionFactory;
        readonly KnowledgeFactory: typeof KnowledgeFactory;
        readonly Knowledge: typeof Knowledge;
        readonly KnowledgeGetConfig: typeof KnowledgeGetConfig;
        readonly ParsingConfig: typeof ParsingConfig;
        readonly FileType: typeof FileType;
    };
    readonly memory: {
        readonly MemoryFactory: typeof MemoryFactory;
        readonly Memory: typeof Memory;
        readonly MemorySnapshot: typeof MemorySnapshot;
    };
    readonly stt: {
        readonly STTFactory: typeof STTFactory;
        readonly STT: typeof STT;
    };
    readonly safety: {
        readonly SafetyCheckerFactory: typeof SafetyCheckerFactory;
        readonly TopicName: typeof TopicName;
    };
    readonly intent: {
        readonly Intent: typeof Intent;
        readonly IntentCompilerFactory: typeof IntentCompilerFactory;
        readonly IntentMatcherFactory: typeof IntentMatcherFactory;
        readonly EmbeddingMatcherConfig: typeof EmbeddingMatcherConfig;
        readonly LLMMatcherConfig: typeof LLMMatcherConfig;
    };
    readonly vad: {
        readonly VADFactory: typeof VADFactory;
        readonly VAD: typeof VAD;
    };
    readonly ner: {
        readonly NERFactory: typeof NERFactory;
        readonly NER: typeof NER;
        readonly EntityMatch: typeof EntityMatch;
    };
    readonly textProcessing: {
        readonly EmojiRemover: typeof EmojiRemover;
        readonly SubstringRemover: typeof SubstringRemover;
        readonly SentenceStream: typeof SentenceStream;
        readonly TextInBracketsRemover: typeof TextInBracketsRemover;
    };
};
export declare const common: {
    InworldError: typeof InworldError;
};
export declare const core: {
    readonly DeviceRegistry: typeof DeviceRegistry;
    readonly Device: typeof Device;
    readonly DeviceType: typeof DeviceType;
    readonly History: typeof History;
};
export declare const graph: {
    readonly Graph: typeof Graph;
    readonly GraphOutputStream: typeof GraphOutputStream;
    readonly NodeFactory: typeof NodeFactory;
    readonly CustomNode: typeof CustomNode;
    readonly CustomNodeWrapper: typeof CustomNodeWrapper;
    readonly CustomInputDataType: typeof CustomInputDataType;
    readonly CustomOutputDataType: typeof CustomOutputDataType;
};
export declare const telemetry: {
    readonly init: (props: TelemetryConfigInterface) => void;
    readonly shutdown: () => void;
    readonly LogLevel: typeof TelemetryLogLevel;
    readonly ExporterType: typeof TelemetryExporterType;
};
export type { AgentActionInterface, AgentSpeechInterface, AudioChunkInterface, AudioResponse, CheckSafetyInputInterface, CreateKnowledgeCollectionInterface, DictionaryRuleInterface, EntityInterface, ExternalReference, FlashMemoryConfigInterface, FlashMemoryInterface, GraphOutputStreamResponse, HistoryItemInterface, IntentInterface, IntentMatcherFactoryInterface, IntentNodeFactoryInterface, KnowledgeGetInput, LLMConfigInterface, LLMMatcherConfigInterface, LLMMessageInterface, LLMNodeFactoryInterface, LocalKnowledgeConfigInterface, LocalLLMConfigInterface, LocalTextEmbedderConfigInterface, LocalTTSConfigInterface, LocalVADConfigInterface, LoggerConfigInterface, LongTermMemoryConfigInterface, LongTermMemoryInterface, MemorySnapshotInterface, NodeFactoryInterface, NodeInterface, PhonemeTimestamp, RemoteKnowledgeConfigInterface, RemoteLLMConfigInterface, RemoteTextEmbedderConfigInterface, RemoteTTSConfigInterface, RetrievalConfigInterface, RollingSummaryConfigInterface, RollingSummaryInterface, SafetyCheckerCreationConfig, SafetyConfigInterface, SpeechSynthesisConfigInterface, STTNodeFactoryInterface, TelemetryConfigInterface, TextAggregatorNodeFactoryInterface, TextChunkingNodeFactoryInterface, TextEmbedderConfigInterface, TextResponse, TextStreamIterationResult, TextStreamIterator, ThresholdTopicInterface, TracerConfigInterface, TTSConfigInterface, TTSIterationResult, TTSIterator, TTSNodeFactoryInterface, TTSOutputStreamIterationResult, TTSOutputStreamIterator, };
