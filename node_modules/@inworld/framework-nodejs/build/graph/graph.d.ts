import { AudioChunkInterface } from '../common/types';
import { EdgeConditionCallback } from './edge_condition_executor';
import { GraphOutputStream } from './graph_output_stream';
import { Node } from './nodes/node';
/**
 * Interface for edge options.
 */
export interface EdgeOptions {
    /**
     * Callback function to determine if the edge condition is met.
     * If provided, the edge will only be executed if this condition returns true.
     */
    condition?: EdgeConditionCallback;
    /**
     * If true, the edge is considered optional.
     * If the edge condition is not met, the graph execution will continue without this edge.
     */
    optional?: boolean;
}
/**
 * Class representing a computational graph.
 * Provides functionality to construct and manage processing pipelines.
 */
export declare class Graph {
    private external;
    private compiled;
    private executor;
    private conditionExecutors;
    /**
     * Creates a new Graph instance with the specified ID.
     *
     * @param id - Unique identifier for the graph
     */
    constructor(id: string);
    /**
     * Adds a node to the graph.
     *
     * @param node - Node to add to the graph
     */
    addNode(node: Node): void;
    /**
     * Creates an edge between two nodes in the graph.
     *
     * @param src - Source node
     * @param dst - Destination node
     * @param options - Edge options
     */
    addEdge(src: Node, dst: Node, options?: EdgeOptions): void;
    /**
     * Sets a node as the starting point for graph execution.
     *
     * @param node - Node to set as the start node
     */
    setStartNode(node: Node): void;
    /**
     * Sets a node as the end point for graph execution.
     *
     * @param node - Node to set as the end node
     */
    setEndNode(node: Node): void;
    /**
     * Compiles the graph and returns a reference to the compiled graph.
     * The graph must be compiled before it can be executed.
     *
     * @returns External reference to the compiled graph
     */
    private compile;
    /**
     * Executes the compiled graph.
     *
     * @param input - Input data to execute the graph
     * @param executionId - Unique identifier for this execution
     * @returns Promise resolving to the execution output stream
     */
    execute(input: AudioChunkInterface | Record<string, string>[] | string, executionId: string): Promise<GraphOutputStream>;
    /**
     * Closes a specific execution.
     *
     * @param outputStream - Output stream of the execution to close
     */
    closeExecution(outputStream: GraphOutputStream): void;
    /**
     * Cleans up all active executions.
     */
    cleanupAllExecutions(): void;
    /**
     * Stops the graph executor.
     */
    stopExecutor(): void;
    /**
     * Visualizes the compiled graph and saves the visualization to a file.
     *
     * @param path - File path where the visualization will be saved
     */
    visualize(path: string): Promise<void>;
    /**
     * Cleans up resources associated with this graph.
     */
    destroy(): void;
    private convertInputToData;
}
