"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphExecutor = void 0;
const expose_binary_1 = require("../expose_binary");
/**
 * Class for executing compiled computational graphs.
 * Handles the execution flow and data processing through the graph.
 * @internal
 */
class GraphExecutor {
    /**
     * Creates a new GraphExecutor instance.
     *
     * @param compiledGraph - External reference to a compiled graph
     * @internal
     */
    constructor(compiledGraph) {
        this.external = null;
        this.external = expose_binary_1.GraphExecutorFunctions.factoryHelperCreate(compiledGraph);
    }
    /**
     * Starts the graph executor.
     * Must be called before executing the graph.
     */
    start() {
        expose_binary_1.GraphExecutorFunctions.start(this.external);
    }
    /**
     * Executes the graph with the provided data.
     *
     * @param data - Input data for the graph execution
     * @param executionId - Unique identifier for this execution
     * @returns Promise resolving to the execution result
     */
    execute(data, executionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return expose_binary_1.GraphExecutorFunctions.execute(this.external, data.getExternal(), executionId);
        });
    }
    /**
     * Checks if there are more results available.
     *
     * @param simplified - External reference to a simplified execution context
     * @returns Promise resolving to a boolean indicating if more results are available
     */
    hasNext(simplified) {
        return __awaiter(this, void 0, void 0, function* () {
            return expose_binary_1.GraphExecutorFunctions.hasMoreResults(this.external, simplified);
        });
    }
    /**
     * Gets the next result from the execution.
     *
     * @param simplified - External reference to a simplified execution context
     * @returns Promise resolving to the next result
     */
    next(simplified) {
        return __awaiter(this, void 0, void 0, function* () {
            return expose_binary_1.GraphExecutorFunctions.next(this.external, simplified);
        });
    }
    /**
     * Closes a specific execution.
     *
     * @param index - Index of the execution to close
     */
    closeExecution(index) {
        expose_binary_1.GraphExecutorFunctions.closeExecution(this.external, index);
    }
    /**
     * Cleans up all active executions.
     */
    cleanupAllExecutions() {
        expose_binary_1.GraphExecutorFunctions.cleanupAllExecutions(this.external);
    }
    /**
     * Stops the graph executor.
     */
    stop() {
        expose_binary_1.GraphExecutorFunctions.stop(this.external);
    }
    /**
     * Cleans up resources associated with this graph executor.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.GraphExecutorFunctions.factoryHelperDestroy(this.external);
            this.external = null;
        }
    }
}
exports.GraphExecutor = GraphExecutor;
