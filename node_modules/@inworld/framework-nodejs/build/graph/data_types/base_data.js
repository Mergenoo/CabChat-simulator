"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorBaseData = exports.BaseData = void 0;
const expose_binary_1 = require("../../expose_binary");
/**
 * Base class for all data types that can be processed in graphs.
 * Provides common functionality for data manipulation.
 * @internal
 */
class BaseData {
    /**
     * Creates a new BaseData instance.
     *
     * @param external - External reference to the native data implementation
     */
    constructor(external) {
        this.external = external;
    }
    /**
     * Returns the external reference to the native data implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this data.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.BaseDataFunctions.delete(this.external);
            this.external = null;
        }
    }
    /**
     * Extracts error information from data.
     *
     * @param external - External reference to data that might contain error information
     * @returns Error message string or undefined if no error
     * @internal
     */
    static getError(external) {
        var _a, _b;
        const str = expose_binary_1.BaseDataFunctions.errorToString(external);
        let error;
        try {
            error = (_b = (_a = JSON.parse(str)) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message;
        }
        catch (_e) { }
        return error;
    }
}
exports.BaseData = BaseData;
/**
 * Class for handling vectors of BaseData objects.
 * Provides functionality to manage collections of data.
 * @internal
 */
class VectorBaseData {
    /**
     * Creates a new VectorBaseData instance.
     *
     * @param items - Optional array of BaseData objects to initialize the vector
     */
    constructor(items) {
        this.external = null;
        this.external = expose_binary_1.VectorBaseDataFunctions.new();
        items === null || items === void 0 ? void 0 : items.forEach((item) => {
            expose_binary_1.VectorBaseDataFunctions.pushBack(this.external, item.getExternal());
        });
    }
    /**
     * Returns the external reference to the native vector implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this vector.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.VectorBaseDataFunctions.delete(this.external);
            this.external = null;
        }
    }
    /**
     * Converts an external vector reference to an array of external references.
     *
     * @param external - External reference to the native vector
     * @returns Array of external references
     */
    static toArray(external) {
        const array = [];
        for (let i = 0; i < expose_binary_1.VectorBaseDataFunctions.size(external); i++) {
            array.push(expose_binary_1.VectorBaseDataFunctions.get(external, i));
        }
        return array;
    }
}
exports.VectorBaseData = VectorBaseData;
