import { ExternalReference } from '../../common/types';
/**
 * Base class for all data types that can be processed in graphs.
 * Provides common functionality for data manipulation.
 * @internal
 */
export declare class BaseData {
    protected external: ExternalReference;
    /**
     * Creates a new BaseData instance.
     *
     * @param external - External reference to the native data implementation
     */
    constructor(external: ExternalReference);
    /**
     * Returns the external reference to the native data implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): ExternalReference;
    /**
     * Cleans up resources associated with this data.
     */
    destroy(): void;
    /**
     * Extracts error information from data.
     *
     * @param external - External reference to data that might contain error information
     * @returns Error message string or undefined if no error
     * @internal
     */
    static getError(external: ExternalReference): string;
}
/**
 * Class for handling vectors of BaseData objects.
 * Provides functionality to manage collections of data.
 * @internal
 */
export declare class VectorBaseData {
    private external;
    /**
     * Creates a new VectorBaseData instance.
     *
     * @param items - Optional array of BaseData objects to initialize the vector
     */
    constructor(items?: BaseData[]);
    /**
     * Returns the external reference to the native vector implementation.
     *
     * @returns External reference object
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this vector.
     */
    destroy(): void;
    /**
     * Converts an external vector reference to an array of external references.
     *
     * @param external - External reference to the native vector
     * @returns Array of external references
     */
    static toArray(external: ExternalReference): any[];
}
