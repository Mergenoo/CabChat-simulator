"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeWrapper = void 0;
const expose_binary_1 = require("../expose_binary");
/**
 * EdgeWrapper class for configuring advanced edge properties.
 * Provides functionality for conditional, optional, and loop edges.
 */
class EdgeWrapper {
    /**
     * Creates a new EdgeWrapper from an external reference.
     *
     * @param external - External reference to the C++ EdgeWrapper
     */
    constructor(external) {
        this.external = null;
        this.external = external;
    }
    /**
     * Sets a condition for this edge.
     * The edge will only be traversed if the condition evaluates to true.
     *
     * @param condition - EdgeConditionExecutor that determines if edge should be traversed
     * @returns This EdgeWrapper for method chaining
     */
    setCondition(condition) {
        expose_binary_1.EdgeWrapperFunctions.setCondition(this.external, condition.getExternal());
        return this;
    }
    /**
     * Makes this edge optional.
     * Optional edges don't block execution if they can't be traversed.
     *
     * @returns This EdgeWrapper for method chaining
     */
    setOptional() {
        expose_binary_1.EdgeWrapperFunctions.setToOptional(this.external);
        return this;
    }
    /**
     * Builds/finalizes the edge configuration.
     * This should be called after setting all desired properties.
     *
     * @returns This EdgeWrapper for method chaining
     */
    build() {
        expose_binary_1.EdgeWrapperFunctions.build(this.external);
        return this;
    }
    /**
     * Gets the external reference for use with C++ bindings.
     *
     * @returns External reference pointer
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this edge wrapper.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.EdgeWrapperFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.EdgeWrapper = EdgeWrapper;
