import { ExternalReference } from '../common/types';
import { EdgeConditionExecutor } from './edge_condition_executor';
/**
 * EdgeWrapper class for configuring advanced edge properties.
 * Provides functionality for conditional, optional, and loop edges.
 */
export declare class EdgeWrapper {
    private external;
    /**
     * Creates a new EdgeWrapper from an external reference.
     *
     * @param external - External reference to the C++ EdgeWrapper
     */
    constructor(external: ExternalReference);
    /**
     * Sets a condition for this edge.
     * The edge will only be traversed if the condition evaluates to true.
     *
     * @param condition - EdgeConditionExecutor that determines if edge should be traversed
     * @returns This EdgeWrapper for method chaining
     */
    setCondition(condition: EdgeConditionExecutor): EdgeWrapper;
    /**
     * Makes this edge optional.
     * Optional edges don't block execution if they can't be traversed.
     *
     * @returns This EdgeWrapper for method chaining
     */
    setOptional(): EdgeWrapper;
    /**
     * Builds/finalizes the edge configuration.
     * This should be called after setting all desired properties.
     *
     * @returns This EdgeWrapper for method chaining
     */
    build(): EdgeWrapper;
    /**
     * Gets the external reference for use with C++ bindings.
     *
     * @returns External reference pointer
     */
    getExternal(): ExternalReference;
    /**
     * Cleans up resources associated with this edge wrapper.
     */
    destroy(): void;
}
