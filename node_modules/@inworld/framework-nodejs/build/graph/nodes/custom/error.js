"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalProcessError = exports.ExternalProcessStatusCode = void 0;
const expose_binary_1 = require("../../../expose_binary");
/**
 * Enum representing status codes for custom node errors that are handled by C++ code.
 * @internal
 */
var ExternalProcessStatusCode;
(function (ExternalProcessStatusCode) {
    ExternalProcessStatusCode[ExternalProcessStatusCode["Ok"] = 0] = "Ok";
    ExternalProcessStatusCode[ExternalProcessStatusCode["Cancelled"] = 1] = "Cancelled";
    ExternalProcessStatusCode[ExternalProcessStatusCode["Unknown"] = 2] = "Unknown";
    ExternalProcessStatusCode[ExternalProcessStatusCode["InvalidArgument"] = 3] = "InvalidArgument";
    ExternalProcessStatusCode[ExternalProcessStatusCode["DeadlineExceeded"] = 4] = "DeadlineExceeded";
    ExternalProcessStatusCode[ExternalProcessStatusCode["NotFound"] = 5] = "NotFound";
    ExternalProcessStatusCode[ExternalProcessStatusCode["AlreadyExists"] = 6] = "AlreadyExists";
    ExternalProcessStatusCode[ExternalProcessStatusCode["PermissionDenied"] = 7] = "PermissionDenied";
    ExternalProcessStatusCode[ExternalProcessStatusCode["ResourceExhausted"] = 8] = "ResourceExhausted";
    ExternalProcessStatusCode[ExternalProcessStatusCode["FailedPrecondition"] = 9] = "FailedPrecondition";
    ExternalProcessStatusCode[ExternalProcessStatusCode["Aborted"] = 10] = "Aborted";
    ExternalProcessStatusCode[ExternalProcessStatusCode["OutOfRange"] = 11] = "OutOfRange";
    ExternalProcessStatusCode[ExternalProcessStatusCode["Unimplemented"] = 12] = "Unimplemented";
    ExternalProcessStatusCode[ExternalProcessStatusCode["Internal"] = 13] = "Internal";
    ExternalProcessStatusCode[ExternalProcessStatusCode["Unavailable"] = 14] = "Unavailable";
    ExternalProcessStatusCode[ExternalProcessStatusCode["DataLoss"] = 15] = "DataLoss";
    ExternalProcessStatusCode[ExternalProcessStatusCode["Unauthenticated"] = 16] = "Unauthenticated";
})(ExternalProcessStatusCode || (exports.ExternalProcessStatusCode = ExternalProcessStatusCode = {}));
/**
 * Class for handling custom node errors that are handled by C++ code.
 * @internal
 */
class ExternalProcessError extends Error {
    /**
     * Creates a new ExternalProcessError instance.
     *
     * @param message - Error message
     * @param status - Status code
     */
    constructor(message, status = ExternalProcessStatusCode.InvalidArgument) {
        super(message);
        this.status = expose_binary_1.StatusFunctions.createStatus(status, message);
    }
    getExternal() {
        return this.status;
    }
}
exports.ExternalProcessError = ExternalProcessError;
