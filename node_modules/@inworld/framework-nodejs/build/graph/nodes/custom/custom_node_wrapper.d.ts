import { CustomInputDataType, CustomOutputDataType } from '../../../common/types';
import { Node } from '../node';
/**
 * Interface for CustomNodeWrapper creation properties.
 * @internal
 */
export interface CustomNodeWrapperProps {
    /** Unique identifier for the node */
    id: string;
    /** Function that processes input data */
    process: CustomNodeProcess;
    /** Input types for the node */
    inputTypes: CustomInputDataType[];
    /** Output type for the node */
    outputType: CustomOutputDataType;
}
/**
 * Type definition for a function that processes input data.
 * @internal
 */
export type CustomNodeProcess = (inputs: any[]) => Promise<any> | any;
/**
 * Wrapper class that integrates custom node logic with the graph framework.
 * Bridges between JavaScript code and the native graph implementation.
 */
export declare class CustomNodeWrapper extends Node {
    private externalProcess;
    private inputTypes;
    private outputType;
    /**
     * Creates a new CustomNodeWrapper instance.
     *
     * @param props - Custom node wrapper creation properties
     * @throws InworldError if result type is not supported
     * @internal
     */
    constructor({ id, process, inputTypes, outputType }: CustomNodeWrapperProps);
    /**
     * Cleans up resources associated with this custom node wrapper.
     */
    destroy(): void;
    private fromExternal;
    private toExternal;
    private setResult;
}
