import { CustomInputDataType, CustomOutputDataType } from '../../../common/types';
import { CustomNodeWrapper } from './custom_node_wrapper';
/**
 * Base class for creating custom graph processing nodes.
 * Provides a framework for implementing custom data transformation logic.
 */
export declare class CustomNode {
    /** Unique identifier for the node */
    readonly id: string;
    /** Input type for the node */
    protected input: CustomInputDataType | CustomInputDataType[];
    /** Output type for the node */
    protected output: CustomOutputDataType;
    /**
     * Creates a new CustomNode instance.
     *
     * @param id - Unique identifier for the node
     */
    constructor(id: string);
    /**
     * Processes the input data.
     * This method must be implemented by subclasses.
     *
     * @param _inputs - Array of input data that implements the CustomInputDataType enum
     * @throws InworldError if not implemented by subclass
     */
    process(_inputs: any[]): any;
    /**
     * Builds a CustomNodeWrapper for this node.
     *
     * @returns New CustomNodeWrapper instance that wraps this node
     */
    build(): CustomNodeWrapper;
}
