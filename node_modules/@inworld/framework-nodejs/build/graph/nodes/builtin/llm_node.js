"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLMNode = void 0;
const expose_binary_1 = require("../../../expose_binary");
const node_1 = require("../node");
const node_execution_config_1 = require("./node_execution_config");
/**
 * Node for language model text generation in the graph.
 * Processes input through a language model to generate text responses.
 */
class LLMNode extends node_1.Node {
    /**
     * Creates a new LLMNode instance.
     *
     * @param props - LLM node creation properties
     * @internal
     */
    constructor(props) {
        let executionConfig = null;
        try {
            executionConfig = new node_execution_config_1.LLMNodeExecutionConfig(props.executionConfig);
            super(props.id, expose_binary_1.NodeHelperFunctions.createLLMNode(props.id, props.llm.getExternal(), executionConfig.getExternal(), props.stream));
            this.llm = props.llm;
            this.stream = props.stream;
            this.executionConfig = executionConfig;
        }
        catch (e) {
            executionConfig === null || executionConfig === void 0 ? void 0 : executionConfig.destroy();
            throw e;
        }
    }
    /**
     * Cleans up resources associated with this LLM node.
     */
    destroy() {
        var _a, _b;
        (_a = this.llm) === null || _a === void 0 ? void 0 : _a.destroy();
        this.llm = null;
        (_b = this.executionConfig) === null || _b === void 0 ? void 0 : _b.destroy();
        this.executionConfig = null;
        if (this.external) {
            expose_binary_1.NodeHelperFunctions.deleteLLMNode(this.external);
        }
        super.destroy();
    }
}
exports.LLMNode = LLMNode;
