import { TextEmbedder } from '../../primitives/embedder';
import { Knowledge } from '../../primitives/knowledge';
import { LLM, LocalLLMConfigInterface, RemoteLLMConfigInterface } from '../../primitives/llm';
import { LocalSTTConfigInterface, RemoteSTTConfigInterface } from '../../primitives/stt';
import { LocalTTSConfigInterface, RemoteTTSConfigInterface } from '../../primitives/tts';
import { KnowledgeNode, LLMNode, STTNode, TextChunkingNode, TTSNode } from './builtin';
import { IntentNode } from './builtin/intent_node';
import { IntentNodeExecutionConfigPropsInterface, LLMNodeExecutionConfigPropsInterface, STTNodeExecutionConfigPropsInterface, TTSNodeExecutionConfigPropsInterface } from './builtin/node_execution_config';
import { TextAggregatorNode } from './builtin/text_aggregator_node';
/**
 * Basic interface for node factory parameters.
 */
export interface NodeFactoryInterface {
    /** Unique identifier for the node */
    id: string;
}
/**
 * Interface for LLM node factory parameters.
 */
export interface LLMNodeFactoryInterface extends NodeFactoryInterface {
    /** Configuration for the LLM (local or remote) */
    llmConfig: RemoteLLMConfigInterface | LocalLLMConfigInterface;
    /** Execution configuration for the LLM node */
    executionConfig: LLMNodeExecutionConfigPropsInterface;
    /** Whether to stream the results (default: false) */
    stream?: boolean;
}
/**
 * Interface for STT node factory parameters.
 */
export interface STTNodeFactoryInterface extends NodeFactoryInterface {
    /** Configuration for the speech-to-text service (local or remote) */
    sttConfig: RemoteSTTConfigInterface | LocalSTTConfigInterface;
    /** Execution configuration for the STT node */
    executionConfig?: STTNodeExecutionConfigPropsInterface;
}
/**
 * Interface for TTS node factory parameters.
 */
export interface TTSNodeFactoryInterface extends NodeFactoryInterface {
    /** Configuration for the text-to-speech service (local or remote) */
    ttsConfig: RemoteTTSConfigInterface | LocalTTSConfigInterface;
    /** Execution configuration for the TTS node */
    executionConfig?: TTSNodeExecutionConfigPropsInterface;
}
/**
 * Interface for text chunking node factory parameters.
 */
export interface TextChunkingNodeFactoryInterface extends NodeFactoryInterface {
}
/**
 * Interface for intent node factory parameters.
 */
export interface IntentNodeFactoryInterface extends NodeFactoryInterface {
    /** Optional text embedder for embedding-based matching */
    textEmbedder?: TextEmbedder;
    /** Optional LLM for LLM-based matching */
    llm?: LLM;
    /** Execution configuration for the intent node */
    executionConfig?: IntentNodeExecutionConfigPropsInterface;
}
/**
 * Interface for text aggregator node factory parameters.
 */
export interface TextAggregatorNodeFactoryInterface extends NodeFactoryInterface {
}
/**
 * Interface for knowledge node factory parameters.
 */
export interface KnowledgeNodeFactoryInterface extends NodeFactoryInterface {
    /** Knowledge instance */
    knowledge: Knowledge;
    /** Array of IDs */
    ids: string[];
}
/**
 * Factory class for creating various types of graph nodes.
 * Provides methods to easily create and configure common node types.
 */
export declare class NodeFactory {
    /**
     * Creates a remote LLM (Large Language Model) node.
     *
     * @param props - Configuration parameters for the LLM node
     * @returns Promise resolving to a new LLM node
     */
    static createRemoteLLMNode(props: LLMNodeFactoryInterface): Promise<LLMNode>;
    /**
     * Creates a local LLM (Large Language Model) node.
     *
     * @param props - Configuration parameters for the LLM node
     * @returns Promise resolving to a new LLM node
     */
    static createLocalLLMNode(props: LLMNodeFactoryInterface): Promise<LLMNode>;
    /**
     * Creates a remote STT (Speech-to-Text) node.
     *
     * @param props - Configuration parameters for the STT node
     * @returns Promise resolving to a new STT node
     */
    static createRemoteSTTNode(props: STTNodeFactoryInterface): Promise<STTNode>;
    /**
     * Creates a local STT (Speech-to-Text) node.
     *
     * @param props - Configuration parameters for the STT node
     * @returns Promise resolving to a new STT node
     */
    static createLocalSTTNode(props: STTNodeFactoryInterface): Promise<STTNode>;
    /**
     * Creates a remote TTS (Text-to-Speech) node.
     *
     * @param props - Configuration parameters for the TTS node
     * @returns Promise resolving to a new TTS node
     */
    static createRemoteTTSNode(props: TTSNodeFactoryInterface): Promise<TTSNode>;
    /**
     * Creates a local TTS (Text-to-Speech) node.
     *
     * @param props - Configuration parameters for the TTS node
     * @returns Promise resolving to a new TTS node
     */
    static createLocalTTSNode(props: TTSNodeFactoryInterface): Promise<TTSNode>;
    /**
     * Creates a text chunking node.
     *
     * @param props - Configuration parameters for the text chunking node
     * @returns A new text chunking node
     */
    static createTextChunkingNode(props: TextChunkingNodeFactoryInterface): TextChunkingNode;
    /**
     * Creates an intent matching node.
     *
     * @param props - Configuration parameters for the intent node
     * @returns Promise resolving to a new intent node
     */
    static createIntentNode(props: IntentNodeFactoryInterface): Promise<IntentNode>;
    /**
     * Creates a text aggregator node.
     *
     * @param props - Configuration parameters for the text aggregator node
     * @returns A new text aggregator node
     */
    static createTextAggregatorNode(props: TextAggregatorNodeFactoryInterface): TextAggregatorNode;
    /**
     * Creates a remote knowledge node.
     *
     * @param props - Configuration parameters for the knowledge node
     * @returns A new knowledge node
     */
    static createRemoteKnowledgeNode(props: KnowledgeNodeFactoryInterface): Promise<KnowledgeNode>;
}
