"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFactory = void 0;
const intent_1 = require("../../primitives/intent");
const llm_1 = require("../../primitives/llm");
const stt_1 = require("../../primitives/stt");
const tts_1 = require("../../primitives/tts");
const builtin_1 = require("./builtin");
const intent_node_1 = require("./builtin/intent_node");
const text_aggregator_node_1 = require("./builtin/text_aggregator_node");
/**
 * Factory class for creating various types of graph nodes.
 * Provides methods to easily create and configure common node types.
 */
class NodeFactory {
    /**
     * Creates a remote LLM (Large Language Model) node.
     *
     * @param props - Configuration parameters for the LLM node
     * @returns Promise resolving to a new LLM node
     */
    static createRemoteLLMNode(props) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const llm = yield llm_1.LLMFactory.createRemote(props.llmConfig);
            return new builtin_1.LLMNode({
                id: props.id,
                llm,
                executionConfig: props.executionConfig,
                stream: (_a = props.stream) !== null && _a !== void 0 ? _a : false,
            });
        });
    }
    /**
     * Creates a local LLM (Large Language Model) node.
     *
     * @param props - Configuration parameters for the LLM node
     * @returns Promise resolving to a new LLM node
     */
    static createLocalLLMNode(props) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const llm = yield llm_1.LLMFactory.createLocal(props.llmConfig);
            return new builtin_1.LLMNode({
                id: props.id,
                llm,
                executionConfig: props.executionConfig,
                stream: (_a = props.stream) !== null && _a !== void 0 ? _a : true,
            });
        });
    }
    /**
     * Creates a remote STT (Speech-to-Text) node.
     *
     * @param props - Configuration parameters for the STT node
     * @returns Promise resolving to a new STT node
     */
    static createRemoteSTTNode(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const stt = yield stt_1.STTFactory.createRemote(props.sttConfig);
            return new builtin_1.STTNode({
                id: props.id,
                stt,
                executionConfig: props.executionConfig,
            });
        });
    }
    /**
     * Creates a local STT (Speech-to-Text) node.
     *
     * @param props - Configuration parameters for the STT node
     * @returns Promise resolving to a new STT node
     */
    static createLocalSTTNode(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const stt = yield stt_1.STTFactory.createLocal(props.sttConfig);
            return new builtin_1.STTNode({
                id: props.id,
                stt,
                executionConfig: props.executionConfig,
            });
        });
    }
    /**
     * Creates a remote TTS (Text-to-Speech) node.
     *
     * @param props - Configuration parameters for the TTS node
     * @returns Promise resolving to a new TTS node
     */
    static createRemoteTTSNode(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const tts = yield tts_1.TTSFactory.createRemote(props.ttsConfig);
            return new builtin_1.TTSNode({
                id: props.id,
                tts,
                synthesisConfig: props.ttsConfig.synthesisConfig,
                executionConfig: props.executionConfig,
            });
        });
    }
    /**
     * Creates a local TTS (Text-to-Speech) node.
     *
     * @param props - Configuration parameters for the TTS node
     * @returns Promise resolving to a new TTS node
     */
    static createLocalTTSNode(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const tts = yield tts_1.TTSFactory.createLocal(props.ttsConfig);
            return new builtin_1.TTSNode({
                id: props.id,
                tts,
                synthesisConfig: props.ttsConfig.synthesisConfig,
                executionConfig: props.executionConfig,
            });
        });
    }
    /**
     * Creates a text chunking node.
     *
     * @param props - Configuration parameters for the text chunking node
     * @returns A new text chunking node
     */
    static createTextChunkingNode(props) {
        return new builtin_1.TextChunkingNode(props);
    }
    /**
     * Creates an intent matching node.
     *
     * @param props - Configuration parameters for the intent node
     * @returns Promise resolving to a new intent node
     */
    static createIntentNode(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const intentMatcher = yield intent_1.IntentMatcherFactory.create({
                config: props.executionConfig.matcherConfig,
                textEmbedder: props.textEmbedder,
                llm: props.llm,
            });
            return new intent_node_1.IntentNode({
                id: props.id,
                intentMatcher,
                executionConfig: props.executionConfig,
            });
        });
    }
    /**
     * Creates a text aggregator node.
     *
     * @param props - Configuration parameters for the text aggregator node
     * @returns A new text aggregator node
     */
    static createTextAggregatorNode(props) {
        return new text_aggregator_node_1.TextAggregatorNode(props);
    }
    /**
     * Creates a remote knowledge node.
     *
     * @param props - Configuration parameters for the knowledge node
     * @returns A new knowledge node
     */
    static createRemoteKnowledgeNode(props) {
        return __awaiter(this, void 0, void 0, function* () {
            return new builtin_1.KnowledgeNode(props);
        });
    }
}
exports.NodeFactory = NodeFactory;
