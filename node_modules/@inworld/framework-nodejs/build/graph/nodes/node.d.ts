import { ExternalReference } from '../../common/types';
/**
 * Interface defining the basic properties required for node creation.
 */
export interface NodePropsInterface {
    /** Unique identifier for the node */
    id: string;
}
/**
 * Interface defining the requirements for all graph nodes.
 * @internal
 */
export interface NodeInterface {
    /** Unique identifier for the node */
    id: string;
    /**
     * Gets the external reference to the node's native implementation
     * @internal
     * */
    getExternal(): ExternalReference;
    /** Cleans up resources associated with the node */
    destroy(): void;
}
/**
 * Base implementation of a graph node.
 * Provides common functionality for all node types.
 * @internal
 */
export declare class Node implements NodeInterface {
    /** Unique identifier for the node */
    readonly id: string;
    /** External reference to the node's native implementation */
    protected external: ExternalReference;
    /**
     * Creates a new Node instance.
     *
     * @param id - Unique identifier for the node
     * @param external - Optional external reference to a native node implementation
     */
    constructor(id: string, external?: ExternalReference);
    /**
     * Returns the external reference to the node's native implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
    /**
     * Checks the status of data and throws an error if there's a problem.
     *
     * @param data - External reference to the data to check
     * @throws InworldError if the data contains an error status
     */
    protected checkStatus(data: ExternalReference): void;
    /**
     * Cleans up resources associated with this node.
     */
    destroy(): void;
}
