"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphOutputStream = void 0;
const common_1 = require("../common");
const stream_1 = require("../common/stream");
const expose_binary_1 = require("../expose_binary");
const data_types_1 = require("./data_types");
const types_1 = require("./nodes/types");
/**
 * Represents a handler for a graph execution.
 */
class GraphOutputStream {
    /**
     * Creates a new GraphOutputStream instance.
     * @param index - The index of the execution
     * @param graphExecutor - The graph executor associated with the execution
     * @internal
     */
    constructor(graphExecutor, index, data) {
        this.index = index;
        this.graphExecutor = graphExecutor;
        this.data = data;
    }
    /**
     * Handles the response from a node.
     * @returns A promise that resolves to the response from the node
     */
    next() {
        return __awaiter(this, void 0, void 0, function* () {
            while (this.index && (yield this.graphExecutor.hasNext(this.index))) {
                const next = yield this.graphExecutor.next(this.index);
                this.checkStatus(next);
                // FIXME: Replace by more clear type detection.
                // The corresponding method should be exposed from the C++ side while koffi is used.
                // Node-API is expected to be helpful as well since it provides native types.
                // String stream
                try {
                    const stream = expose_binary_1.StreamStringFunctions.toStream(next);
                    if (stream) {
                        return {
                            type: types_1.GraphOutputStreamResponseType.TEXT_STREAM,
                            data: stream_1.TextStream.fromExternal(stream),
                            done: false,
                        };
                    }
                }
                catch (_e) { }
                // TTS stream
                try {
                    const stream = expose_binary_1.TTSOutputFunctions.toStream(next);
                    const streamData = stream ? expose_binary_1.TTSOutputFunctions.getStream(stream) : null;
                    if (streamData) {
                        return {
                            type: types_1.GraphOutputStreamResponseType.TTS_OUTPUT_STREAM,
                            data: stream_1.TTSOutputStream.fromExternal(streamData),
                            done: false,
                        };
                    }
                }
                catch (_e) { }
                // Knowledge records
                try {
                    const records = data_types_1.KnowledgeRecords.fromExternal(next).getRecords();
                    if (records) {
                        return {
                            type: types_1.GraphOutputStreamResponseType.KNOWLEDGE,
                            data: records,
                            done: false,
                        };
                    }
                }
                catch (_e) { }
                // Plain text data including JSON
                const textData = data_types_1.TextData.fromExternal(next);
                const text = textData.getText();
                textData.destroy();
                return {
                    type: types_1.GraphOutputStreamResponseType.TEXT,
                    data: text,
                    done: false,
                };
            }
            this.data.destroy();
            return {
                done: true,
            };
        });
    }
    /**
     * Checks the status of data and throws an error if there's a problem.
     *
     * @param data - External reference to the data to check
     * @throws InworldError if the data contains an error status
     */
    checkStatus(data) {
        const status = data_types_1.BaseData.getError(data);
        if (status) {
            throw new common_1.InworldError('Graph Output Stream error', status);
        }
    }
}
exports.GraphOutputStream = GraphOutputStream;
