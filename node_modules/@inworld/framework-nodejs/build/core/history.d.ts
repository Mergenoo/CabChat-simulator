/**
 * Interface representing agent speech in conversation history.
 */
export interface AgentSpeechInterface {
    /** Agent's name */
    name: string;
    /** Text spoken by the agent */
    utterance: string;
}
/**
 * Interface representing agent action in conversation history.
 */
export interface AgentActionInterface {
    /** Agent's name */
    agentName: string;
    /** Action name */
    name: string;
    /** Action parameters as key-value pairs */
    parameters: Record<string, string>;
}
/**
 * Union type representing different types of history items.
 */
export type HistoryItemInterface = AgentSpeechInterface | AgentActionInterface;
/**
 * Class for managing conversation history.
 * Provides functionality to track agent speech and actions.
 */
export declare class History {
    private history;
    private external;
    /**
     * Creates a new History instance with the provided history items.
     *
     * @param history - Array of history items (agent speech or actions)
     */
    constructor(history: HistoryItemInterface[]);
    /**
     * Returns the external reference to the native history implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this history.
     */
    destroy(): void;
}
