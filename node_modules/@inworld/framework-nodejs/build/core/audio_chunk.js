"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioChunk = void 0;
const float_1 = require("../common/vector/float");
const expose_binary_1 = require("../expose_binary");
/**
 * Class for handling audio data chunks.
 * Provides a wrapper around native audio processing functionality.
 * @internal
 */
class AudioChunk {
    /**
     * Creates a new AudioChunk instance.
     *
     * @param params - Configuration parameters for the audio chunk
     */
    constructor(params) {
        const { data, sampleRate } = params || {};
        this.external = expose_binary_1.AudioChunkFunctions.new();
        if (data === null || data === void 0 ? void 0 : data.length) {
            expose_binary_1.AudioChunkFunctions.setData(this.external, new float_1.VectorFloat(data).getExternal());
        }
        if (sampleRate !== undefined) {
            expose_binary_1.AudioChunkFunctions.setSampleRate(this.external, sampleRate);
        }
    }
    /**
     * Returns the external reference to the native audio chunk implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this audio chunk.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.AudioChunkFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.AudioChunk = AudioChunk;
