"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _StreamTextProcessor_destroy;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamTextProcessor = void 0;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const stream_1 = require("../../common/stream");
/**
 * Abstract base class for text processing stream operations.
 * Provides common functionality for different text processors.
 * @abstract
 * @internal
 */
class StreamTextProcessor {
    /**
     * Creates a new StreamTextProcessor instance.
     *
     * @param textStream - External reference to the text stream
     * @param destroy - Function to call when destroying the processor
     */
    constructor(textStream, destroy) {
        _StreamTextProcessor_destroy.set(this, void 0);
        __classPrivateFieldSet(this, _StreamTextProcessor_destroy, destroy, "f");
        this.stream = textStream;
    }
    /**
     * Creates a processor instance asynchronously.
     *
     * @param ClassType - The constructor of the processor class
     * @param streamFunctions - Native functions for stream operations
     * @param statusStreamFunctions - Native functions for status operations
     * @param rest - Additional parameters for stream creation
     * @returns Promise resolving to a new processor instance
     * @throws InworldError if creation fails
     */
    static createInstance(ClassType, streamFunctions, statusStreamFunctions, ...rest) {
        return __awaiter(this, void 0, void 0, function* () {
            let sentenceStreamInstance;
            let statusOrSentenceStream;
            try {
                statusOrSentenceStream = yield streamFunctions.create(...rest);
                if (!statusStreamFunctions.isOK(statusOrSentenceStream)) {
                    throw new common_1.InworldError('Failed to create text stream: ' + ClassType.name, (0, helpers_1.getStatus)(statusOrSentenceStream));
                }
                const sentenceStream = statusStreamFunctions.getValue(statusOrSentenceStream);
                sentenceStreamInstance = new ClassType(sentenceStream, () => streamFunctions.delete(sentenceStream));
            }
            finally {
                statusStreamFunctions.delete(statusOrSentenceStream);
            }
            return sentenceStreamInstance;
        });
    }
    /**
     * Returns an asynchronous iterator for processing the text stream.
     *
     * @returns Stream iterator object
     */
    getIterator() {
        return this.streamIterator(this.stream);
    }
    /**
     * Cleans up resources associated with this processor.
     */
    destroy() {
        if (this.stream) {
            __classPrivateFieldGet(this, _StreamTextProcessor_destroy, "f").call(this);
            this.stream = null;
            __classPrivateFieldSet(this, _StreamTextProcessor_destroy, null, "f");
        }
    }
    /**
     * Creates an asynchronous stream iterator for the given input stream.
     *
     * @param inputStream - External reference to the input stream
     * @returns Stream iterator object
     */
    streamIterator(inputStream) {
        const stringStream = new stream_1.TextStream(inputStream);
        return {
            getStream() {
                return stringStream.get();
            },
            next() {
                return __awaiter(this, void 0, void 0, function* () {
                    return stringStream.next();
                });
            },
        };
    }
}
exports.StreamTextProcessor = StreamTextProcessor;
_StreamTextProcessor_destroy = new WeakMap();
