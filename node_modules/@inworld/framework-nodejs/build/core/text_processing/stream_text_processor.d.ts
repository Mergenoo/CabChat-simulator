import { ExternalReference } from '../../common/types';
/**
 * Abstract base class for text processing stream operations.
 * Provides common functionality for different text processors.
 * @abstract
 * @internal
 */
export declare abstract class StreamTextProcessor {
    #private;
    protected stream: ExternalReference | null;
    /**
     * Creates a new StreamTextProcessor instance.
     *
     * @param textStream - External reference to the text stream
     * @param destroy - Function to call when destroying the processor
     */
    constructor(textStream: ExternalReference, destroy: VoidFunction);
    /**
     * Creates a processor instance asynchronously.
     *
     * @param ClassType - The constructor of the processor class
     * @param streamFunctions - Native functions for stream operations
     * @param statusStreamFunctions - Native functions for status operations
     * @param rest - Additional parameters for stream creation
     * @returns Promise resolving to a new processor instance
     * @throws InworldError if creation fails
     */
    protected static createInstance<T>(ClassType: new (value: number, destroy: VoidFunction) => T, streamFunctions: Record<string, any>, statusStreamFunctions: Record<string, any>, ...rest: unknown[]): Promise<any>;
    /**
     * Returns an asynchronous iterator for processing the text stream.
     *
     * @returns Stream iterator object
     */
    getIterator(): {
        getStream(): any;
        next(): Promise<{
            text: any;
            done: boolean;
        } | {
            done: boolean;
            text?: undefined;
        }>;
    };
    /**
     * Cleans up resources associated with this processor.
     */
    destroy(): void;
    /**
     * Creates an asynchronous stream iterator for the given input stream.
     *
     * @param inputStream - External reference to the input stream
     * @returns Stream iterator object
     */
    private streamIterator;
}
