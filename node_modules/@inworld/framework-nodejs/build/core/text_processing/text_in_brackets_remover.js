"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextInBracketsRemover = void 0;
const expose_binary_1 = require("../../expose_binary");
const stream_text_processor_1 = require("./stream_text_processor");
/**
 * Text processor that removes text enclosed in brackets from text streams.
 * Extends the StreamTextProcessor with bracket content removal functionality.
 */
class TextInBracketsRemover extends stream_text_processor_1.StreamTextProcessor {
    /**
     * Creates a new TextInBracketsRemover instance asynchronously.
     *
     * @param textStream - External reference to the text stream
     * @returns Promise resolving to a new TextInBracketsRemover instance
     * @throws InworldError if creation fails
     */
    static create(textStream) {
        return __awaiter(this, void 0, void 0, function* () {
            return stream_text_processor_1.StreamTextProcessor.createInstance(TextInBracketsRemover, expose_binary_1.TextInBracketsRemoverFunctions, expose_binary_1.StatusOrTextInBracketsRemoverFunctions, textStream);
        });
    }
}
exports.TextInBracketsRemover = TextInBracketsRemover;
