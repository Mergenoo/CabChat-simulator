"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Device = exports.DeviceRegistry = exports.DeviceType = void 0;
const error_1 = require("../common/error");
const expose_binary_1 = require("../expose_binary");
/**
 * Enumeration of supported device types for computations.
 */
var DeviceType;
(function (DeviceType) {
    /** CPU device */
    DeviceType["CPU"] = "CPU";
    /** CUDA GPU device */
    DeviceType["CUDA"] = "CUDA";
    /** Metal GPU device (Apple) */
    DeviceType["Metal"] = "Metal";
})(DeviceType || (exports.DeviceType = DeviceType = {}));
/**
 * Registry for accessing available computation devices on the system.
 */
class DeviceRegistry {
    /**
     * Returns a list of all available computation devices.
     *
     * @returns Array of Device instances representing available hardware
     */
    static getAvailableDevices() {
        const instance = expose_binary_1.DeviceFunctions.getDeviceRegistryInstance();
        const devices = expose_binary_1.DeviceFunctions.getAvailableDevices(instance);
        const size = expose_binary_1.DeviceFunctions.getDevicesSize(devices);
        const devicesArray = [];
        for (let i = 0; i < size; i++) {
            devicesArray.push(new Device(expose_binary_1.DeviceFunctions.getDevice(devices, i)));
        }
        return devicesArray;
    }
}
exports.DeviceRegistry = DeviceRegistry;
/**
 * Represents a computation device that can be used for processing.
 */
class Device {
    /**
     * Creates a new Device instance.
     *
     * @param external - External reference to the native device implementation
     * @internal
     */
    constructor(external) {
        this.external = external;
    }
    /**
     * Returns the type of this device.
     *
     * @returns The device type enum value
     * @throws InworldError if the device type is invalid
     */
    getType() {
        switch (expose_binary_1.DeviceFunctions.getDeviceType(this.external)) {
            case 0:
                return DeviceType.CPU;
            case 1:
                return DeviceType.CUDA;
            case 2:
                return DeviceType.Metal;
            default:
                throw new error_1.InworldError('Invalid device type', {
                    deviceType: expose_binary_1.DeviceFunctions.getDeviceType(this.external),
                });
        }
    }
    /**
     * Returns the external reference to the native device implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.external;
    }
}
exports.Device = Device;
