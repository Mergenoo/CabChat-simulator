"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.History = void 0;
const expose_binary_1 = require("../expose_binary");
/**
 * Class for managing conversation history.
 * Provides functionality to track agent speech and actions.
 */
class History {
    /**
     * Creates a new History instance with the provided history items.
     *
     * @param history - Array of history items (agent speech or actions)
     */
    constructor(history) {
        this.history = history;
        this.external = expose_binary_1.VectorEventFunctions.new();
        history.forEach((h) => {
            const event = expose_binary_1.EventFunctions.new();
            if ('utterance' in h && 'name' in h) {
                const speech = expose_binary_1.EventFunctions.getSpeech(event);
                expose_binary_1.EventFunctions.setAgentName(speech, h.name);
                expose_binary_1.EventFunctions.setUtterance(speech, h.utterance);
            }
            else if ('agentName' in h && 'name' in h && 'parameters' in h) {
                const action = expose_binary_1.EventFunctions.getAction(event);
                expose_binary_1.EventFunctions.setAgentName(action, h.agentName);
                expose_binary_1.EventFunctions.setName(action, h.name);
                Object.entries(h.parameters).forEach(([key, value]) => {
                    expose_binary_1.EventFunctions.setParameters(action, key, value);
                });
            }
            expose_binary_1.VectorEventFunctions.pushBack(this.external, event);
        });
    }
    /**
     * Returns the external reference to the native history implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this history.
     */
    destroy() {
        expose_binary_1.VectorEventFunctions.delete(this.external);
        this.external = null;
    }
}
exports.History = History;
