import { ExternalReference } from '../common/types';
/**
 * Interface for a logger
 */
export interface LoggerConfigInterface {
    /**
     * The log level to use
     * @default LogLevel.INFO
     */
    level?: LogLevel;
    /**
     * Whether to sink absl logs
     * @default true
     */
    sinkAbslLogs?: boolean;
}
/**
 * Configuration for tracer
 */
export interface TracerConfigInterface {
    /**
     * The sampling rate for tracer
     * @default 1.0
     */
    samplingRate?: number;
}
/**
 * Configuration for telemetry
 */
export interface TelemetryConfigInterface {
    /**
     * The name of the application
     * Used as service.name and app.name in telemetry attributes
     */
    appName?: string;
    /**
     * The version of the application
     * Used as service.version and app.version in telemetry attributes
     */
    appVersion?: string;
    /**
     * The endpoint for telemetry
     */
    endpoint?: string;
    /**
     * The API key for telemetry
     */
    apiKey: string;
    /**
     * The logger configuration to use for telemetry
     */
    logger?: LoggerConfigInterface;
    /**
     * The tracer to use for telemetry
     */
    tracer?: TracerConfigInterface;
    /**
     * The metrics configuration to use for telemetry
     */
    exporterType?: ExporterType;
}
/**
 * Log levels for telemetry logging that map to VERBOSITY values
 */
export declare enum LogLevel {
    /**
     * Trace level - most verbose (verbosity = 2)
     */
    TRACE = "TRACE",
    /**
     * Debug level (verbosity = 1)
     */
    DEBUG = "DEBUG",
    /**
     * Info level (verbosity = 0)
     */
    INFO = "INFO",
    /**
     * Warning level
     */
    WARN = "WARN",
    /**
     * Error level - least verbose
     */
    ERROR = "ERROR"
}
/**
 * Exporter types for telemetry
 */
export declare enum ExporterType {
    /**
     * The local exporter type
     */
    LOCAL = "LOCAL",
    /**
     * The remote exporter type
     */
    REMOTE = "REMOTE"
}
/**
 * Telemetry class
 * @internal
 */
declare class Telemetry {
    private static instance;
    private initialized;
    config: ExternalReference | undefined;
    loggerConfig: ExternalReference | undefined;
    tracerConfig: ExternalReference | undefined;
    constructor(props: TelemetryConfigInterface);
    init(): void;
    shutdown(): void;
    static getInstance(): Telemetry;
    private destroy;
    private mapExporterTypeToExternal;
    private mapLogLevelToExternal;
}
export declare const getInstance: () => Telemetry;
export declare const init: (props: TelemetryConfigInterface) => void;
export declare const shutdown: () => void;
export {};
