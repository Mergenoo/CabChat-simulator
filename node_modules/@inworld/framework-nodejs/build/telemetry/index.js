"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shutdown = exports.init = exports.getInstance = exports.ExporterType = exports.LogLevel = void 0;
const constants_1 = require("../common/constants");
const error_1 = require("../common/error");
const expose_binary_1 = require("../expose_binary");
/**
 * Log levels for telemetry logging that map to VERBOSITY values
 */
var LogLevel;
(function (LogLevel) {
    /**
     * Trace level - most verbose (verbosity = 2)
     */
    LogLevel["TRACE"] = "TRACE";
    /**
     * Debug level (verbosity = 1)
     */
    LogLevel["DEBUG"] = "DEBUG";
    /**
     * Info level (verbosity = 0)
     */
    LogLevel["INFO"] = "INFO";
    /**
     * Warning level
     */
    LogLevel["WARN"] = "WARN";
    /**
     * Error level - least verbose
     */
    LogLevel["ERROR"] = "ERROR";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
/**
 * Exporter types for telemetry
 */
var ExporterType;
(function (ExporterType) {
    /**
     * The local exporter type
     */
    ExporterType["LOCAL"] = "LOCAL";
    /**
     * The remote exporter type
     */
    ExporterType["REMOTE"] = "REMOTE";
})(ExporterType || (exports.ExporterType = ExporterType = {}));
/**
 * Telemetry class
 * @internal
 */
class Telemetry {
    constructor(props) {
        var _a;
        this.initialized = false;
        if (!(props === null || props === void 0 ? void 0 : props.apiKey)) {
            throw new error_1.InworldError('apiKey is required to initialize telemetry');
        }
        const { apiKey, appName = constants_1.DEFAULT_TELEMETRY_APP_NAME, appVersion = constants_1.DEFAULT_TELEMETRY_APP_VERSION, endpoint = constants_1.DEFAULT_TELEMETRY_ENDPOINT, logger, tracer, exporterType = ExporterType.REMOTE, } = props;
        try {
            this.config = expose_binary_1.TelemetryFunctions.configNew();
            if (apiKey) {
                expose_binary_1.TelemetryFunctions.configSetApiKey(this.config, apiKey);
            }
            if (appName) {
                expose_binary_1.TelemetryFunctions.configSetServiceName(this.config, appName);
            }
            if (appVersion) {
                expose_binary_1.TelemetryFunctions.configSetAppVersion(this.config, appVersion);
            }
            if (endpoint) {
                expose_binary_1.TelemetryFunctions.configSetEndpoint(this.config, endpoint);
            }
            expose_binary_1.TelemetryFunctions.configSetExporterType(this.config, this.mapExporterTypeToExternal(exporterType));
            // Create logger config
            this.loggerConfig = expose_binary_1.TelemetryFunctions.configLoggerNew();
            expose_binary_1.TelemetryFunctions.configLoggerSetSinkAbslLogs(this.loggerConfig, (_a = logger === null || logger === void 0 ? void 0 : logger.sinkAbslLogs) !== null && _a !== void 0 ? _a : true);
            const level = (logger === null || logger === void 0 ? void 0 : logger.level) && this.mapLogLevelToExternal(logger.level);
            if (level != null) {
                expose_binary_1.TelemetryFunctions.configLoggerSetLevel(this.loggerConfig, level);
            }
            expose_binary_1.TelemetryFunctions.configSetLogger(this.config, this.loggerConfig);
            // Create tracer config
            if ((tracer === null || tracer === void 0 ? void 0 : tracer.samplingRate) != null) {
                this.tracerConfig = expose_binary_1.TelemetryFunctions.configTracerNew();
                expose_binary_1.TelemetryFunctions.configTracerSetSamplingRate(this.tracerConfig, tracer.samplingRate);
                expose_binary_1.TelemetryFunctions.configSetTracer(this.config, this.tracerConfig);
            }
        }
        catch (error) {
            this.destroy();
            throw new error_1.InworldError('Failed to initialize telemetry', error);
        }
    }
    init() {
        if (!this.initialized) {
            expose_binary_1.TelemetryFunctions.init(this.config);
            this.initialized = true;
            Telemetry.instance = this;
        }
    }
    shutdown() {
        Telemetry.instance = undefined;
        if (this.initialized) {
            expose_binary_1.TelemetryFunctions.shutdown();
            this.initialized = false;
            this.destroy();
        }
    }
    static getInstance() {
        return Telemetry.instance;
    }
    destroy() {
        if (this.config) {
            expose_binary_1.TelemetryFunctions.configDelete(this.config);
            this.config = undefined;
        }
        if (this.loggerConfig) {
            expose_binary_1.TelemetryFunctions.configLoggerDelete(this.loggerConfig);
            this.loggerConfig = undefined;
        }
        if (this.tracerConfig) {
            expose_binary_1.TelemetryFunctions.configTracerDelete(this.tracerConfig);
            this.tracerConfig = undefined;
        }
    }
    mapExporterTypeToExternal(exporterType) {
        switch (exporterType) {
            case ExporterType.LOCAL:
                return 0;
            case ExporterType.REMOTE:
                return 1;
        }
    }
    mapLogLevelToExternal(logLevel) {
        switch (logLevel) {
            case LogLevel.TRACE:
                return 0;
            case LogLevel.DEBUG:
                return 1;
            case LogLevel.INFO:
                return 2;
            case LogLevel.WARN:
                return 3;
            case LogLevel.ERROR:
                return 4;
        }
    }
}
const getInstance = () => {
    return Telemetry.getInstance();
};
exports.getInstance = getInstance;
const init = (props) => {
    new Telemetry(props).init();
};
exports.init = init;
const shutdown = () => {
    var _a;
    (_a = (0, exports.getInstance)()) === null || _a === void 0 ? void 0 : _a.shutdown();
};
exports.shutdown = shutdown;
