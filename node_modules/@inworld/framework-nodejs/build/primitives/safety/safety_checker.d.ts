import { TextEmbedder } from '../embedder';
import { CheckSafetyInputInterface, CheckSafetyResponseInterface, SafetyCheckerCreationConfig, SafetyConfigInterface } from './types';
/**
 * Implementation of content safety checking functionality.
 *
 * Uses native bindings to perform safety checks on text content.
 */
export declare class SafetyChecker {
    private nativeSafetyChecker;
    private embedder;
    /**
     * Creates a new instance of SafetyChecker.
     * @param embedder Text embedder for semantic understanding
     * @param config Configuration for safety checker creation
     * @returns Promise resolving to a new SafetyChecker instance
     * @throws InworldError If creation fails
     * @internal
     */
    static create(embedder: TextEmbedder, config: SafetyCheckerCreationConfig): Promise<SafetyChecker>;
    /**
     * @internal
     */
    private constructor();
    /**
     * Creates the native safety checker instance.
     * @private
     * @param config Creation configuration
     * @returns Promise resolving to native checker instance
     * @throws InworldError If native creation fails
     */
    private createNativeSafetyChecker;
    /**
     * Checks the safety of input text content.
     * @param input Text content to check
     * @param config Optional runtime safety configuration
     * @returns Promise resolving to safety check results
     * @throws InworldError If check fails or input is invalid
     */
    checkSafety(input: CheckSafetyInputInterface, config?: SafetyConfigInterface): Promise<CheckSafetyResponseInterface>;
    /**
     * Creates a native safety configuration.
     * @private
     * @param config Safety configuration
     * @returns Native configuration object
     * @throws InworldError If creation fails
     */
    private createNativeSafetyConfig;
    /**
     * Converts native response to TypeScript interface.
     * @private
     * @param response Native response object
     * @returns Converted response
     */
    private convertToCheckSafetyResponse;
    /**
     * Cleans up resources used by the safety checker.
     */
    destroy(): void;
}
