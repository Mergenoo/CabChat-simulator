"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SafetyCheckerFactory = void 0;
const error_1 = require("../../common/error");
const safety_checker_1 = require("./safety_checker");
/**
 * Factory class for creating safety checker instances.
 *
 * This factory class provides methods for creating instances of safety checkers
 * with various configurations and weights.
 */
class SafetyCheckerFactory {
    /**
     * Creates a new safety checker instance.
     * @param embedder Text embedder for semantic understanding
     * @param config Configuration for safety checker creation
     * @returns Promise resolving to a new safety checker instance
     * @throws InworldError If creation fails
     */
    static create(embedder, config) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield safety_checker_1.SafetyChecker.create(embedder, config);
            }
            catch (err) {
                throw new error_1.InworldError('Failed to create SafetyChecker', { error: err });
            }
        });
    }
}
exports.SafetyCheckerFactory = SafetyCheckerFactory;
