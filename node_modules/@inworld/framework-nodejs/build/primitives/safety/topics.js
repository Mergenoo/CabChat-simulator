"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DetectedTopic = exports.Topic = void 0;
const error_1 = require("../../common/error");
const expose_binary_1 = require("../../expose_binary");
const types_1 = require("./types");
/**
 * Class for topic detection
 * @internal
 */
class Topic {
    constructor(external) {
        this.external = external;
        if (this.external) {
            this.topicName = this.getType();
        }
    }
    getType() {
        const topicId = expose_binary_1.DetectedTopicFunctions.getTopicName(this.external);
        const topicName = Topic.topicNameMap.get(topicId);
        if (topicName === undefined) {
            throw new error_1.InworldError('Invalid topic name', { topicName: topicId });
        }
        return topicName;
    }
    /**
     * Converts a TopicName enum value to its corresponding integer ID
     * @param topicName The topic name to convert
     * @returns The integer ID for the topic
     * @throws InworldError If the topic name is invalid
     */
    static getTopicId(topicName) {
        const topicId = Topic.topicIdMap.get(topicName);
        if (topicId === undefined) {
            throw new error_1.InworldError('Invalid topic name', { topicName });
        }
        return topicId;
    }
    getExternal() {
        return this.external;
    }
}
exports.Topic = Topic;
// Map from integer to TopicName
Topic.topicNameMap = new Map([
    [0, types_1.TopicName.Politics],
    [1, types_1.TopicName.SubstanceUse],
    [2, types_1.TopicName.Religion],
    [3, types_1.TopicName.UnconditionalSelfHarm],
    [4, types_1.TopicName.UnconditionalSexualMinors],
    [5, types_1.TopicName.UnconditionalHateGroup],
    [6, types_1.TopicName.AdultSexual],
    [7, types_1.TopicName.Violence],
    [8, types_1.TopicName.Alcohol],
    [9, types_1.TopicName.Profanity],
]);
// Map from TopicName to integer (reverse mapping)
Topic.topicIdMap = new Map(Array.from(Topic.topicNameMap.entries()).map(([id, name]) => [name, id]));
/**
 * @class DetectedTopic
 * Represents a detected topic in the content with its confidence score.
 * @internal
 */
class DetectedTopic extends Topic {
    constructor(...args) {
        if (args.length === 2) {
            super(null);
            this.topicName = args[0];
            this.confidence = args[1];
        }
        else if (args.length === 1) {
            super(args[0]);
            this.confidence = expose_binary_1.DetectedTopicFunctions.getConfidence(args[0]);
        }
        else {
            throw new error_1.InworldError('DetectedTopic: Invalid arguments');
        }
    }
}
exports.DetectedTopic = DetectedTopic;
