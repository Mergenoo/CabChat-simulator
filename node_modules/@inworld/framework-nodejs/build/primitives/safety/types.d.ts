/**
 * @interface CheckSafetyInputInterface
 * Input for safety checking operation.
 */
export interface CheckSafetyInputInterface {
    /** The text content to check */
    input: string;
}
/**
 * @enum TopicName
 * Enumeration of content topics that can be detected and filtered.
 */
export declare enum TopicName {
    /** Politics and political discussions */
    Politics = "Politics",
    /** Content related to substance use and drugs */
    SubstanceUse = "SubstanceUse",
    /** Religious content and discussions */
    Religion = "Religion",
    /** Content related to self-harm, suicide, or self-injury */
    UnconditionalSelfHarm = "UnconditionalSelfHarm",
    /** Inappropriate content involving minors */
    UnconditionalSexualMinors = "UnconditionalSexualMinors",
    /** Content promoting hate groups or extremist organizations */
    UnconditionalHateGroup = "UnconditionalHateGroup",
    /** Adult sexual content */
    AdultSexual = "AdultSexual",
    /** Violent content, descriptions of harm, or threatening language */
    Violence = "Violence",
    /** Content related to alcohol consumption */
    Alcohol = "Alcohol",
    /** Profane language, swear words, and obscenities */
    Profanity = "Profanity"
}
/**
 * @interface SafetyCheckerCreationConfig
 * Configuration for creating a safety checker instance.
 */
export interface SafetyCheckerCreationConfig {
    /**
     * Path to model weights for logistic regression classifiers.
     * The factory will load weights from this path for the specified topics.
     */
    modelWeightsPath: string;
}
/**
 * @interface CheckSafetyResponseInterface
 * Response from a safety check operation.
 */
export interface CheckSafetyResponseInterface {
    /** Whether the content is considered safe based on configured thresholds */
    isSafe: boolean;
    /** List of topics detected in the content */
    detectedTopics: DetectedTopicInterface[];
}
/**
 * @interface BasicTopicInterface
 * Represents a basic topic with its name.
 */
export interface BasicTopicInterface {
    /** The type of topic detected */
    topicName: TopicName;
}
/**
 * @interface ThresholdTopicInterface
 * Configuration for topic detection threshold.
 */
export interface ThresholdTopicInterface extends BasicTopicInterface {
    /** Threshold value between 0 and 1. Content with confidence above this is considered unsafe */
    threshold: number;
}
/**
 * @interface DetectedTopicInterface
 * Represents a detected topic in the content with its confidence score.
 */
export interface DetectedTopicInterface extends BasicTopicInterface {
    /** Confidence score between 0 and 1 */
    confidence: number;
}
/**
 * @interface SafetyConfigInterface
 * Runtime configuration for safety checking.
 */
export interface SafetyConfigInterface {
    /** List of topics to check with their respective thresholds */
    forbiddenTopics: ThresholdTopicInterface[];
}
