"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VADFactory = void 0;
const error_1 = require("../../common/error");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
const vad_1 = require("./vad");
/**
 * Factory class for creating VAD (Voice Activity Detection) instances.
 * Provides methods to create voice activity detection models.
 */
class VADFactory {
    /**
     * Creates a local VAD instance.
     *
     * @param config - Configuration for the local VAD
     * @returns Promise resolving to a new VAD instance
     */
    static createLocal(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let vadConfig = null;
            let vad = null;
            try {
                vadConfig = new config_1.LocalVADConfig(config);
                vad = yield this.create(vadConfig);
            }
            finally {
                vadConfig === null || vadConfig === void 0 ? void 0 : vadConfig.destroy();
            }
            return vad;
        });
    }
    /**
     * Internal method to create a VAD instance from a config.
     *
     * @param config - VAD configuration
     * @returns Promise resolving to a new VAD instance
     * @throws InworldError if VAD creation fails
     * @private
     */
    static create(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let status;
            let vad;
            let factory;
            try {
                factory = expose_binary_1.VADFactoryFunctions.new();
                status = yield expose_binary_1.VADFactoryFunctions.createVAD(factory, config.getExternal());
                if (!expose_binary_1.StatusOrVADInterfaceFunctions.isOK(status)) {
                    throw new error_1.InworldError('Failed to create VAD', (0, helpers_1.getStatus)(status));
                }
                vad = new vad_1.VAD(expose_binary_1.StatusOrVADInterfaceFunctions.getValue(status));
            }
            finally {
                if (status) {
                    expose_binary_1.StatusOrVADInterfaceFunctions.delete(status);
                }
                if (factory) {
                    expose_binary_1.VADFactoryFunctions.delete(factory);
                }
            }
            return vad;
        });
    }
}
exports.VADFactory = VADFactory;
