"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VAD = void 0;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const audio_chunk_1 = require("../../core/audio_chunk");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
/**
 * Class for Voice Activity Detection (VAD).
 * Provides functionality to detect voice/speech in audio data.
 */
class VAD {
    /**
     * Creates a new VAD instance.
     *
     * @param vad - External reference to the native VAD implementation
     * @internal
     */
    constructor(vad) {
        this.vad = vad;
    }
    /**
     * Returns the external reference to the native VAD implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.vad;
    }
    /**
     * Detects if voice activity is present in the provided audio data.
     *
     * @param audio - Audio data to analyze
     * @param speechThreshold - Optional threshold for speech detection sensitivity
     * @returns Promise resolving to a detection result.
     * The result is representing the sample index where speech is detected, or `-1` if
     * no speech is found.
     * @throws InworldError if detection fails
     */
    detectVoiceActivity(audio, speechThreshold) {
        return __awaiter(this, void 0, void 0, function* () {
            let audioChunk = null;
            let vadConfig = null;
            let detectionStatus = null;
            try {
                audioChunk = new audio_chunk_1.AudioChunk(audio);
                vadConfig = new config_1.VoiceActivityDetectionConfig(speechThreshold);
                detectionStatus = yield expose_binary_1.VADInterfaceFunctions.detectVoiceActivity(this.vad, audioChunk.getExternal(), vadConfig.getExternal());
                if (!expose_binary_1.StatusOrIntFunctions.isOK(detectionStatus)) {
                    throw new common_1.InworldError('Failed to detect voice activity', (0, helpers_1.getStatus)(detectionStatus));
                }
                return expose_binary_1.StatusOrIntFunctions.getValue(detectionStatus);
            }
            finally {
                audioChunk === null || audioChunk === void 0 ? void 0 : audioChunk.destroy();
                vadConfig === null || vadConfig === void 0 ? void 0 : vadConfig.destroy();
                if (detectionStatus) {
                    expose_binary_1.StatusOrIntFunctions.delete(detectionStatus);
                }
            }
        });
    }
    /**
     * Cleans up resources associated with this VAD instance.
     */
    destroy() {
        if (this.vad) {
            expose_binary_1.VADInterfaceFunctions.delete(this.vad);
            this.vad = null;
        }
    }
}
exports.VAD = VAD;
