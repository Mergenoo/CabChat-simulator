"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalVADConfig = exports.VoiceActivityDetectionConfig = void 0;
const expose_binary_1 = require("../../expose_binary");
/**
 * Class for configuring voice activity detection parameters.
 * Controls the sensitivity and behavior of voice detection.
 * @internal
 */
class VoiceActivityDetectionConfig {
    /**
     * Creates a new VoiceActivityDetectionConfig instance.
     *
     * @param speechThreshold - Optional threshold for speech detection sensitivity (higher values increase sensitivity)
     */
    constructor(speechThreshold) {
        this.external = expose_binary_1.VoiceActivityDetectionConfigFunctions.new();
        if (speechThreshold != null) {
            expose_binary_1.VoiceActivityDetectionConfigFunctions.setSpeechThreshold(this.external, speechThreshold);
        }
    }
    /**
     * Gets the current speech threshold setting.
     *
     * @returns Current speech threshold value
     */
    getSpeechThreshold() {
        return expose_binary_1.VoiceActivityDetectionConfigFunctions.getSpeechThreshold(this.external);
    }
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.VoiceActivityDetectionConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.VoiceActivityDetectionConfig = VoiceActivityDetectionConfig;
/**
 * Class for configuring local VAD execution.
 * Manages settings for running voice activity detection models on local hardware.
 * @internal
 */
class LocalVADConfig {
    /**
     * Creates a new LocalVADConfig instance.
     *
     * @param config - Configuration parameters for local VAD
     * @internal
     */
    constructor(config) {
        this.external = expose_binary_1.LocalVADConfigFunctions.new();
        if (config.modelPath) {
            expose_binary_1.LocalVADConfigFunctions.setModelPath(this.external, config.modelPath);
        }
        if (config.device) {
            expose_binary_1.LocalVADConfigFunctions.setDevice(this.external, config.device.getExternal());
        }
        if (config.speechThreshold) {
            const defaultConfig = new VoiceActivityDetectionConfig(config.speechThreshold);
            expose_binary_1.LocalVADConfigFunctions.setDefaultConfig(this.external, defaultConfig.getExternal());
            this.config = defaultConfig;
        }
    }
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy() {
        if (this.config) {
            this.config.destroy();
            this.config = null;
        }
        if (this.external) {
            expose_binary_1.LocalVADConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.LocalVADConfig = LocalVADConfig;
