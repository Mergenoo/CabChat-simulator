"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalLLMConfig = exports.RemoteLLMConfig = void 0;
const common_1 = require("../../common");
const expose_binary_1 = require("../../expose_binary");
/**
 * Class for configuring remote LLM services.
 * Manages connection settings and authentication for cloud-based LLMs.
 * @internal
 */
class RemoteLLMConfig {
    /**
     * Creates a new RemoteLLMConfig instance.
     *
     * @param config - Configuration parameters for remote LLM
     */
    constructor(config) {
        var _a;
        this.external = expose_binary_1.RemoteLLMConfigFunctions.new();
        if (config.apiKey) {
            expose_binary_1.RemoteLLMConfigFunctions.setAPIKey(this.getExternal(), config.apiKey);
        }
        if (config.modelName) {
            expose_binary_1.RemoteLLMConfigFunctions.setModelName(this.getExternal(), config.modelName);
        }
        expose_binary_1.RemoteLLMConfigFunctions.setProvider(this.getExternal(), (_a = config.provider) !== null && _a !== void 0 ? _a : common_1.DEFAULT_PROVIDER);
    }
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.RemoteLLMConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.RemoteLLMConfig = RemoteLLMConfig;
/**
 * Class for configuring local LLM execution.
 * Manages settings for running models on local hardware.
 * @internal
 */
class LocalLLMConfig {
    /**
     * Creates a new LocalLLMConfig instance.
     *
     * @param config - Configuration parameters for local LLM
     */
    constructor(config) {
        this.external = expose_binary_1.LocalLLMConfigFunctions.new();
        if (config.modelPath) {
            expose_binary_1.LocalLLMConfigFunctions.setModelPath(this.getExternal(), config.modelPath);
        }
        if (config.device) {
            expose_binary_1.LocalLLMConfigFunctions.setDevice(this.getExternal(), config.device.getExternal());
        }
    }
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.LocalLLMConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.LocalLLMConfig = LocalLLMConfig;
