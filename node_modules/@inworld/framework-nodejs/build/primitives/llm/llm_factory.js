"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLMFactory = void 0;
const error_1 = require("../../common/error");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
const llm_1 = require("./llm");
/**
 * Factory class for creating LLM instances.
 * Provides methods to create both local and remote language models.
 */
class LLMFactory {
    /**
     * Creates a local LLM instance.
     *
     * @param config - Configuration for the local LLM
     * @returns Promise resolving to a new LLM instance
     */
    static createLocal(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let llmConfig = null;
            let llm = null;
            try {
                llmConfig = new config_1.LocalLLMConfig(config);
                llm = yield this.create(llmConfig);
            }
            finally {
                llmConfig === null || llmConfig === void 0 ? void 0 : llmConfig.destroy();
            }
            return llm;
        });
    }
    /**
     * Creates a remote LLM instance.
     *
     * @param config - Configuration for the remote LLM
     * @returns Promise resolving to a new LLM instance
     */
    static createRemote(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let llmConfig = null;
            let llm = null;
            try {
                llmConfig = new config_1.RemoteLLMConfig(config);
                llm = yield this.create(llmConfig);
            }
            finally {
                llmConfig === null || llmConfig === void 0 ? void 0 : llmConfig.destroy();
            }
            return llm;
        });
    }
    /**
     * Internal method to create an LLM instance from a config.
     *
     * @param config - LLM configuration (local or remote)
     * @returns Promise resolving to a new LLM instance
     * @throws InworldError if LLM creation fails
     * @private
     */
    static create(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let status;
            let llm;
            try {
                const factory = expose_binary_1.LLMFactoryFunctions.new();
                const createFn = config instanceof config_1.RemoteLLMConfig
                    ? expose_binary_1.LLMInterfaceFunctions.createRemote
                    : expose_binary_1.LLMInterfaceFunctions.createLocal;
                status = yield createFn(factory, config.getExternal());
                if (!expose_binary_1.LLMInterfaceFunctions.isOK(status)) {
                    throw new error_1.InworldError('Failed to create LLM', (0, helpers_1.getStatus)(status));
                }
                llm = new llm_1.LLM(expose_binary_1.LLMInterfaceFunctions.get(status), factory);
            }
            finally {
                if (status) {
                    expose_binary_1.LLMInterfaceFunctions.delete(status);
                }
            }
            return llm;
        });
    }
}
exports.LLMFactory = LLMFactory;
