import { LocalLLMConfigInterface, RemoteLLMConfigInterface } from './config';
import { LLM } from './llm';
/**
 * Factory class for creating LLM instances.
 * Provides methods to create both local and remote language models.
 */
export declare class LLMFactory {
    /**
     * Creates a local LLM instance.
     *
     * @param config - Configuration for the local LLM
     * @returns Promise resolving to a new LLM instance
     */
    static createLocal(config: LocalLLMConfigInterface): Promise<LLM>;
    /**
     * Creates a remote LLM instance.
     *
     * @param config - Configuration for the remote LLM
     * @returns Promise resolving to a new LLM instance
     */
    static createRemote(config: RemoteLLMConfigInterface): Promise<LLM>;
    /**
     * Internal method to create an LLM instance from a config.
     *
     * @param config - LLM configuration (local or remote)
     * @returns Promise resolving to a new LLM instance
     * @throws InworldError if LLM creation fails
     * @private
     */
    private static create;
}
