import { Device } from '../../core';
/**
 * Interface for configuring remote LLM services.
 */
export interface RemoteLLMConfigInterface {
    /** API key for authentication with the remote service */
    apiKey: string;
    /** Name of the model to use */
    modelName: string;
    /**
     * Provider name (defaults to DEFAULT_PROVIDER if not specified).
     * @default inworld
     */
    provider?: string;
}
/**
 * Interface for configuring local LLM execution.
 */
export interface LocalLLMConfigInterface {
    /** Path to the local model file */
    modelPath: string;
    /** Computation device to use for model execution */
    device?: Device;
}
/**
 * Union type for LLM configuration options.
 */
export type LLMConfigInterface = RemoteLLMConfigInterface | LocalLLMConfigInterface;
/**
 * Class for configuring remote LLM services.
 * Manages connection settings and authentication for cloud-based LLMs.
 * @internal
 */
export declare class RemoteLLMConfig {
    private external;
    /**
     * Creates a new RemoteLLMConfig instance.
     *
     * @param config - Configuration parameters for remote LLM
     */
    constructor(config: RemoteLLMConfigInterface);
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy(): void;
}
/**
 * Class for configuring local LLM execution.
 * Manages settings for running models on local hardware.
 * @internal
 */
export declare class LocalLLMConfig {
    private external;
    /**
     * Creates a new LocalLLMConfig instance.
     *
     * @param config - Configuration parameters for local LLM
     */
    constructor(config: LocalLLMConfigInterface);
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy(): void;
}
