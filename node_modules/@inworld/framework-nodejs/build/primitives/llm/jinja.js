"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderJinja = renderJinja;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
/**
 * Renders a Jinja template with provided properties asynchronously.
 *
 * @param prompt - The Jinja template string to render
 * @param promptProps - Properties to use for template rendering, either as an object or JSON string
 * @returns Promise resolving to the rendered template string
 * @throws InworldError if the template rendering fails or prompt is missing
 */
function renderJinja(prompt, promptProps) {
    return __awaiter(this, void 0, void 0, function* () {
        const parsedArgs = parseArgs(prompt, promptProps);
        if (!parsedArgs.promptProps) {
            return parsedArgs.prompt;
        }
        const result = yield expose_binary_1.LLMJinjaInterfaceFunctions.renderJinja(parsedArgs.prompt, parsedArgs.promptProps);
        checkStatus(result, prompt, promptProps);
        return expose_binary_1.InworldStringFunctions.get(result);
    });
}
/**
 * Parses and validates the arguments for Jinja template rendering.
 *
 * @param prompt - The Jinja template string to render
 * @param promptProps - Properties to use for template rendering
 * @returns Object containing validated prompt and promptProps
 * @throws InworldError if prompt is missing or promptProps is invalid
 * @private
 */
const parseArgs = (prompt, promptProps) => {
    if (!prompt) {
        throw new common_1.InworldError('Prompt is required');
    }
    if (!promptProps) {
        return { prompt, promptProps };
    }
    let props = promptProps;
    if (typeof promptProps === 'string') {
        try {
            JSON.parse(promptProps);
        }
        catch (_a) {
            throw new common_1.InworldError('Failed to parse prompt properties. Ensure it is a valid JSON string');
        }
    }
    else {
        props = JSON.stringify(promptProps);
    }
    return { prompt, promptProps: props };
};
/**
 * Checks the status of Jinja template rendering result.
 *
 * @param result - The result from the template rendering operation
 * @param prompt - The original prompt string
 * @param promptProps - The properties used for rendering
 * @throws InworldError if the template rendering failed
 * @private
 */
const checkStatus = (result, prompt, promptProps) => {
    if (!expose_binary_1.InworldStringFunctions.isOK(result)) {
        throw new common_1.InworldError('Failed to render Jinja template', Object.assign(Object.assign({}, (0, helpers_1.getStatus)(result)), { prompt,
            promptProps }));
    }
};
