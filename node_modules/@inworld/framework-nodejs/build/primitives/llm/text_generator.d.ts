/**
 * Interface for configuring text generation behavior.
 */
export interface TextGenerationConfigInterface {
    /** Maximum number of new tokens to generate */
    maxNewTokens?: number;
    /** Maximum length of the prompt to process */
    maxPromptLength?: number;
    /** Penalty to apply for token repetition (higher values discourage repetition) */
    repetitionPenalty?: number;
    /** Top-p sampling parameter (controls diversity of generated text) */
    topP?: number;
    /** Temperature parameter (controls randomness of generated text) */
    temperature?: number;
    /** Penalty for frequency of token appearance (higher values reduce common words) */
    frequencyPenalty?: number;
    /** Penalty for presence of tokens (higher values reduce repeated content) */
    presencePenalty?: number;
    /** Sequences that will cause text generation to stop when encountered */
    stopSequences?: string[];
}
/**
 * Class for configuring text generation behavior.
 * Provides fine-grained control over how language models generate text.
 * @internal
 */
export declare class TextGenerationConfig {
    private external;
    private stopSequences;
    /**
     * Creates a new TextGenerationConfig instance.
     *
     * @param config - Configuration parameters for text generation
     */
    constructor(config: TextGenerationConfigInterface);
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy(): void;
}
