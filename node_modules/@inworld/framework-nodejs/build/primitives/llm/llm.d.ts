import { TextStreamIterator } from '../../common/stream';
import { ExternalReference } from '../../common/types';
import { LLMMessageInterface } from './messages';
import { TextGenerationConfigInterface } from './text_generator';
/**
 * Class for interacting with Language Models (LLMs).
 * Provides functionality to generate text using prompts or message sequences.
 */
export declare class LLM {
    private factory;
    private llm;
    /**
     * Creates a new LLM instance.
     *
     * @param llm - External reference to the native LLM implementation
     * @param factory - External reference to the LLM factory
     * @internal
     */
    constructor(llm: ExternalReference, factory: ExternalReference);
    /**
     * Generates text based on a prompt or message sequence.
     *
     * @param props - Configuration for text generation
     * @param props.prompt - Optional text prompt to use for generation
     * @param props.messages - Optional array of message objects for chat-like interactions
     * @param props.config - Configuration parameters for text generation
     * @returns A stream iterator for the generated text
     * @throws InworldError if neither prompt nor messages are provided, or generation fails
     */
    generateText(props: {
        prompt?: string;
        messages?: LLMMessageInterface[];
        config: TextGenerationConfigInterface;
    }): Promise<TextStreamIterator>;
    /**
     * Returns the external reference to the native LLM implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this LLM.
     */
    destroy(): void;
    /**
     * Builds the generate status object for text generation.
     *
     * @param props - Configuration for text generation
     * @returns Promise resolving to the generate status object
     * @private
     */
    private buildGenerateStatus;
    /**
     * Creates a stream iterator for the generated text.
     *
     * @param inputStream - External reference to the input stream
     * @param messages - Optional messages object
     * @returns Stream iterator object
     * @private
     */
    private streamIterator;
}
