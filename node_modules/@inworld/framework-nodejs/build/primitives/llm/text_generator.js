"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextGenerationConfig = void 0;
const common_1 = require("../../common");
const expose_binary_1 = require("../../expose_binary");
/**
 * Class for configuring text generation behavior.
 * Provides fine-grained control over how language models generate text.
 * @internal
 */
class TextGenerationConfig {
    /**
     * Creates a new TextGenerationConfig instance.
     *
     * @param config - Configuration parameters for text generation
     */
    constructor(config) {
        this.external = expose_binary_1.TextConfigFunctions.new();
        if (config.maxNewTokens !== undefined) {
            expose_binary_1.TextConfigFunctions.setMaxTokens(this.getExternal(), config.maxNewTokens);
        }
        if (config.maxPromptLength !== undefined) {
            expose_binary_1.TextConfigFunctions.setMaxPrompt(this.getExternal(), config.maxPromptLength);
        }
        if (config.repetitionPenalty !== undefined) {
            expose_binary_1.TextConfigFunctions.setRepetitionPenalty(this.getExternal(), config.repetitionPenalty);
        }
        if (config.topP !== undefined) {
            expose_binary_1.TextConfigFunctions.setTopP(this.getExternal(), config.topP);
        }
        if (config.temperature !== undefined) {
            expose_binary_1.TextConfigFunctions.setTemperature(this.getExternal(), config.temperature);
        }
        if (config.frequencyPenalty !== undefined) {
            expose_binary_1.TextConfigFunctions.setFrequencyPenalty(this.getExternal(), config.frequencyPenalty);
        }
        if (config.presencePenalty !== undefined) {
            expose_binary_1.TextConfigFunctions.setPresencePenalty(this.getExternal(), config.presencePenalty);
        }
        if (config.stopSequences !== undefined) {
            this.stopSequences = new common_1.VectorString(config.stopSequences);
            expose_binary_1.TextConfigFunctions.setStopSequences(this.getExternal(), this.stopSequences.getExternal());
        }
    }
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy() {
        var _a;
        (_a = this.stopSequences) === null || _a === void 0 ? void 0 : _a.destroy();
        if (this.external) {
            expose_binary_1.TextConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.TextGenerationConfig = TextGenerationConfig;
