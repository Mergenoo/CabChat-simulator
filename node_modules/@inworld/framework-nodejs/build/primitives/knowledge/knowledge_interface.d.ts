import { ExternalReference } from '../../common/types';
import { File, KnowledgeGetInput } from './types';
/**
 * @interface KnowledgeInterface
 * Interface for knowledge management
 * @internal
 */
export interface KnowledgeInterface {
    /**
     * Gets knowledge records from the knowledge base
     * @param knowledgeGetInput Input parameters containing knowledge IDs and event history
     * @returns Array of strings containing knowledge records
     * @throws InworldError If retrieval fails
     */
    getKnowledge(knowledgeGetInput: KnowledgeGetInput): Promise<string[]>;
    /**
     * Compiles knowledge records or file into the knowledge base
     * @param knowledgeId Unique ID for the knowledge (must start with 'knowledge/' prefix)
     * @param recordsOrFile Text records or file to compile
     * @returns Array of compiled knowledge records
     * @throws InworldError If compilation fails
     */
    compileKnowledge(knowledgeId: string, recordsOrFile: string[] | File): Promise<string[]>;
    /**
     * Removes knowledge from the knowledge base
     * @param knowledgeId ID of the knowledge to remove
     * @throws InworldError If removal fails
     */
    removeKnowledge(knowledgeId: string): Promise<void>;
    /**
     * Gets the native object reference
     * @returns Native object reference
     */
    getExternal(): ExternalReference;
    /**
     * Destroys the native object
     */
    destroy(): void;
}
