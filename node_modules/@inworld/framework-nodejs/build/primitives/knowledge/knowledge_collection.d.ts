import { ExternalReference } from '../../common/types';
import { TextEmbedder } from '../embedder/embedder';
/**
 * Class representing a collection of knowledge records.
 * Manages a set of knowledge entries with their embeddings for retrieval.
 */
export declare class KnowledgeCollection {
    private external;
    private factory;
    /**
     * Creates a new KnowledgeCollection instance.
     *
     * @param factory - External reference to the factory that created this collection
     * @param embedder - Text embedder for generating embeddings
     * @param texts - Initial knowledge text entries
     * @internal
     */
    constructor(factory: ExternalReference, embedder: TextEmbedder, texts: string[]);
    /**
     * Sets or updates the knowledge records in this collection.
     * Creates embeddings for each knowledge record.
     *
     * @param embedder - Text embedder to use for generating embeddings
     * @param knowledge - Array of knowledge text entries
     */
    setKnowledgeRecords(embedder: TextEmbedder, knowledge: string[]): Promise<void>;
    /**
     * Returns the external reference to the native collection implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this knowledge collection.
     */
    destroy(): void;
}
