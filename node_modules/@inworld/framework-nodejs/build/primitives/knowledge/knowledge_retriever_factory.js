"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeRetrieverFactory = void 0;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const knowledge_retriever_1 = require("./knowledge_retriever");
/**
 * Factory class for creating KnowledgeRetriever instances.
 * Provides methods to create knowledge retrievers with embedding capabilities.
 */
class KnowledgeRetrieverFactory {
    /**
     * Creates a new KnowledgeRetriever instance.
     *
     * @param embedder - Text embedder to use for embedding-based retrieval
     * @returns Promise resolving to a new KnowledgeRetriever instance
     * @throws InworldError if creation fails
     */
    static create(embedder) {
        return __awaiter(this, void 0, void 0, function* () {
            let factory;
            let statusOrRetriever;
            let retriever;
            try {
                factory = expose_binary_1.KnowledgeRetrieverFactoryFunctions.new();
                statusOrRetriever =
                    yield expose_binary_1.KnowledgeRetrieverFactoryFunctions.createKnowledgeRetriever(factory, embedder.getExternal());
                if (!expose_binary_1.StatusOrKnowledgeRetrieverInterfaceFunctions.isOK(statusOrRetriever)) {
                    throw new common_1.InworldError('Failed to create knowledge retriever', (0, helpers_1.getStatus)(statusOrRetriever.status));
                }
                retriever =
                    expose_binary_1.StatusOrKnowledgeRetrieverInterfaceFunctions.getValue(statusOrRetriever);
            }
            finally {
                if (statusOrRetriever) {
                    expose_binary_1.StatusOrKnowledgeRetrieverInterfaceFunctions.delete(statusOrRetriever);
                }
            }
            return new knowledge_retriever_1.KnowledgeRetriever(retriever, factory);
        });
    }
}
exports.KnowledgeRetrieverFactory = KnowledgeRetrieverFactory;
