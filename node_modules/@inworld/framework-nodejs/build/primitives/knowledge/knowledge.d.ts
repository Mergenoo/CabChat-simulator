import { ExternalReference } from '../../common/types';
import { KnowledgeInterface } from './knowledge_interface';
import { File, KnowledgeGetInput } from './types';
/**
 * Class for knowledge management
 * Implementation of KnowledgeInterface, provides access to knowledge management functionality
 */
export declare class Knowledge implements KnowledgeInterface {
    private external;
    private factory;
    /**
     * Creates a new Knowledge instance
     * @param external Native object reference
     * @internal
     */
    constructor(external: ExternalReference, factory: ExternalReference);
    /**
     * Retrieves knowledge from the knowledge base
     * @param knowledgeGetInput Input parameters containing knowledge IDs and event history
     * @returns Array of strings containing retrieved knowledge data as individual records
     * @throws InworldError If retrieval fails
     */
    getKnowledge(knowledgeGetInput: KnowledgeGetInput): Promise<string[]>;
    /**
     * Compiles knowledge into the knowledge base
     * @param knowledgeId ID of the knowledge to compile (must start with 'knowledge/' prefix)
     * @param recordsOrFile Records or file to be compiled
     * @returns Array of strings containing the resulting knowledge records
     * @throws InworldError If compilation fails
     */
    compileKnowledge(knowledgeId: string, recordsOrFile: string[] | File): Promise<string[]>;
    /**
     * Removes knowledge from the knowledge base
     * @param knowledgeId ID of the knowledge to remove (must start with 'knowledge/' prefix)
     * @throws InworldError If removal fails
     */
    removeKnowledge(knowledgeId: string): Promise<void>;
    /**
     * Compiles knowledge into the knowledge base from records
     * @param knowledgeId ID of the knowledge to compile (must start with 'knowledge/' prefix)
     * @param records Records to be compiled into the knowledge base
     * @returns Array of strings containing the resulting knowledge records
     * @throws InworldError If compilation fails
     */
    private compileKnowledgeFromRecords;
    /**
     * Compiles knowledge into the knowledge base from a file
     * @param knowledgeId ID of the knowledge to compile (must start with 'knowledge/' prefix)
     * @param file File object containing the content to be compiled
     * @returns Array of strings containing the resulting knowledge records
     * @throws InworldError If compilation fails
     */
    private compileKnowledgeFromFile;
    /**
     * Converts FileType enum string values to numeric values expected by C++ backend
     * @param fileType The FileType enum value
     * @returns Numeric representation expected by C++ (0 for PDF, 1 for TXT)
     * @private
     */
    private convertFileTypeToNumber;
    /**
     * Gets the reference to the native object
     * @returns Native object reference
     * @internal
     */
    getExternal(): ExternalReference;
    /**
     * Destroys the native object
     */
    destroy(): void;
}
