import { RetrievalConfigInterface } from '../../common/types';
import { History } from '../../core/history';
/**
 * Represents input parameters for retrieving knowledge
 */
export interface KnowledgeGetInput {
    /** IDs of the knowledge collections (must start with 'knowledge/' prefix) */
    ids: string[];
    /** History of events */
    eventHistory: History;
}
/**
 * File content representation
 * @internal
 */
export interface FileContent {
    /** File content as bytes (UTF-8 encoding) */
    bytes: Uint8Array;
}
/**
 * Enum for file types supported by knowledge system
 */
export declare enum FileType {
    PDF = "PDF",
    TXT = "TXT"
}
/**
 * Represents a file in the knowledge system
 * @internal
 */
export interface File {
    /** Content of the file */
    content: FileContent;
    /** Type of the file */
    type: FileType;
}
/**
 * Configuration for retrieving knowledge
 */
export interface KnowledgeGetConfig {
    /** Retrieval configuration */
    retrievalConfig: RetrievalConfigInterface;
}
/**
 * Configuration for parsing documents into chunks
 */
export interface ParsingConfig {
    /** Maximum number of characters per chunk */
    maxCharsPerChunk: number;
    /** Maximum number of chunks per document */
    maxChunksPerDocument: number;
}
/**
 * Configuration for compiling knowledge
 */
export interface KnowledgeCompileConfig {
    /** Parsing configuration */
    parsingConfig: ParsingConfig;
}
/**
 * Configuration for local knowledge system
 */
export interface LocalKnowledgeConfigInterface {
    /** Configuration for knowledge retrieval */
    knowledgeGetConfig: KnowledgeGetConfig;
    /** Configuration for knowledge compilation */
    knowledgeCompileConfig: KnowledgeCompileConfig;
}
/**
 * Configuration for remote knowledge system
 */
export interface RemoteKnowledgeConfigInterface {
    /** Configuration for knowledge compilation */
    knowledgeCompileConfig: KnowledgeCompileConfig;
    /** Configuration for knowledge retrieval (optional) */
    knowledgeGetConfig?: KnowledgeGetConfig;
    /** Inworld API key for authentication */
    apiKey: string;
}
/**
 * Knowledge creation configuration that can be either local or remote
 */
export type KnowledgeCreationConfig = {
    type: 'local';
    config: LocalKnowledgeConfigInterface;
} | {
    type: 'remote';
    config: RemoteKnowledgeConfigInterface;
};
