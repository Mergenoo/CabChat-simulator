import { ExternalReference, RetrievalConfigInterface } from '../../common/types';
import { History } from '../../core';
import { KnowledgeCollection } from './knowledge_collection';
/**
 * Interface for knowledge retrieval parameters.
 */
export interface RetrieveKnowledgeInterface {
    /** Collections of knowledge to search within */
    collections: KnowledgeCollection[];
    /** Conversation history for context-aware retrieval */
    history: History;
    /** Optional retrieval configuration */
    config?: RetrievalConfigInterface;
}
/**
 * Class for retrieving knowledge from knowledge collections.
 * Provides functionality to find relevant knowledge based on conversation context.
 */
export declare class KnowledgeRetriever {
    private retriever;
    private factory;
    /**
     * Creates a new KnowledgeRetriever instance.
     *
     * @param retriever - External reference to the native retriever implementation
     * @param factory - External reference to the factory that created this retriever
     * @internal
     */
    constructor(retriever: ExternalReference, factory: ExternalReference);
    /**
     * Retrieves relevant knowledge based on conversation history.
     *
     * @param params - Parameters for knowledge retrieval
     * @returns Promise resolving to array of knowledge record strings
     * @throws InworldError if retrieval fails
     */
    retrieveKnowledge(params: RetrieveKnowledgeInterface): Promise<string[]>;
    /**
     * Returns the external reference to the native retriever implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this knowledge retriever.
     */
    destroy(): void;
}
