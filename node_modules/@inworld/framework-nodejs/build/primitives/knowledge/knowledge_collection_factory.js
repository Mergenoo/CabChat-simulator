"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeCollectionFactory = void 0;
const expose_binary_1 = require("../../expose_binary");
const knowledge_collection_1 = require("./knowledge_collection");
/**
 * Factory class for creating KnowledgeCollection instances.
 * Provides functionality to create and initialize knowledge collections.
 */
class KnowledgeCollectionFactory {
    /**
     * Creates a new KnowledgeCollection with the specified embedder and knowledge.
     *
     * @param params - Parameters for knowledge collection creation
     * @returns Promise resolving to a new KnowledgeCollection instance
     * @throws Error if creation fails
     */
    static create(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let collection = null;
            try {
                const { embedder, knowledge } = params;
                const factory = expose_binary_1.KnowledgeCollectionFactoryFunctions.new();
                collection = new knowledge_collection_1.KnowledgeCollection(factory, embedder, knowledge);
                yield collection.setKnowledgeRecords(embedder, knowledge);
            }
            catch (error) {
                collection === null || collection === void 0 ? void 0 : collection.destroy();
                throw error;
            }
            return collection;
        });
    }
}
exports.KnowledgeCollectionFactory = KnowledgeCollectionFactory;
