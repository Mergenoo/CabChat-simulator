"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeFactory = void 0;
const error_1 = require("../../common/error");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const knowledge_1 = require("./knowledge");
const local_knowledge_config_1 = require("./local_knowledge_config");
const remote_knowledge_config_1 = require("./remote_knowledge_config");
/**
 * Factory class for creating knowledge systems (both local and remote)
 * Handles the creation of knowledge systems based on provided configurations
 */
class KnowledgeFactory {
    /**
     * Creates a Knowledge instance based on the provided configuration
     * @param config Configuration for knowledge system creation
     * @param embedder Optional text embedder for local knowledge systems
     * @returns A Knowledge instance
     * @throws InworldError If creation fails
     */
    static create(config, embedder) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!['local', 'remote'].includes(config.type)) {
                throw new error_1.InworldError('Invalid knowledge configuration');
            }
            if (config.type === 'local' && !embedder) {
                throw new error_1.InworldError('Embedder is required for local knowledge creation');
            }
            let status;
            let knowledge;
            // Create an empty optional for the embedder when it's null
            const embedderOptional = embedder
                ? embedder.getExternal()
                : expose_binary_1.OptionalTextEmbedderInterfaceFunctions.new();
            try {
                const factory = expose_binary_1.KnowledgeFactoryFunctions.new();
                const knowledgeConfig = config.type === 'local'
                    ? new local_knowledge_config_1.LocalKnowledgeConfig(config.config)
                    : new remote_knowledge_config_1.RemoteKnowledgeConfig(config.config);
                const createFn = config.type === 'local'
                    ? expose_binary_1.KnowledgeFactoryFunctions.createKnowledgeWithLocalConfig
                    : expose_binary_1.KnowledgeFactoryFunctions.createKnowledgeWithRemoteConfig;
                status = yield createFn(factory, embedderOptional, knowledgeConfig.getExternal());
                if (!expose_binary_1.KnowledgeStatusFunctions.isOK(status)) {
                    throw new error_1.InworldError(`Failed to create ${config.type} knowledge`, (0, helpers_1.getStatus)(status));
                }
                knowledge = new knowledge_1.Knowledge(expose_binary_1.KnowledgeStatusFunctions.getValue(status), factory);
            }
            finally {
                if (status) {
                    expose_binary_1.KnowledgeStatusFunctions.delete(status);
                }
            }
            return knowledge;
        });
    }
}
exports.KnowledgeFactory = KnowledgeFactory;
