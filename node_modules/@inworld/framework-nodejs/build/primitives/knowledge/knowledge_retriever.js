"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeRetriever = void 0;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const retrieval_config_1 = require("./retrieval_config");
/**
 * Class for retrieving knowledge from knowledge collections.
 * Provides functionality to find relevant knowledge based on conversation context.
 */
class KnowledgeRetriever {
    /**
     * Creates a new KnowledgeRetriever instance.
     *
     * @param retriever - External reference to the native retriever implementation
     * @param factory - External reference to the factory that created this retriever
     * @internal
     */
    constructor(retriever, factory) {
        this.retriever = retriever;
        this.factory = factory;
    }
    /**
     * Retrieves relevant knowledge based on conversation history.
     *
     * @param params - Parameters for knowledge retrieval
     * @returns Promise resolving to array of knowledge record strings
     * @throws InworldError if retrieval fails
     */
    retrieveKnowledge(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { collections, history, config = {} } = params;
            const knowledgeString = [];
            let vectorCollections;
            let retrievalConfig;
            try {
                vectorCollections = expose_binary_1.VectorKnowledgeCollectionFunctions.new();
                collections.forEach((collection) => {
                    expose_binary_1.VectorKnowledgeCollectionFunctions.pushBack(vectorCollections, collection.getExternal());
                });
                retrievalConfig = new retrieval_config_1.RetrievalConfig(config);
                const result = yield expose_binary_1.KnowledgeRetrieverInterfaceFunctions.retrieveKnowledge(this.getExternal(), retrievalConfig.getExternal(), vectorCollections, history.getExternal());
                if (!expose_binary_1.StatusOrKnowledgeRetrieverInterfaceFunctions.isOK(result)) {
                    throw new common_1.InworldError('Failed to retrieve knowledge', (0, helpers_1.getStatus)(result.status));
                }
                const knowledge = expose_binary_1.StatusOrVectorStringFunctions.getValue(result);
                knowledgeString.push(...common_1.VectorString.toArray(knowledge));
            }
            finally {
                retrievalConfig === null || retrievalConfig === void 0 ? void 0 : retrievalConfig.destroy();
                if (vectorCollections) {
                    expose_binary_1.VectorKnowledgeCollectionFunctions.delete(vectorCollections);
                }
            }
            return knowledgeString;
        });
    }
    /**
     * Returns the external reference to the native retriever implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.retriever;
    }
    /**
     * Cleans up resources associated with this knowledge retriever.
     */
    destroy() {
        if (this.retriever) {
            expose_binary_1.KnowledgeRetrieverInterfaceFunctions.delete(this.retriever);
            this.retriever = null;
        }
        if (this.factory) {
            expose_binary_1.KnowledgeRetrieverFactoryFunctions.delete(this.factory);
            this.factory = null;
        }
    }
}
exports.KnowledgeRetriever = KnowledgeRetriever;
