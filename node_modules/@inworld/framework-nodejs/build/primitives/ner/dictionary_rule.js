"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorDictionaryRules = exports.DictionaryRule = void 0;
const string_1 = require("../../common/vector/string");
const expose_binary_1 = require("../../expose_binary");
const expose_binary_2 = require("../../expose_binary");
/**
 * Class representing a dictionary-based matching rule.
 * Provides functionality for defining how entities are recognized.
 * @internal
 */
class DictionaryRule {
    /**
     * Creates a new DictionaryRule instance.
     *
     * @param external - External reference to the native rule implementation
     */
    constructor(external) {
        this.external = null;
        this.external = external;
    }
    /**
     * Gets the name of this rule.
     *
     * @returns Rule name or null if not set
     */
    getName() {
        if (!this.external) {
            return null;
        }
        return expose_binary_1.DictionaryRuleFunctions.getName(this.external);
    }
    /**
     * Gets the display name of this rule.
     *
     * @returns Display name or null if not set
     */
    getDisplayName() {
        if (!this.external) {
            return null;
        }
        return expose_binary_1.DictionaryRuleFunctions.getDisplayName(this.external);
    }
    /**
     * Gets the synonyms associated with this rule.
     *
     * @returns Array of synonym strings
     */
    getSynonyms() {
        if (!this.external) {
            return [];
        }
        const synonymsRef = expose_binary_1.DictionaryRuleFunctions.getSynonyms(this.external);
        return string_1.VectorString.toArray(synonymsRef);
    }
    /**
     * Returns the external reference to the native rule implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this rule.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.DictionaryRuleFunctions.delete(this.external);
            this.external = null;
        }
    }
    /**
     * Creates a DictionaryRule instance from a DictionaryRuleInterface.
     *
     * @param rule - Rule interface with name, display name, and synonyms
     * @returns New DictionaryRule instance
     */
    static createFromInterface(rule) {
        const external = expose_binary_1.DictionaryRuleFunctions.new();
        if (rule.name) {
            expose_binary_1.DictionaryRuleFunctions.setName(external, rule.name);
        }
        if (rule.displayName) {
            expose_binary_1.DictionaryRuleFunctions.setDisplayName(external, rule.displayName);
        }
        if (rule.synonyms) {
            const synonymsVector = new string_1.VectorString(rule.synonyms);
            expose_binary_1.DictionaryRuleFunctions.setSynonyms(external, synonymsVector.getExternal());
        }
        return new DictionaryRule(external);
    }
}
exports.DictionaryRule = DictionaryRule;
/**
 * Class for managing collections of DictionaryRule objects.
 * Provides functionality to create and manage multiple rules.
 * @internal
 */
class VectorDictionaryRules {
    /**
     * Creates a new VectorDictionaryRules collection.
     *
     * @param rules - Array of rule definitions to initialize with
     */
    constructor(rules) {
        this.external = null;
        this.rules = [];
        this.external = expose_binary_2.VectorDictionaryRuleFunctions.new();
        this.rules = [];
        rules.forEach((rule) => {
            const newRule = DictionaryRule.createFromInterface(rule);
            this.rules.push(newRule);
            expose_binary_2.VectorDictionaryRuleFunctions.pushBack(this.external, newRule.getExternal());
        });
    }
    /**
     * Returns the external reference to the native vector implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this rule collection.
     */
    destroy() {
        var _a;
        (_a = this.rules) === null || _a === void 0 ? void 0 : _a.forEach((rule) => {
            rule.destroy();
        });
        this.rules = [];
        if (this.external) {
            expose_binary_2.VectorDictionaryRuleFunctions.delete(this.external);
            this.external = null;
        }
    }
    /**
     * Converts a native vector of dictionary rules to an array of DictionaryRule objects.
     *
     * @param dictionaryRulesVector - External reference to a native dictionary rules vector
     * @returns Array of DictionaryRule objects
     */
    static toArray(dictionaryRulesVector) {
        const array = [];
        const size = expose_binary_2.VectorDictionaryRuleFunctions.size(dictionaryRulesVector);
        for (let i = 0; i < size; i++) {
            const rule = expose_binary_2.VectorDictionaryRuleFunctions.get(dictionaryRulesVector, i);
            if (rule) {
                array.push(new DictionaryRule(rule));
            }
        }
        return array;
    }
}
exports.VectorDictionaryRules = VectorDictionaryRules;
