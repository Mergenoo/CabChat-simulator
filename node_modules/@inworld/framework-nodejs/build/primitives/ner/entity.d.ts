import { ExternalReference } from '../../common/types';
import { DictionaryRule, DictionaryRuleInterface } from './dictionary_rule';
/**
 * Interface for defining an entity for named entity recognition.
 */
export interface EntityInterface {
    /** Name/type of the entity */
    name: string;
    /** Optional dictionary rules for entity matching */
    rules?: DictionaryRuleInterface[];
}
/**
 * Class representing a named entity.
 * Provides functionality for entity definition and recognition.
 * @internal
 */
export declare class Entity {
    private external;
    /**
     * Creates a new Entity instance.
     *
     * @param external - External reference to the native entity implementation
     */
    constructor(external: ExternalReference);
    /**
     * Gets the name/type of this entity.
     *
     * @returns Entity name or null if not set
     */
    getName(): string | null;
    /**
     * Gets the dictionary rules for this entity.
     *
     * @returns Array of dictionary rules for this entity
     */
    getRules(): DictionaryRule[];
    /**
     * Returns the external reference to the native entity implementation.
     *
     * @returns External reference object
     */
    getExternal(): ExternalReference;
    /**
     * Cleans up resources associated with this entity.
     */
    destroy(): void;
    /**
     * Creates an Entity instance from an EntityInterface.
     *
     * @param entity - Entity interface with name and rules
     * @returns New Entity instance
     */
    static createFromInterface(entity: EntityInterface): Entity;
}
/**
 * Class for managing collections of Entity objects.
 * Provides functionality to create and manage multiple entities.
 * @internal
 */
export declare class VectorEntities {
    private external;
    private entities;
    /**
     * Creates a new VectorEntities collection.
     *
     * @param entities - Array of entity definitions to initialize with
     */
    constructor(entities: EntityInterface[]);
    /**
     * Converts a native vector of entities to an array of Entity objects.
     *
     * @param external - External reference to a native entity vector
     * @returns Array of Entity objects
     */
    static toArray(external: ExternalReference): Entity[];
    /**
     * Returns the external reference to the native vector implementation.
     *
     * @returns External reference object
     */
    getExternal(): ExternalReference;
    /**
     * Cleans up resources associated with this entity collection.
     */
    destroy(): void;
}
