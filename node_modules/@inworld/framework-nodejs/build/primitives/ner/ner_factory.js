"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NERFactory = void 0;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const ner_1 = require("./ner");
const ner_creation_config_1 = require("./ner_creation_config");
/**
 * Factory class for creating NER (Named Entity Recognition) instances.
 * Provides methods to create entity recognition models with custom entity definitions.
 */
class NERFactory {
    /**
     * Creates a new NER instance with the specified entities.
     *
     * @param entities - Array of entity definitions to recognize
     * @returns Promise resolving to a new NER instance
     */
    static createNER(entities) {
        return __awaiter(this, void 0, void 0, function* () {
            let nerConfig = null;
            let ner = null;
            try {
                nerConfig = new ner_creation_config_1.NERCreationConfig({ entities });
                ner = yield this.create(nerConfig);
            }
            finally {
                nerConfig === null || nerConfig === void 0 ? void 0 : nerConfig.destroy();
            }
            return ner;
        });
    }
    /**
     * Internal method to create an NER instance from a config.
     *
     * @param config - NER creation configuration
     * @returns Promise resolving to a new NER instance
     * @throws InworldError if NER creation fails
     * @private
     */
    static create(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let creationStatus = null;
            try {
                creationStatus = yield expose_binary_1.NERFactoryFunctions.createNER(config.getExternal());
                if (!expose_binary_1.StatusOrNERInterfaceFunctions.isOK(creationStatus)) {
                    throw new common_1.InworldError('Failed to create NER', (0, helpers_1.getStatus)(creationStatus));
                }
                const ner = expose_binary_1.StatusOrNERInterfaceFunctions.getValue(creationStatus);
                return new ner_1.NER(ner);
            }
            finally {
                if (creationStatus) {
                    expose_binary_1.StatusOrNERInterfaceFunctions.delete(creationStatus);
                }
            }
        });
    }
}
exports.NERFactory = NERFactory;
