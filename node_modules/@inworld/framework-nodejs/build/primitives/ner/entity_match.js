"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorEntityMatch = exports.EntityMatch = void 0;
const expose_binary_1 = require("../../expose_binary");
/**
 * Class representing a matched entity in text.
 * Contains information about an entity detected during named entity recognition.
 */
class EntityMatch {
    /**
     * Creates a new EntityMatch instance.
     *
     * @param external - External reference to the native entity match implementation
     * @internal
     */
    constructor(external) {
        this.entityName = null;
        this.ruleName = null;
        this.text = null;
        const entityName = expose_binary_1.EntityMatchFunctions.getEntityName(external);
        const ruleName = expose_binary_1.EntityMatchFunctions.getRuleName(external);
        const text = expose_binary_1.EntityMatchFunctions.getText(external);
        if (entityName) {
            this.entityName = entityName;
        }
        if (ruleName) {
            this.ruleName = ruleName;
        }
        if (text) {
            this.text = text;
        }
    }
    /**
     * Gets the name of the entity that was matched.
     *
     * @returns Entity name or null if not available
     */
    getEntityName() {
        return this.entityName;
    }
    /**
     * Gets the specific rule that triggered this match.
     *
     * @returns Rule name or null if not available
     */
    getRuleName() {
        return this.ruleName;
    }
    /**
     * Gets the text that was matched.
     *
     * @returns Matched text string or null if not available
     */
    getText() {
        return this.text;
    }
}
exports.EntityMatch = EntityMatch;
/**
 * Class for managing collections of EntityMatch objects.
 * Provides functionality to work with multiple entity matches.
 * @internal
 */
class VectorEntityMatch {
    /**
     * Creates a new VectorEntityMatch collection.
     *
     * @param external - External reference to the native vector implementation
     */
    constructor(external) {
        this.external = null;
        this.external = external;
    }
    /**
     * Converts a native vector of entity matches to an array of EntityMatch objects.
     *
     * @param external - External reference to a native entity match vector
     * @returns Array of EntityMatch objects
     */
    static toArray(external) {
        if (!external) {
            return [];
        }
        const entityMatches = [];
        const size = expose_binary_1.VectorEntityMatchFunctions.size(external);
        for (let i = 0; i < size; i++) {
            const match = expose_binary_1.VectorEntityMatchFunctions.get(external, i);
            if (match) {
                entityMatches.push(new EntityMatch(match));
            }
        }
        return entityMatches;
    }
    /**
     * Returns the external reference to the native vector implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this entity match collection.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.VectorEntityMatchFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.VectorEntityMatch = VectorEntityMatch;
