"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NER = void 0;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const entity_match_1 = require("./entity_match");
/**
 * Class for Named Entity Recognition (NER).
 * Provides functionality to detect and extract named entities from text.
 */
class NER {
    /**
     * Creates a new NER instance.
     *
     * @param ner - External reference to the native NER implementation
     * @internal
     */
    constructor(ner) {
        this.ner = null;
        this.ner = ner;
    }
    /**
     * Extracts entities from the provided text.
     *
     * @param text - Text to analyze for entities
     * @returns Promise resolving to an array of entity matches
     * @throws InworldError if NER is not initialized or extraction fails
     */
    extractEntities(text) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.ner) {
                throw new common_1.InworldError('NER interface is not initialized');
            }
            let matches = [];
            let extractionStatus;
            let matchesVectorRef;
            try {
                extractionStatus = yield expose_binary_1.NERInterfaceFunctions.extractEntities(this.ner, text);
                if (!expose_binary_1.StatusOrVectorEntityMatchFunctions.isOK(extractionStatus)) {
                    throw new common_1.InworldError('Failed to extract entities', (0, helpers_1.getStatus)(extractionStatus));
                }
                matchesVectorRef =
                    expose_binary_1.StatusOrVectorEntityMatchFunctions.getValue(extractionStatus);
                matches = entity_match_1.VectorEntityMatch.toArray(matchesVectorRef);
            }
            finally {
                if (matchesVectorRef) {
                    expose_binary_1.VectorEntityMatchFunctions.delete(matchesVectorRef);
                }
                if (extractionStatus) {
                    expose_binary_1.StatusOrVectorEntityMatchFunctions.delete(extractionStatus);
                }
            }
            return matches;
        });
    }
    /**
     * Returns the external reference to the native NER implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.ner;
    }
    /**
     * Cleans up resources associated with this NER instance.
     */
    destroy() {
        if (this.ner) {
            expose_binary_1.NERInterfaceFunctions.delete(this.ner);
            this.ner = null;
        }
    }
}
exports.NER = NER;
