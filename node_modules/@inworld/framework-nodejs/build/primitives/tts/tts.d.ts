import { ExternalReference } from '../../common/types';
/**
 * Interface representing a phoneme with its timing information.
 */
export interface PhonemeTimestamp {
    /** The phoneme symbol */
    phoneme: string;
    /** Start time of the phoneme in seconds */
    startTimeSec: number;
}
/**
 * Interface representing an audio chunk with optional phoneme timing data.
 * @internal
 */
export interface AudioChunk {
    /** Raw audio data */
    audio: Float32Array;
    /** Optional phoneme timing information */
    phonemeTimestamps?: PhonemeTimestamp[];
}
/**
 * Interface representing the result of a TTS iteration.
 */
export interface TTSIterationResult {
    /** Raw audio data */
    audio?: number[];
    /** Optional phoneme timing information */
    phonemeTimestamps?: PhonemeTimestamp[];
    /** Indicates if the stream is finished */
    done: boolean;
}
/** Type for the next method of the TTSIterator. */
export interface TTSIterator {
    /**
     * Gets the external reference to the native stream implementation.
     * @returns External reference object
     * @internal
     */
    getStream?: () => ExternalReference;
    /**
     * Asynchronously reads the next item from the stream.
     * @returns Promise resolving to a result object with text content or done flag
     */
    next: () => Promise<TTSIterationResult>;
}
/**
 * Class for text-to-speech processing.
 * Provides functionality to convert text into synthesized speech audio.
 */
export declare class TTS {
    private tts;
    /**
     * Creates a new TTS instance.
     *
     * @param tts - External reference to the native TTS implementation
     * @internal
     */
    constructor(tts: ExternalReference);
    /**
     * Returns the external reference to the native TTS implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
    /**
     * Synthesizes speech from text using a specified voice.
     *
     * @param speakerId - ID of the speaker/voice to use for synthesis
     * @param text - Text to convert to speech
     * @returns A stream iterator for the synthesized audio chunks
     * @throws InworldError if speech synthesis fails
     */
    synthesizeSpeech(speakerId: string, text: string): Promise<TTSIterator>;
    /**
     * Creates a stream iterator for processing synthesized speech chunks.
     *
     * @param statusOrInputStreamSpeechChunk - Status of the speech synthesis
     * @param inputStream - Input stream containing speech chunks
     * @returns Stream iterator for accessing audio chunks
     * @private
     */
    private streamIterator;
    /**
     * Extracts phoneme timestamps from a speech chunk.
     *
     * @param chunk - Speech chunk to extract phoneme timestamps from
     * @returns Array of phoneme timestamps or undefined if not available
     * @private
     */
    private getPhonemeTimestamps;
    /**
     * Cleans up resources associated with this TTS instance.
     */
    destroy(): void;
}
