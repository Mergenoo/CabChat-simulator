import { Device } from '../../core';
/**
 * Interface for configuring preprocessing settings for speech synthesis.
 */
export interface SpeechSynthesisPreprocessingConfigInterface {
    /**
     * Whether to normalize text.
     * @default true
     */
    normalizeText?: boolean;
}
/**
 * Interface for configuring postprocessing settings for speech synthesis.
 */
export interface SpeechSynthesisPostprocessingConfigInterface {
    /**
     * The sample rate for the speech synthesis.
     */
    sampleRate?: number;
    /**
     * Whether to trim silence.
     */
    trimSilence?: boolean;
}
/**
 * Interface for configuring inference settings for speech synthesis.
 */
export interface SpeechSynthesisInferenceConfigInterface {
    alpha?: number;
    beta?: number;
    diffusionSteps?: number;
    speechTempo?: number;
}
/**
 * Interface for configuring speech synthesis configuration.
 */
export interface SpeechSynthesisConfigInterface {
    /**
     * The model ID (v2 or v3) for the speech synthesis.
     * If not set, the v2 model will be used by default.
     */
    modelId?: string;
    /**
     * The preprocessing configuration for the speech synthesis.
     */
    preprocessingConfig?: SpeechSynthesisPreprocessingConfigInterface;
    /**
     * The postprocessing configuration for the speech synthesis.
     */
    postprocessingConfig?: SpeechSynthesisPostprocessingConfigInterface;
    /**
     * The inference configuration for the speech synthesis.
     */
    inferenceConfig?: SpeechSynthesisInferenceConfigInterface;
}
/**
 * @internal
 */
export declare class SpeechSynthesisPreprocessingConfig {
    private external;
    constructor(config?: SpeechSynthesisPreprocessingConfigInterface);
    getExternal(): any;
    destroy(): void;
    static getDefault(): {
        normalizeText: boolean;
    };
}
/**
 * @internal
 */
export declare class SpeechSynthesisPostprocessingConfig {
    private external;
    readonly sampleRate: number | null;
    readonly trimSilence: boolean | null;
    constructor(config?: SpeechSynthesisPostprocessingConfigInterface);
    getExternal(): any;
    destroy(): void;
    static getDefault(): {
        sampleRate: number;
        trimSilence: boolean;
    };
}
/**
 * @internal
 */
export declare class SpeechSynthesisInferenceConfig {
    private external;
    constructor(config?: SpeechSynthesisInferenceConfigInterface);
    getExternal(): any;
    destroy(): void;
    static getDefault(): {
        alpha: number;
        beta: number;
        diffusionSteps: number;
        speechTempo: number;
    };
}
/**
 * Class for configuring speech synthesis settings.
 */
export declare class SpeechSynthesisConfig {
    private external;
    private preprocessingConfig;
    private postprocessingConfig;
    private inferenceConfig;
    /**
     * Creates a new SpeechSynthesisConfig instance.
     *
     * @param config - Configuration options for speech synthesis
     * @internal
     */
    constructor(config?: SpeechSynthesisConfigInterface);
    private getInworldConfig;
    /**
     * Returns the external reference to the speech synthesis configuration.
     * @returns External reference to the speech synthesis configuration
     * @internal
     */
    getExternal(): any;
    /**
     * Destroys the speech synthesis configuration.
     * @internal
     */
    destroy(): void;
    /**
     * Returns the default speech synthesis configuration.
     * @returns Default speech synthesis configuration
     */
    static getDefault(): SpeechSynthesisConfigInterface;
}
/**
 * Interface for configuring remote TTS (Text-to-Speech) instances.
 */
export interface RemoteTTSConfigInterface {
    /** The API key for the remote TTS service */
    apiKey: string;
    /** The configuration for the speech synthesis */
    synthesisConfig?: SpeechSynthesisConfigInterface;
}
/**
 * Interface for configuring local TTS (Text-to-Speech) instances.
 */
export interface LocalTTSConfigInterface {
    /** The path to the model file */
    modelPath: string;
    /** The path to the prompts file */
    promptsPath: string;
    /** The device to use for the TTS */
    device?: Device;
    /** The configuration for the speech synthesis */
    synthesisConfig?: SpeechSynthesisConfigInterface;
}
/**
 * Union type for TTS configuration options.
 */
export type TTSConfigInterface = RemoteTTSConfigInterface | LocalTTSConfigInterface;
/**
 * @internal
 */
export declare class RemoteTTSConfig {
    readonly apiKey: string;
    private external;
    private synthesisConfig;
    constructor(config: RemoteTTSConfigInterface);
    getExternal(): any;
    destroy(): void;
}
/**
 * @internal
 */
export declare class LocalTTSConfig {
    private external;
    private synthesisConfig;
    constructor(config: LocalTTSConfigInterface);
    getExternal(): any;
    destroy(): void;
}
