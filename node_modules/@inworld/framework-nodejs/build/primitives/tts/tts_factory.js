"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TTSFactory = void 0;
const error_1 = require("../../common/error");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
const tts_1 = require("./tts");
/**
 * Factory class for creating TTS (Text-to-Speech) instances.
 * Provides methods to create both local and remote speech synthesis models.
 */
class TTSFactory {
    /**
     * Creates a local TTS instance.
     *
     * @param config - Configuration for the local TTS
     * @returns Promise resolving to a new TTS instance
     */
    static createLocal(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let ttsConfig = null;
            let tts = null;
            try {
                ttsConfig = new config_1.LocalTTSConfig(config);
                tts = yield this.create(ttsConfig);
            }
            finally {
                ttsConfig === null || ttsConfig === void 0 ? void 0 : ttsConfig.destroy();
            }
            return tts;
        });
    }
    /**
     * Creates a remote TTS instance.
     *
     * @param config - Configuration for the remote TTS
     * @returns Promise resolving to a new TTS instance
     */
    static createRemote(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let ttsConfig = null;
            let tts = null;
            try {
                ttsConfig = new config_1.RemoteTTSConfig(config);
                tts = yield this.create(ttsConfig);
            }
            finally {
                ttsConfig === null || ttsConfig === void 0 ? void 0 : ttsConfig.destroy();
            }
            return tts;
        });
    }
    /**
     * Internal method to create a TTS instance from a config.
     *
     * @param config - TTS configuration (local or remote)
     * @returns Promise resolving to a new TTS instance
     * @throws InworldError if TTS creation fails
     * @private
     */
    static create(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let status;
            let tts;
            let factory;
            try {
                factory = expose_binary_1.TTSFactoryFunctions.new();
                const createFn = config instanceof config_1.RemoteTTSConfig
                    ? expose_binary_1.TTSFactoryFunctions.createRemoteTTS
                    : expose_binary_1.TTSFactoryFunctions.createLocalTTS;
                status = yield createFn(factory, config.getExternal());
                if (!expose_binary_1.TTSInterfaceStatusFunctions.isOK(status)) {
                    throw new error_1.InworldError('Failed to create TTS', (0, helpers_1.getStatus)(status));
                }
                tts = new tts_1.TTS(expose_binary_1.TTSInterfaceStatusFunctions.getValue(status));
            }
            finally {
                if (status) {
                    expose_binary_1.TTSInterfaceStatusFunctions.delete(status);
                }
                if (factory) {
                    expose_binary_1.TTSFactoryFunctions.delete(factory);
                }
            }
            return tts;
        });
    }
}
exports.TTSFactory = TTSFactory;
