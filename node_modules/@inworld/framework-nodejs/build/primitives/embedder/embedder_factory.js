"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextEmbedderFactory = void 0;
const error_1 = require("../../common/error");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
const embedder_1 = require("./embedder");
/**
 * Factory class for creating TextEmbedder instances.
 * Provides methods to create local or remote text embedders.
 */
class TextEmbedderFactory {
    /**
     * Creates a local text embedder using the specified configuration.
     *
     * @param config - Configuration for local text embedder
     * @returns Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     */
    static createLocal(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let embedderConfig = null;
            let embedder = null;
            try {
                embedderConfig = new config_1.LocalTextEmbedderConfig(config);
                embedder = yield this.create(embedderConfig);
            }
            finally {
                embedderConfig === null || embedderConfig === void 0 ? void 0 : embedderConfig.destroy();
            }
            return embedder;
        });
    }
    /**
     * Creates a remote text embedder using the specified configuration.
     *
     * @param config - Configuration for remote text embedder
     * @returns Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     */
    static createRemote(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let embedderConfig = null;
            let embedder = null;
            try {
                embedderConfig = new config_1.RemoteTextEmbedderConfig(config);
                embedder = yield this.create(embedderConfig);
            }
            finally {
                embedderConfig === null || embedderConfig === void 0 ? void 0 : embedderConfig.destroy();
            }
            return embedder;
        });
    }
    /**
     * Internal method to create a TextEmbedder instance from configuration.
     *
     * @param config - Text embedder configuration (local or remote)
     * @returns Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     * @private
     */
    static create(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let factory;
            let embedder = null;
            let statusOrEmbedder;
            try {
                const createFn = config instanceof config_1.RemoteTextEmbedderConfig
                    ? expose_binary_1.TextEmbedderInterfaceFunctions.createWithRemoteConfig
                    : expose_binary_1.TextEmbedderInterfaceFunctions.createWithLocalConfig;
                factory = expose_binary_1.TextEmbedderFactoryFunctions.new();
                statusOrEmbedder = yield createFn(factory, config.getExternal());
                if (!expose_binary_1.TextEmbedderInterfaceFunctions.isOK(statusOrEmbedder)) {
                    throw new error_1.InworldError('Failed to create text embedder', (0, helpers_1.getStatus)(statusOrEmbedder));
                }
                const embedderRef = expose_binary_1.TextEmbedderInterfaceFunctions.get(statusOrEmbedder);
                embedder = new embedder_1.TextEmbedder(embedderRef, factory);
            }
            catch (error) {
                if (factory) {
                    expose_binary_1.TextEmbedderFactoryFunctions.delete(factory);
                }
                throw error;
            }
            finally {
                if (statusOrEmbedder) {
                    expose_binary_1.TextEmbedderInterfaceFunctions.deleteStatusOrInterface(statusOrEmbedder);
                }
            }
            return embedder;
        });
    }
}
exports.TextEmbedderFactory = TextEmbedderFactory;
