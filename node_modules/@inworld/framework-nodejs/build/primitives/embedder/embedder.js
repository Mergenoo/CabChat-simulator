"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextEmbedder = void 0;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
/**
 * Class for text embedding functionality.
 * Converts text into vector representations (embeddings) for semantic processing.
 */
class TextEmbedder {
    /**
     * Creates a new TextEmbedder instance.
     *
     * @param embedder - External reference to the native embedder implementation
     * @param factory - External reference to the factory that created this embedder
     * @internal
     */
    constructor(embedder, factory) {
        this.embedder = embedder;
        this.factory = factory;
    }
    /**
     * Creates an embedding vector for a single text string.
     *
     * @param text - Text to convert to embedding
     * @returns Promise resolving to array of numbers representing the embedding vector
     * @throws InworldError if embedding generation fails
     */
    embed(text) {
        return __awaiter(this, void 0, void 0, function* () {
            let statusOrEmbedding;
            const embedding = [];
            try {
                statusOrEmbedding = yield expose_binary_1.TextEmbedderInterfaceFunctions.embed(this.embedder, text);
                if (!expose_binary_1.EmbeddingsStatusFunctions.isOK(statusOrEmbedding)) {
                    throw new common_1.InworldError('Embedding failed', (0, helpers_1.getStatus)(statusOrEmbedding));
                }
                const embeddingRef = expose_binary_1.EmbeddingsStatusFunctions.getValue(statusOrEmbedding);
                embedding.push(...common_1.VectorFloat.toArray(embeddingRef));
            }
            finally {
                if (statusOrEmbedding) {
                    expose_binary_1.EmbeddingsStatusFunctions.delete(statusOrEmbedding);
                }
            }
            return embedding;
        });
    }
    /**
     * Creates embedding vectors for multiple text strings in a batch.
     *
     * @param texts - Array of text strings to convert to embeddings
     * @returns Promise resolving to array of embedding vectors
     * @throws InworldError if batch embedding generation fails
     */
    embedBatch(texts) {
        return __awaiter(this, void 0, void 0, function* () {
            let statusOrEmbeddings;
            let embeddingsRef;
            let vector;
            const embeddings = [];
            try {
                vector = new common_1.VectorString(texts);
                statusOrEmbeddings = yield expose_binary_1.TextEmbedderInterfaceFunctions.embedBatch(this.embedder, vector.getExternal());
                if (!expose_binary_1.BatchEmbeddingsStatusFunctions.isOK(statusOrEmbeddings)) {
                    throw new common_1.InworldError('Batch embedding failed', (0, helpers_1.getStatus)(statusOrEmbeddings));
                }
                embeddingsRef =
                    expose_binary_1.BatchEmbeddingsStatusFunctions.getValue(statusOrEmbeddings);
                const count = expose_binary_1.VectorVectorFloatFunctions.size(embeddingsRef);
                for (let i = 0; i < count; i++) {
                    const embeddingItemRef = expose_binary_1.VectorVectorFloatFunctions.get(embeddingsRef, i);
                    embeddings.push(common_1.VectorFloat.toArray(embeddingItemRef));
                }
            }
            finally {
                vector === null || vector === void 0 ? void 0 : vector.destroy();
                if (embeddingsRef) {
                    expose_binary_1.VectorVectorFloatFunctions.delete(embeddingsRef);
                }
                if (statusOrEmbeddings) {
                    expose_binary_1.BatchEmbeddingsStatusFunctions.delete(statusOrEmbeddings);
                }
            }
            return embeddings;
        });
    }
    /**
     * Returns the external reference to the native embedder implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.embedder;
    }
    /**
     * Cleans up resources associated with this text embedder.
     */
    destroy() {
        if (this.embedder) {
            expose_binary_1.TextEmbedderInterfaceFunctions.delete(this.embedder);
            this.embedder = null;
        }
        if (this.factory) {
            expose_binary_1.TextEmbedderFactoryFunctions.delete(this.factory);
            this.factory = null;
        }
    }
}
exports.TextEmbedder = TextEmbedder;
