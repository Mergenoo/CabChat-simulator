import { ExternalReference } from '../../common/types';
/**
 * Class for text embedding functionality.
 * Converts text into vector representations (embeddings) for semantic processing.
 */
export declare class TextEmbedder {
    private factory;
    private embedder;
    /**
     * Creates a new TextEmbedder instance.
     *
     * @param embedder - External reference to the native embedder implementation
     * @param factory - External reference to the factory that created this embedder
     * @internal
     */
    constructor(embedder: ExternalReference, factory: ExternalReference);
    /**
     * Creates an embedding vector for a single text string.
     *
     * @param text - Text to convert to embedding
     * @returns Promise resolving to array of numbers representing the embedding vector
     * @throws InworldError if embedding generation fails
     */
    embed(text: string): Promise<number[]>;
    /**
     * Creates embedding vectors for multiple text strings in a batch.
     *
     * @param texts - Array of text strings to convert to embeddings
     * @returns Promise resolving to array of embedding vectors
     * @throws InworldError if batch embedding generation fails
     */
    embedBatch(texts: string[]): Promise<number[][]>;
    /**
     * Returns the external reference to the native embedder implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this text embedder.
     */
    destroy(): void;
}
