import { Device } from '../../core';
/**
 * Interface for configuring remote text embedder.
 * Used for cloud-based text embedding services.
 */
export interface RemoteTextEmbedderConfigInterface {
    /** API key for accessing the remote embedding service */
    apiKey: string;
    /** Model name to use for generating embeddings */
    modelName: string;
    /**
     * Provider name (defaults to DEFAULT_PROVIDER if not specified).
     * @default inworld
     */
    provider?: string;
}
/**
 * Interface for configuring local text embedder.
 * Used for running embedding models locally.
 */
export interface LocalTextEmbedderConfigInterface {
    /** Path to the local embedding model file */
    modelPath: string;
    /** Computation device to use for model execution */
    device?: Device;
}
/**
 * Union type for text embedder configuration options.
 */
export type TextEmbedderConfigInterface = RemoteTextEmbedderConfigInterface | LocalTextEmbedderConfigInterface;
/**
 * Class for configuring remote text embedder settings.
 * Manages parameters for cloud-based embedding services.
 * @internal
 */
export declare class RemoteTextEmbedderConfig {
    private external;
    /**
     * Creates a new RemoteTextEmbedderConfig instance.
     *
     * @param config - Configuration parameters for remote text embedder
     */
    constructor(config: RemoteTextEmbedderConfigInterface);
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy(): void;
}
/**
 * Class for configuring local text embedder settings.
 * Manages parameters for locally running embedding models.
 * @internal
 */
export declare class LocalTextEmbedderConfig {
    private external;
    /**
     * Creates a new LocalTextEmbedderConfig instance.
     *
     * @param config - Configuration parameters for local text embedder
     */
    constructor(config: LocalTextEmbedderConfigInterface);
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy(): void;
}
