"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemorySnapshot = void 0;
const expose_binary_1 = require("../../expose_binary");
const flash_memory_1 = require("./flash_memory");
const long_term_memory_1 = require("./long_term_memory");
const rolling_summary_1 = require("./rolling_summary");
/**
 * Class representing a snapshot of an agent's memory state.
 * Contains all memory components (rolling summary, flash memory, long-term memory)
 * at a specific point in time.
 */
class MemorySnapshot {
    /**
     * Creates a new MemorySnapshot instance.
     *
     * @param params - Optional initialization parameters
     */
    constructor(params) {
        if (params === null || params === void 0 ? void 0 : params.external) {
            this.external = params.external;
            return;
        }
        this.external = expose_binary_1.MemorySnapshotFunctions.new();
        let rollingSummary;
        let flashMemory;
        let longTermMemory;
        try {
            if (params === null || params === void 0 ? void 0 : params.rollingSummary) {
                rollingSummary = new rolling_summary_1.RollingSummary(params.rollingSummary);
                expose_binary_1.MemorySnapshotFunctions.setRollingSummary(this.external, rollingSummary.getExternal());
            }
            if (params === null || params === void 0 ? void 0 : params.flashMemory) {
                flashMemory = new flash_memory_1.FlashMemory(params.flashMemory);
                expose_binary_1.MemorySnapshotFunctions.setFlashMemory(this.external, flashMemory.getExternal());
            }
            if (params === null || params === void 0 ? void 0 : params.longTermMemory) {
                longTermMemory = new long_term_memory_1.LongTermMemory(params.longTermMemory);
                expose_binary_1.MemorySnapshotFunctions.setLongTermMemory(this.external, longTermMemory.getExternal());
            }
        }
        finally {
            rollingSummary === null || rollingSummary === void 0 ? void 0 : rollingSummary.destroy();
            flashMemory === null || flashMemory === void 0 ? void 0 : flashMemory.destroy();
            longTermMemory === null || longTermMemory === void 0 ? void 0 : longTermMemory.destroy();
        }
    }
    /**
     * Returns the external reference to the native memory snapshot implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this memory snapshot.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.MemorySnapshotFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.MemorySnapshot = MemorySnapshot;
