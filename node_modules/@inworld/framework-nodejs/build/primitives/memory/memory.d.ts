import { ExternalReference } from '../../common/types';
import { History } from '../../core';
import { MemorySnapshot } from './memory_snapshot';
/**
 * Class for managing conversational memory in agents.
 * Provides functionality to retrieve and update memory based on conversation history.
 */
export declare class Memory {
    private memory;
    private factory;
    /**
     * Creates a new Memory instance.
     *
     * @param memory - External reference to the native memory implementation
     * @param factory - External reference to the factory that created this memory
     * @internal
     */
    constructor(memory: ExternalReference, factory: ExternalReference);
    /**
     * Retrieves memory content based on conversation history.
     *
     * @param history - Conversation history to retrieve memory from
     * @param memorySnapshot - Current memory snapshot
     * @returns Promise resolving to array of memory strings
     */
    get(history: History, memorySnapshot: MemorySnapshot): Promise<string[]>;
    /**
     * Updates memory content based on conversation history.
     *
     * @param history - Conversation history to update memory with
     * @param memorySnapshot - Current memory snapshot to update
     * @returns Promise resolving to new memory snapshot
     */
    update(history: History, memorySnapshot: MemorySnapshot): Promise<MemorySnapshot>;
    /**
     * Cleans up resources associated with this memory instance.
     */
    destroy(): void;
}
