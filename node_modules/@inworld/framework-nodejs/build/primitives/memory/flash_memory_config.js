"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlashMemoryConfig = void 0;
const expose_binary_1 = require("../../expose_binary");
const llm_1 = require("../../primitives/llm");
/**
 * Class for configuring flash memory settings.
 * Manages parameters that control how short-term memory is created and maintained.
 * @internal
 */
class FlashMemoryConfig {
    /**
     * Creates a new FlashMemoryConfig instance.
     *
     * @param params - Optional configuration parameters
     */
    constructor(params) {
        this.external = expose_binary_1.FlashMemoryConfigFunctions.new();
        if ((params === null || params === void 0 ? void 0 : params.dialogueCutoffSize) !== undefined) {
            expose_binary_1.FlashMemoryConfigFunctions.setDialogueCutoffSize(this.external, params.dialogueCutoffSize);
        }
        if ((params === null || params === void 0 ? void 0 : params.nHistoryTurns) !== undefined) {
            expose_binary_1.FlashMemoryConfigFunctions.setNHistoryTurns(this.external, params.nHistoryTurns);
        }
        if ((params === null || params === void 0 ? void 0 : params.memoriesSimilarityThreshold) !== undefined) {
            expose_binary_1.FlashMemoryConfigFunctions.setMemoriesSimilarityThreshold(this.external, params.memoriesSimilarityThreshold);
        }
        if ((params === null || params === void 0 ? void 0 : params.maxFlashMemory) !== undefined) {
            expose_binary_1.FlashMemoryConfigFunctions.setMaxFlashMemory(this.external, params.maxFlashMemory);
        }
        if ((params === null || params === void 0 ? void 0 : params.maxTopicsPerMemory) !== undefined) {
            expose_binary_1.FlashMemoryConfigFunctions.setMaxTopicsPerMemory(this.external, params.maxTopicsPerMemory);
        }
        if ((params === null || params === void 0 ? void 0 : params.textGenerationConfig) !== undefined) {
            expose_binary_1.FlashMemoryConfigFunctions.setTextGenerationConfig(this.external, new llm_1.TextGenerationConfig(params.textGenerationConfig).getExternal());
        }
    }
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.FlashMemoryConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.FlashMemoryConfig = FlashMemoryConfig;
