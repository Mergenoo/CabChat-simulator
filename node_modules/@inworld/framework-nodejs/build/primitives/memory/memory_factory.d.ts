import { RetrievalConfigInterface } from '../../common/types';
import { TextEmbedder } from '../embedder/embedder';
import { LLM } from '../llm/llm';
import { FlashMemoryConfigInterface } from './flash_memory_config';
import { LongTermMemoryConfigInterface } from './long_term_memory_config';
import { Memory } from './memory';
import { RollingSummaryConfigInterface } from './rolling_summary_config';
/**
 * Interface for parameters needed to create a memory instance.
 */
export interface CreateMemoryInterface {
    /** LLM instance for processing memory */
    llm: LLM;
    /** Text embedder for vector representation of memory */
    embedder: TextEmbedder;
    /** Configuration for rolling summary memory */
    rollingSummary: RollingSummaryConfigInterface;
    /** Configuration for flash memory */
    flashMemory: FlashMemoryConfigInterface;
    /** Configuration for long-term memory */
    longTermMemory: LongTermMemoryConfigInterface;
    /** Optional retrieval configuration */
    retrievalConfig?: RetrievalConfigInterface;
    /** Whether to return rolling summary in memory output */
    returnRollingSummary?: boolean;
}
/**
 * Factory class for creating Memory instances.
 * Provides functionality to create and configure different types of memory.
 */
export declare class MemoryFactory {
    /**
     * Creates a new Memory instance.
     *
     * @param params - Parameters for memory creation including different memory types
     * @returns Promise resolving to a new Memory instance
     * @throws InworldError if memory creation fails
     */
    createMemory(params: CreateMemoryInterface): Promise<Memory>;
}
