import { ExternalReference } from '../../common/types';
import { FlashMemoryInterface } from './flash_memory';
import { LongTermMemoryInterface } from './long_term_memory';
import { RollingSummaryInterface } from './rolling_summary';
/**
 * Interface for memory snapshot initialization.
 * Represents a complete state of agent memory at a point in time.
 */
export interface MemorySnapshotInterface {
    /**
     * Optional external reference to an existing native memory snapshot
     * @internal
     */
    external?: ExternalReference;
    /** Optional rolling summary configuration */
    rollingSummary?: RollingSummaryInterface;
    /** Optional flash memory configuration */
    flashMemory?: FlashMemoryInterface;
    /** Optional long-term memory configuration */
    longTermMemory?: LongTermMemoryInterface;
}
/**
 * Class representing a snapshot of an agent's memory state.
 * Contains all memory components (rolling summary, flash memory, long-term memory)
 * at a specific point in time.
 */
export declare class MemorySnapshot {
    private external;
    /**
     * Creates a new MemorySnapshot instance.
     *
     * @param params - Optional initialization parameters
     */
    constructor(params?: MemorySnapshotInterface);
    /**
     * Returns the external reference to the native memory snapshot implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this memory snapshot.
     */
    destroy(): void;
}
