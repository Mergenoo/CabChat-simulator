"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.STT = void 0;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const stream_1 = require("../../common/stream");
const audio_chunk_1 = require("../../core/audio_chunk");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
/**
 * Class for speech-to-text processing.
 * Provides functionality to convert audio data into text.
 */
class STT {
    /**
     * Creates a new STT instance.
     *
     * @param stt - External reference to the native STT implementation
     * @param factory - External reference to the STT factory
     * @internal
     */
    constructor(stt, factory) {
        this.stt = stt;
        this.factory = factory;
    }
    /**
     * Converts speech in audio data to text.
     *
     * @param params - Audio data configuration
     * @returns A stream iterator for the recognized text
     * @throws InworldError if speech recognition fails
     */
    recognizeSpeech(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let audioChunk;
            let speechRecognitionConfig;
            try {
                audioChunk = new audio_chunk_1.AudioChunk(params);
                speechRecognitionConfig = new config_1.SpeechRecognitionConfig();
                const statusOrRecognizeSpeech = yield expose_binary_1.STTInterfaceFunctions.recognizeSpeech(this.stt, audioChunk.getExternal(), speechRecognitionConfig.getExternal());
                if (!expose_binary_1.InputStreamFunctions.isOK(statusOrRecognizeSpeech)) {
                    throw new common_1.InworldError('Failed to recognize speech', (0, helpers_1.getStatus)(statusOrRecognizeSpeech));
                }
                const inputStream = expose_binary_1.InputStreamFunctions.get(statusOrRecognizeSpeech);
                return this.streamIterator(statusOrRecognizeSpeech, inputStream);
            }
            finally {
                audioChunk === null || audioChunk === void 0 ? void 0 : audioChunk.destroy();
                speechRecognitionConfig === null || speechRecognitionConfig === void 0 ? void 0 : speechRecognitionConfig.destroy();
            }
        });
    }
    /**
     * Returns the external reference to the native STT implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.stt;
    }
    /**
     * Cleans up resources associated with this STT instance.
     */
    destroy() {
        if (this.stt) {
            this.stt = null;
            expose_binary_1.STTInterfaceFunctions.delete(this.stt);
        }
        if (this.factory) {
            expose_binary_1.STTFactoryFunctions.delete(this.factory);
            this.factory = null;
        }
    }
    /**
     * Creates a stream iterator for processing recognized text.
     *
     * @param statusOrRecognizeSpeech - Status of the speech recognition
     * @param inputStream - Input stream containing recognized text
     * @returns Stream iterator for accessing text results
     * @private
     */
    streamIterator(statusOrRecognizeSpeech, inputStream) {
        const stringStream = new stream_1.TextStream(inputStream, () => {
            expose_binary_1.InputStreamFunctions.deleteStream(inputStream);
            expose_binary_1.InputStreamFunctions.delete(statusOrRecognizeSpeech);
        });
        return {
            next() {
                return __awaiter(this, void 0, void 0, function* () {
                    return stringStream.next();
                });
            },
        };
    }
}
exports.STT = STT;
