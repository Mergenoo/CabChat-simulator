import { TextStreamIterator } from '../../common/stream';
import { AudioChunkInterface, ExternalReference } from '../../common/types';
/**
 * Class for speech-to-text processing.
 * Provides functionality to convert audio data into text.
 */
export declare class STT {
    private factory;
    private stt;
    /**
     * Creates a new STT instance.
     *
     * @param stt - External reference to the native STT implementation
     * @param factory - External reference to the STT factory
     * @internal
     */
    constructor(stt: ExternalReference, factory: ExternalReference);
    /**
     * Converts speech in audio data to text.
     *
     * @param params - Audio data configuration
     * @returns A stream iterator for the recognized text
     * @throws InworldError if speech recognition fails
     */
    recognizeSpeech(params: AudioChunkInterface): Promise<TextStreamIterator>;
    /**
     * Returns the external reference to the native STT implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this STT instance.
     */
    destroy(): void;
    /**
     * Creates a stream iterator for processing recognized text.
     *
     * @param statusOrRecognizeSpeech - Status of the speech recognition
     * @param inputStream - Input stream containing recognized text
     * @returns Stream iterator for accessing text results
     * @private
     */
    private streamIterator;
}
