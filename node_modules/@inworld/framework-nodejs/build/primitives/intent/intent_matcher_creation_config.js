"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentMatcherCreationConfig = void 0;
const expose_binary_1 = require("../../expose_binary");
const compiled_intent_1 = require("./compiled_intent");
const intent_matcher_config_1 = require("./intent_matcher_config");
/**
 * Class for configuring intent matcher creation.
 * Manages settings for creating intent matchers with specific configurations.
 * @internal
 */
class IntentMatcherCreationConfig {
    /**
     * Creates a new IntentMatcherCreationConfig instance.
     *
     * @param config - Configuration parameters for intent matcher creation
     */
    constructor(config) {
        this.external = null;
        this.intentMatcherConfig = null;
        this.compiledIntentsVector = null;
        this.external = expose_binary_1.IntentMatcherCreationConfigFunctions.new();
        this.intentMatcherConfig = new intent_matcher_config_1.IntentMatcherConfig({
            topNIntents: config.topNIntents,
            embeddingMatcherConfig: config.embeddingMatcherConfig,
            llmMatcherConfig: config.llmMatcherConfig,
        });
        expose_binary_1.IntentMatcherCreationConfigFunctions.setMatcherConfig(this.external, this.intentMatcherConfig.getExternal());
        this.setCompiledIntents(config.compiledIntents);
    }
    /**
     * Gets the matcher configuration.
     *
     * @returns Intent matcher configuration or null if not set
     */
    getMatcherConfig() {
        return this.intentMatcherConfig;
    }
    /**
     * Sets the compiled intents to match against.
     *
     * @param compiledIntents - Array of compiled intents
     * @private
     */
    setCompiledIntents(compiledIntents) {
        const vector = compiled_intent_1.VectorCompiledIntents.toVectorCompiledIntents(compiledIntents);
        expose_binary_1.IntentMatcherCreationConfigFunctions.setCompiledIntents(this.external, vector.getExternal());
        this.compiledIntentsVector = vector;
    }
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy() {
        if (this.compiledIntentsVector) {
            this.compiledIntentsVector.destroy();
            this.compiledIntentsVector = null;
        }
        if (this.intentMatcherConfig) {
            this.intentMatcherConfig.destroy();
            this.intentMatcherConfig = null;
        }
        if (this.external) {
            expose_binary_1.IntentMatcherCreationConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.IntentMatcherCreationConfig = IntentMatcherCreationConfig;
