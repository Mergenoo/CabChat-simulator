"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLMMatcherConfig = void 0;
const expose_binary_1 = require("../../expose_binary");
const text_generator_1 = require("../llm/text_generator");
/**
 * Class for configuring LLM-based intent matcher settings.
 * Manages parameters that control how LLMs are used to match intents.
 */
class LLMMatcherConfig {
    /**
     * Creates a new LLMMatcherConfig instance.
     *
     * @param params - Optional configuration parameters for LLM-based matching
     * @internal
     */
    constructor(params) {
        this.external = null;
        this.llmMatcherConfig = null;
        this.textGenerationConfig = null;
        this.embeddingSimilarityThreshold = null;
        this.maxEmbeddingMatchesForLlm = null;
        this.llmMatcherConfig = expose_binary_1.LlmMatcherConfigFunctions.new();
        if (!params) {
            this.external = expose_binary_1.OptionalLlmMatcherConfigFunctions.newWithValue(this.llmMatcherConfig);
            return;
        }
        if (params.generationConfig != undefined) {
            this.textGenerationConfig = new text_generator_1.TextGenerationConfig(params.generationConfig);
            expose_binary_1.LlmMatcherConfigFunctions.setGenerationConfig(this.llmMatcherConfig, this.textGenerationConfig.getExternal());
        }
        if (params.promptTemplate != undefined) {
            expose_binary_1.LlmMatcherConfigFunctions.setPromptTemplate(this.llmMatcherConfig, params.promptTemplate);
        }
        if (params.embeddingSimilarityThreshold != undefined) {
            this.embeddingSimilarityThreshold = expose_binary_1.OptionalFloatFunctions.newWithValue(params.embeddingSimilarityThreshold);
            expose_binary_1.LlmMatcherConfigFunctions.setEmbeddingSimilarityThreshold(this.llmMatcherConfig, this.embeddingSimilarityThreshold);
        }
        if (params.maxEmbeddingMatchesForLlm != undefined) {
            this.maxEmbeddingMatchesForLlm = expose_binary_1.OptionalFloatFunctions.newWithValue(params.maxEmbeddingMatchesForLlm);
            expose_binary_1.LlmMatcherConfigFunctions.setMaxEmbeddingMatchesForLlm(this.llmMatcherConfig, this.maxEmbeddingMatchesForLlm);
        }
        this.external = expose_binary_1.OptionalLlmMatcherConfigFunctions.newWithValue(this.llmMatcherConfig);
    }
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this configuration.
     * @internal
     */
    destroy() {
        if (this.maxEmbeddingMatchesForLlm) {
            expose_binary_1.OptionalFloatFunctions.delete(this.maxEmbeddingMatchesForLlm);
            this.maxEmbeddingMatchesForLlm = null;
        }
        if (this.embeddingSimilarityThreshold) {
            expose_binary_1.OptionalFloatFunctions.delete(this.embeddingSimilarityThreshold);
            this.embeddingSimilarityThreshold = null;
        }
        if (this.textGenerationConfig) {
            this.textGenerationConfig.destroy();
            this.textGenerationConfig = null;
        }
        if (this.llmMatcherConfig) {
            expose_binary_1.LlmMatcherConfigFunctions.delete(this.llmMatcherConfig);
            this.llmMatcherConfig = null;
        }
        if (this.external) {
            expose_binary_1.OptionalLlmMatcherConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
    /**
     * Gets the default values for LLM matcher configuration.
     *
     * @returns Object containing default configuration values
     */
    static getDefaultValues() {
        return {
            generationConfig: {
                maxNewTokens: 5,
                maxPromptLength: 8192,
                repetitionPenalty: 1.01,
                topP: 0.9,
                temperature: 0.1,
                frequencyPenalty: 0,
                presencePenalty: 0,
            },
            embeddingSimilarityThreshold: 0.7,
            maxEmbeddingMatchesForLlm: 5,
            promptTemplate: '',
        };
    }
}
exports.LLMMatcherConfig = LLMMatcherConfig;
