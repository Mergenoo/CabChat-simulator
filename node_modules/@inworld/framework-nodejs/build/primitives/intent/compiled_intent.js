"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompiledIntent = exports.VectorCompiledIntents = void 0;
const common_1 = require("../../common");
const expose_binary_1 = require("../../expose_binary");
/**
 * Class for managing collections of CompiledIntent objects.
 * Provides functionality for creating and manipulating vectors of compiled intents.
 * @internal
 */
class VectorCompiledIntents {
    /**
     * Creates a new VectorCompiledIntents instance.
     *
     * @param external - External reference to the native vector implementation
     */
    constructor(external) {
        this.external = null;
        this.external = external;
    }
    /**
     * Gets the number of compiled intents in this vector.
     *
     * @returns The number of compiled intents
     */
    size() {
        return expose_binary_1.VectorCompiledIntentFunctions.size(this.external);
    }
    /**
     * Gets a CompiledIntent at the specified index.
     *
     * @param index - The index to get
     * @returns The CompiledIntent at the specified index or null if out of bounds
     */
    get(index) {
        const count = expose_binary_1.VectorCompiledIntentFunctions.size(this.external);
        if (index < count) {
            return expose_binary_1.VectorCompiledIntentFunctions.get(this.external, index);
        }
        return null;
    }
    /**
     * Returns the external reference to the native vector implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Converts a VectorCompiledIntents to an array of CompiledIntent objects.
     *
     * @param vectorCompiledIntents - Vector of compiled intents to convert
     * @returns Array of CompiledIntent objects
     */
    static toCompiledIntentsArray(vectorCompiledIntents) {
        const compiledIntents = [];
        const count = expose_binary_1.VectorCompiledIntentFunctions.size(vectorCompiledIntents.getExternal());
        for (let i = 0; i < count; i++) {
            const compiledIntentRef = expose_binary_1.VectorCompiledIntentFunctions.get(vectorCompiledIntents.getExternal(), i);
            compiledIntents.push(new CompiledIntent(compiledIntentRef));
        }
        return compiledIntents;
    }
    /**
     * Converts an array of CompiledIntent objects to a VectorCompiledIntents.
     *
     * @param compiledIntents - Array of compiled intents to convert
     * @returns New VectorCompiledIntents instance
     */
    static toVectorCompiledIntents(compiledIntents) {
        const vector = expose_binary_1.VectorCompiledIntentFunctions.new();
        compiledIntents.forEach((intent) => {
            const compiledIntent = expose_binary_1.CompiledIntentFunctions.new();
            expose_binary_1.CompiledIntentFunctions.setName(compiledIntent, intent.getName());
            if (intent.getNormalizedPhrases()) {
                const phrases = expose_binary_1.VectorStringFunctions.new();
                intent.getNormalizedPhrases().forEach((phrase) => {
                    expose_binary_1.VectorStringFunctions.pushBack(phrases, phrase);
                });
                expose_binary_1.CompiledIntentFunctions.setNormalizedPhrases(compiledIntent, phrases);
            }
            if (intent.getPhraseEmbeddings()) {
                const embeddings = expose_binary_1.VectorVectorFloatFunctions.new();
                intent.getPhraseEmbeddings().forEach((embedding) => {
                    const vectorFloat = expose_binary_1.VectorFloatFunctions.new();
                    embedding.forEach((value) => {
                        expose_binary_1.VectorFloatFunctions.pushBack(vectorFloat, value);
                    });
                    expose_binary_1.VectorVectorFloatFunctions.pushBack(embeddings, vectorFloat);
                });
                expose_binary_1.CompiledIntentFunctions.setPhraseEmbeddings(compiledIntent, embeddings);
            }
            expose_binary_1.VectorCompiledIntentFunctions.pushBack(vector, compiledIntent);
        });
        return new VectorCompiledIntents(vector);
    }
    /**
     * Cleans up resources associated with this vector.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.VectorCompiledIntentFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.VectorCompiledIntents = VectorCompiledIntents;
/**
 * Class representing a compiled intent.
 * Contains optimized intent data ready for matching, including embeddings.
 */
class CompiledIntent {
    /**
     * Creates a new CompiledIntent instance.
     *
     * @param compiledIntent - External reference to the native compiled intent implementation
     * @internal
     */
    constructor(compiledIntent) {
        this.name = null;
        this.phraseEmbeddings = null;
        this.normalizedPhrases = null;
        const name = expose_binary_1.CompiledIntentFunctions.getName(compiledIntent);
        const phraseEmbeddingsRef = expose_binary_1.CompiledIntentFunctions.getPhraseEmbeddings(compiledIntent);
        const normalizedPhrases = expose_binary_1.CompiledIntentFunctions.getNormalizedPhrases(compiledIntent);
        if (name) {
            this.name = name;
        }
        if (phraseEmbeddingsRef) {
            const count = expose_binary_1.VectorVectorFloatFunctions.size(phraseEmbeddingsRef);
            const embeddings = [];
            for (let i = 0; i < count; i++) {
                const phraseEmbeddingRef = expose_binary_1.VectorVectorFloatFunctions.get(phraseEmbeddingsRef, i);
                embeddings.push(common_1.VectorFloat.toArray(phraseEmbeddingRef));
            }
            this.phraseEmbeddings = embeddings;
        }
        if (normalizedPhrases) {
            this.normalizedPhrases = common_1.VectorString.toArray(normalizedPhrases);
        }
    }
    /**
     * Gets the name of this compiled intent.
     *
     * @returns Intent name
     */
    getName() {
        return this.name;
    }
    /**
     * Gets the normalized phrases associated with this intent.
     *
     * @returns Array of normalized phrase strings
     */
    getNormalizedPhrases() {
        return this.normalizedPhrases;
    }
    /**
     * Gets the embedding vectors for each phrase in this intent.
     *
     * @returns Array of embedding vectors or null if not available
     */
    getPhraseEmbeddings() {
        return this.phraseEmbeddings;
    }
}
exports.CompiledIntent = CompiledIntent;
