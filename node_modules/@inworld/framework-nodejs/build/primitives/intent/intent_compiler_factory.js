"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentCompilerFactory = void 0;
const error_1 = require("../../common/error");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const intent_compiler_1 = require("./intent_compiler");
/**
 * Factory class for creating IntentCompiler instances.
 * Provides methods to create intent compilers with or without text embedder support.
 */
class IntentCompilerFactory {
    /**
     * Creates an intent compiler with text embedder support for enhanced intent compilation.
     * This version can generate embeddings for intents to enable embedding-based matching.
     *
     * @param textEmbedder - Optional text embedder to use for generating embeddings
     * @returns Promise resolving to a new IntentCompiler instance
     * @throws InworldError if creation fails
     */
    static create(textEmbedder) {
        return __awaiter(this, void 0, void 0, function* () {
            let status;
            let compiler = null;
            let factory;
            try {
                factory = expose_binary_1.IntentCompilerFactoryFunctions.new();
                if (textEmbedder) {
                    status = yield expose_binary_1.IntentCompilerFactoryFunctions.createWithTextEmbedder(factory, textEmbedder.getExternal());
                }
                else {
                    status = yield expose_binary_1.IntentCompilerFactoryFunctions.create(factory);
                }
                if (!expose_binary_1.StatusOrIntentCompilerInterfaceFunctions.isOK(status)) {
                    throw new error_1.InworldError('Failed to create IntentCompiler', (0, helpers_1.getStatus)(status));
                }
                compiler = new intent_compiler_1.IntentCompiler(expose_binary_1.StatusOrIntentCompilerInterfaceFunctions.getValue(status));
            }
            finally {
                if (status) {
                    expose_binary_1.StatusOrIntentCompilerInterfaceFunctions.delete(status);
                }
                if (factory) {
                    expose_binary_1.IntentCompilerFactoryFunctions.delete(factory);
                }
            }
            return compiler;
        });
    }
}
exports.IntentCompilerFactory = IntentCompilerFactory;
