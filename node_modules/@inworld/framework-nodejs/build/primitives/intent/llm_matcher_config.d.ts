import { ExternalReference } from '../../common/types';
import { TextGenerationConfigInterface } from '../llm/text_generator';
/**
 * Interface for configuring LLM-based intent matching.
 */
export interface LLMMatcherConfigInterface {
    /** Configuration for text generation used in LLM matching */
    generationConfig?: TextGenerationConfigInterface;
    /** Template used for intent recognition prompts */
    promptTemplate?: string;
    /** Threshold for embedding similarity when pre-filtering intents (0-1) */
    embeddingSimilarityThreshold?: number;
    /** Maximum number of embedding matches to pass to the LLM for final ranking */
    maxEmbeddingMatchesForLlm?: number;
}
/**
 * Class for configuring LLM-based intent matcher settings.
 * Manages parameters that control how LLMs are used to match intents.
 */
export declare class LLMMatcherConfig {
    private external;
    private llmMatcherConfig;
    private textGenerationConfig;
    private embeddingSimilarityThreshold;
    private maxEmbeddingMatchesForLlm;
    /**
     * Creates a new LLMMatcherConfig instance.
     *
     * @param params - Optional configuration parameters for LLM-based matching
     * @internal
     */
    constructor(params?: LLMMatcherConfigInterface);
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): ExternalReference;
    /**
     * Cleans up resources associated with this configuration.
     * @internal
     */
    destroy(): void;
    /**
     * Gets the default values for LLM matcher configuration.
     *
     * @returns Object containing default configuration values
     */
    static getDefaultValues(): {
        generationConfig: {
            maxNewTokens: number;
            maxPromptLength: number;
            repetitionPenalty: number;
            topP: number;
            temperature: number;
            frequencyPenalty: number;
            presencePenalty: number;
        };
        embeddingSimilarityThreshold: number;
        maxEmbeddingMatchesForLlm: number;
        promptTemplate: string;
    };
}
