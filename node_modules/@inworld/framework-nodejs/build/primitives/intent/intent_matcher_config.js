"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentMatcherConfig = void 0;
const expose_binary_1 = require("../../expose_binary");
const embedding_matcher_config_1 = require("./embedding_matcher_config");
const llm_matcher_config_1 = require("./llm_matcher_config");
/**
 * Class for configuring intent matcher behavior.
 * Manages parameters that control how intents are matched and scored.
 * @internal
 */
class IntentMatcherConfig {
    /**
     * Creates a new IntentMatcherConfig instance.
     *
     * @param config - Configuration parameters for intent matching
     */
    constructor(config) {
        this.external = null;
        this.embeddingMatcherConfig = null;
        this.llmMatcherConfig = null;
        this.external = expose_binary_1.IntentMatcherConfigFunctions.new();
        if (config.topNIntents) {
            expose_binary_1.IntentMatcherConfigFunctions.setTopNIntents(this.external, config.topNIntents);
        }
        if (config.embeddingMatcherConfig) {
            this.embeddingMatcherConfig = new embedding_matcher_config_1.EmbeddingMatcherConfig(config.embeddingMatcherConfig);
            expose_binary_1.IntentMatcherConfigFunctions.setEmbedding(this.external, this.embeddingMatcherConfig.getExternal());
        }
        if (config.llmMatcherConfig) {
            this.llmMatcherConfig = new llm_matcher_config_1.LLMMatcherConfig(config.llmMatcherConfig);
            expose_binary_1.IntentMatcherConfigFunctions.setLlm(this.external, this.llmMatcherConfig.getExternal());
        }
    }
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy() {
        if (this.embeddingMatcherConfig) {
            this.embeddingMatcherConfig.destroy();
            this.embeddingMatcherConfig = null;
        }
        if (this.llmMatcherConfig) {
            this.llmMatcherConfig.destroy();
            this.llmMatcherConfig = null;
        }
        if (this.external) {
            expose_binary_1.IntentMatcherConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.IntentMatcherConfig = IntentMatcherConfig;
