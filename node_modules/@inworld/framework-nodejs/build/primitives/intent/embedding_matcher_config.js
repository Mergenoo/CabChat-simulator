"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddingMatcherConfig = void 0;
const expose_binary_1 = require("../../expose_binary");
/**
 * Class for configuring embedding-based intent matcher settings.
 * Manages parameters that control how embeddings are used to match intents.
 */
class EmbeddingMatcherConfig {
    /**
     * Creates a new EmbeddingMatcherConfig instance.
     *
     * @param params - Configuration parameters for embedding-based matching
     * @internal
     */
    constructor(params) {
        this.optionalMatcherConfig = null;
        this.matcherConfig = null;
        this.matcherConfig = expose_binary_1.EmbeddingMatcherConfigFunctions.new();
        expose_binary_1.EmbeddingMatcherConfigFunctions.setSimilarityThreshold(this.matcherConfig, params.similarityThreshold);
        this.optionalMatcherConfig =
            expose_binary_1.OptionalEmbeddingMatcherConfigFunctions.newWithValue(this.matcherConfig);
    }
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.optionalMatcherConfig;
    }
    /**
     * Cleans up resources associated with this configuration.
     *
     * @internal
     */
    destroy() {
        if (this.optionalMatcherConfig) {
            expose_binary_1.OptionalEmbeddingMatcherConfigFunctions.delete(this.optionalMatcherConfig);
            this.optionalMatcherConfig = null;
        }
        if (this.matcherConfig) {
            expose_binary_1.EmbeddingMatcherConfigFunctions.delete(this.matcherConfig);
            this.matcherConfig = null;
        }
    }
    /**
     * Gets the default values for embedding matcher configuration.
     *
     * @returns Object containing default configuration values
     */
    static getDefaultValues() {
        return { similarityThreshold: 0.88 };
    }
}
exports.EmbeddingMatcherConfig = EmbeddingMatcherConfig;
