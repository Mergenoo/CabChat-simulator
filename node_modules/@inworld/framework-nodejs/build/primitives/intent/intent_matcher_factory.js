"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentMatcherFactory = void 0;
const error_1 = require("../../common/error");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const intent_matcher_1 = require("./intent_matcher");
const intent_matcher_creation_config_1 = require("./intent_matcher_creation_config");
/**
 * Factory class for creating IntentMatcher instances.
 * Provides methods to create intent matchers with different configurations.
 */
class IntentMatcherFactory {
    /**
     * Creates a new IntentMatcher instance.
     * Supports different combinations of dependencies (embedder and/or LLM).
     *
     * @param props - Configuration for intent matcher creation
     * @param props.config - Configuration for intent matcher creation
     * @param props.textEmbedder - Text embedder for embedding-based matching
     * @param props.llm - Optional LLM for LLM-based matching
     * @returns Promise resolving to a new IntentMatcher instance
     * @throws InworldError if creation fails
     */
    static create(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const { config, textEmbedder, llm } = props;
            let statusMatcher;
            let factory;
            let matcher = null;
            let creationConfig = null;
            let createFunc;
            if (textEmbedder && llm) {
                createFunc = () => expose_binary_1.IntentMatcherFactoryFunctions.createWithTextEmbedderAndLLM(factory, textEmbedder.getExternal(), llm.getExternal(), creationConfig.getExternal());
            }
            else if (textEmbedder) {
                createFunc = () => expose_binary_1.IntentMatcherFactoryFunctions.createWithTextEmbedder(factory, textEmbedder.getExternal(), creationConfig.getExternal());
            }
            else if (llm) {
                createFunc = () => expose_binary_1.IntentMatcherFactoryFunctions.createWithLLM(factory, llm.getExternal(), creationConfig.getExternal());
            }
            else {
                throw new error_1.InworldError('IntentMatcherFactory: Invalid arguments');
            }
            try {
                factory = expose_binary_1.IntentMatcherFactoryFunctions.new();
                creationConfig = new intent_matcher_creation_config_1.IntentMatcherCreationConfig(config);
                statusMatcher = yield createFunc();
                if (!expose_binary_1.StatusOrIntentMatcherInterfaceFunctions.isOK(statusMatcher)) {
                    throw new error_1.InworldError('Failed to create intent matcher', (0, helpers_1.getStatus)(statusMatcher));
                }
                const matcherRef = expose_binary_1.StatusOrIntentMatcherInterfaceFunctions.getValue(statusMatcher);
                matcher = new intent_matcher_1.IntentMatcher(matcherRef);
            }
            finally {
                if (creationConfig) {
                    creationConfig.destroy();
                    creationConfig = null;
                }
                if (statusMatcher) {
                    expose_binary_1.StatusOrIntentMatcherInterfaceFunctions.delete(statusMatcher);
                }
                if (factory) {
                    expose_binary_1.IntentMatcherFactoryFunctions.delete(factory);
                }
            }
            return matcher;
        });
    }
}
exports.IntentMatcherFactory = IntentMatcherFactory;
