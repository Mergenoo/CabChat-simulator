"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentMatcher = void 0;
const error_1 = require("../../common/error");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const intent_match_1 = require("./intent_match");
/**
 * Class for intent matching functionality.
 * Provides methods to detect intents in user input text.
 */
class IntentMatcher {
    /**
     * Creates a new IntentMatcher instance.
     *
     * @param external - External reference to the native intent matcher implementation
     * @internal
     */
    constructor(external) {
        this.external = null;
        this.external = external;
    }
    /**
     * Matches intents in the provided input text.
     *
     * @param input - Text to analyze for intents
     * @returns Promise resolving to an array of intent matches
     * @throws InworldError if intent matching fails
     */
    matchIntents(input) {
        return __awaiter(this, void 0, void 0, function* () {
            let statusMatches;
            let matches = [];
            try {
                statusMatches = yield expose_binary_1.IntentMatcherInterfaceFunctions.matchIntents(this.external, input);
                if (!expose_binary_1.StatusOrVectorIntentMatchFunctions.isOK(statusMatches)) {
                    throw new error_1.InworldError('Failed to match intents', (0, helpers_1.getStatus)(statusMatches));
                }
                const matchesVectorRef = expose_binary_1.StatusOrVectorIntentMatchFunctions.getValue(statusMatches);
                const count = expose_binary_1.VectorIntentMatchFunctions.size(matchesVectorRef);
                // Convert matches to IntentMatch objects
                for (let i = 0; i < count; i++) {
                    const matchRef = expose_binary_1.VectorIntentMatchFunctions.get(matchesVectorRef, i);
                    matches.push(new intent_match_1.IntentMatch(matchRef));
                }
            }
            finally {
                if (statusMatches) {
                    expose_binary_1.StatusOrVectorIntentMatchFunctions.delete(statusMatches);
                }
            }
            return matches;
        });
    }
    /**
     * Returns the external reference to the native intent matcher implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.external;
    }
    /**
     * Cleans up resources associated with this intent matcher.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.IntentMatcherInterfaceFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.IntentMatcher = IntentMatcher;
